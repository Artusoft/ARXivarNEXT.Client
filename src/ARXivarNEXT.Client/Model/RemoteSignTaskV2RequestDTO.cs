/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// Remote sign Taskwork V2
    /// </summary>
    [DataContract]
    public partial class RemoteSignTaskV2RequestDTO :  IEquatable<RemoteSignTaskV2RequestDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteSignTaskV2RequestDTO" /> class.
        /// </summary>
        /// <param name="signCertId">Identifier of signature certificate.</param>
        /// <param name="password">Password.</param>
        /// <param name="relatedCertId">Releted Cetificate Identifier.</param>
        /// <param name="otp">Otp.</param>
        /// <param name="pdfEmbeddedMode">Sign Pades if file is a pdf.</param>
        /// <param name="cadesAddSignature">Add a signature if file is a p7m.</param>
        /// <param name="signPdfProperties">Settings of pdf signature.</param>
        /// <param name="signElementList">Sign doccument list.</param>
        public RemoteSignTaskV2RequestDTO(int? signCertId = default(int?), string password = default(string), string relatedCertId = default(string), string otp = default(string), bool? pdfEmbeddedMode = default(bool?), bool? cadesAddSignature = default(bool?), SignPdfPropertiesDTO signPdfProperties = default(SignPdfPropertiesDTO), List<RemoteSignTaskV2ElementRequestDTO> signElementList = default(List<RemoteSignTaskV2ElementRequestDTO>))
        {
            this.SignCertId = signCertId;
            this.Password = password;
            this.RelatedCertId = relatedCertId;
            this.Otp = otp;
            this.PdfEmbeddedMode = pdfEmbeddedMode;
            this.CadesAddSignature = cadesAddSignature;
            this.SignPdfProperties = signPdfProperties;
            this.SignElementList = signElementList;
        }
        
        /// <summary>
        /// Identifier of signature certificate
        /// </summary>
        /// <value>Identifier of signature certificate</value>
        [DataMember(Name="signCertId", EmitDefaultValue=false)]
        public int? SignCertId { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Releted Cetificate Identifier
        /// </summary>
        /// <value>Releted Cetificate Identifier</value>
        [DataMember(Name="relatedCertId", EmitDefaultValue=false)]
        public string RelatedCertId { get; set; }

        /// <summary>
        /// Otp
        /// </summary>
        /// <value>Otp</value>
        [DataMember(Name="otp", EmitDefaultValue=false)]
        public string Otp { get; set; }

        /// <summary>
        /// Sign Pades if file is a pdf
        /// </summary>
        /// <value>Sign Pades if file is a pdf</value>
        [DataMember(Name="pdfEmbeddedMode", EmitDefaultValue=false)]
        public bool? PdfEmbeddedMode { get; set; }

        /// <summary>
        /// Add a signature if file is a p7m
        /// </summary>
        /// <value>Add a signature if file is a p7m</value>
        [DataMember(Name="cadesAddSignature", EmitDefaultValue=false)]
        public bool? CadesAddSignature { get; set; }

        /// <summary>
        /// Settings of pdf signature
        /// </summary>
        /// <value>Settings of pdf signature</value>
        [DataMember(Name="signPdfProperties", EmitDefaultValue=false)]
        public SignPdfPropertiesDTO SignPdfProperties { get; set; }

        /// <summary>
        /// Sign doccument list
        /// </summary>
        /// <value>Sign doccument list</value>
        [DataMember(Name="signElementList", EmitDefaultValue=false)]
        public List<RemoteSignTaskV2ElementRequestDTO> SignElementList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteSignTaskV2RequestDTO {\n");
            sb.Append("  SignCertId: ").Append(SignCertId).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  RelatedCertId: ").Append(RelatedCertId).Append("\n");
            sb.Append("  Otp: ").Append(Otp).Append("\n");
            sb.Append("  PdfEmbeddedMode: ").Append(PdfEmbeddedMode).Append("\n");
            sb.Append("  CadesAddSignature: ").Append(CadesAddSignature).Append("\n");
            sb.Append("  SignPdfProperties: ").Append(SignPdfProperties).Append("\n");
            sb.Append("  SignElementList: ").Append(SignElementList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteSignTaskV2RequestDTO);
        }

        /// <summary>
        /// Returns true if RemoteSignTaskV2RequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteSignTaskV2RequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteSignTaskV2RequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SignCertId == input.SignCertId ||
                    (this.SignCertId != null &&
                    this.SignCertId.Equals(input.SignCertId))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.RelatedCertId == input.RelatedCertId ||
                    (this.RelatedCertId != null &&
                    this.RelatedCertId.Equals(input.RelatedCertId))
                ) && 
                (
                    this.Otp == input.Otp ||
                    (this.Otp != null &&
                    this.Otp.Equals(input.Otp))
                ) && 
                (
                    this.PdfEmbeddedMode == input.PdfEmbeddedMode ||
                    (this.PdfEmbeddedMode != null &&
                    this.PdfEmbeddedMode.Equals(input.PdfEmbeddedMode))
                ) && 
                (
                    this.CadesAddSignature == input.CadesAddSignature ||
                    (this.CadesAddSignature != null &&
                    this.CadesAddSignature.Equals(input.CadesAddSignature))
                ) && 
                (
                    this.SignPdfProperties == input.SignPdfProperties ||
                    (this.SignPdfProperties != null &&
                    this.SignPdfProperties.Equals(input.SignPdfProperties))
                ) && 
                (
                    this.SignElementList == input.SignElementList ||
                    this.SignElementList != null &&
                    this.SignElementList.SequenceEqual(input.SignElementList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SignCertId != null)
                    hashCode = hashCode * 59 + this.SignCertId.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.RelatedCertId != null)
                    hashCode = hashCode * 59 + this.RelatedCertId.GetHashCode();
                if (this.Otp != null)
                    hashCode = hashCode * 59 + this.Otp.GetHashCode();
                if (this.PdfEmbeddedMode != null)
                    hashCode = hashCode * 59 + this.PdfEmbeddedMode.GetHashCode();
                if (this.CadesAddSignature != null)
                    hashCode = hashCode * 59 + this.CadesAddSignature.GetHashCode();
                if (this.SignPdfProperties != null)
                    hashCode = hashCode * 59 + this.SignPdfProperties.GetHashCode();
                if (this.SignElementList != null)
                    hashCode = hashCode * 59 + this.SignElementList.GetHashCode();
                return hashCode;
            }
        }
    }

}
