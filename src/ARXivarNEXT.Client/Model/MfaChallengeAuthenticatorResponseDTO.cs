/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// MfaChallengeAuthenticatorResponseDTO
    /// </summary>
    [DataContract]
    public partial class MfaChallengeAuthenticatorResponseDTO :  IEquatable<MfaChallengeAuthenticatorResponseDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MfaChallengeAuthenticatorResponseDTO" /> class.
        /// </summary>
        /// <param name="authenticatorType">authenticatorType.</param>
        /// <param name="oobCode">oobCode.</param>
        /// <param name="bindingMethod">bindingMethod.</param>
        /// <param name="oobTarget">oobTarget.</param>
        public MfaChallengeAuthenticatorResponseDTO(string authenticatorType = default(string), string oobCode = default(string), string bindingMethod = default(string), string oobTarget = default(string))
        {
            this.AuthenticatorType = authenticatorType;
            this.OobCode = oobCode;
            this.BindingMethod = bindingMethod;
            this.OobTarget = oobTarget;
        }
        
        /// <summary>
        /// Gets or Sets AuthenticatorType
        /// </summary>
        [DataMember(Name="authenticatorType", EmitDefaultValue=false)]
        public string AuthenticatorType { get; set; }

        /// <summary>
        /// Gets or Sets OobCode
        /// </summary>
        [DataMember(Name="oobCode", EmitDefaultValue=false)]
        public string OobCode { get; set; }

        /// <summary>
        /// Gets or Sets BindingMethod
        /// </summary>
        [DataMember(Name="bindingMethod", EmitDefaultValue=false)]
        public string BindingMethod { get; set; }

        /// <summary>
        /// Gets or Sets OobTarget
        /// </summary>
        [DataMember(Name="oobTarget", EmitDefaultValue=false)]
        public string OobTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MfaChallengeAuthenticatorResponseDTO {\n");
            sb.Append("  AuthenticatorType: ").Append(AuthenticatorType).Append("\n");
            sb.Append("  OobCode: ").Append(OobCode).Append("\n");
            sb.Append("  BindingMethod: ").Append(BindingMethod).Append("\n");
            sb.Append("  OobTarget: ").Append(OobTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MfaChallengeAuthenticatorResponseDTO);
        }

        /// <summary>
        /// Returns true if MfaChallengeAuthenticatorResponseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MfaChallengeAuthenticatorResponseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MfaChallengeAuthenticatorResponseDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthenticatorType == input.AuthenticatorType ||
                    (this.AuthenticatorType != null &&
                    this.AuthenticatorType.Equals(input.AuthenticatorType))
                ) && 
                (
                    this.OobCode == input.OobCode ||
                    (this.OobCode != null &&
                    this.OobCode.Equals(input.OobCode))
                ) && 
                (
                    this.BindingMethod == input.BindingMethod ||
                    (this.BindingMethod != null &&
                    this.BindingMethod.Equals(input.BindingMethod))
                ) && 
                (
                    this.OobTarget == input.OobTarget ||
                    (this.OobTarget != null &&
                    this.OobTarget.Equals(input.OobTarget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthenticatorType != null)
                    hashCode = hashCode * 59 + this.AuthenticatorType.GetHashCode();
                if (this.OobCode != null)
                    hashCode = hashCode * 59 + this.OobCode.GetHashCode();
                if (this.BindingMethod != null)
                    hashCode = hashCode * 59 + this.BindingMethod.GetHashCode();
                if (this.OobTarget != null)
                    hashCode = hashCode * 59 + this.OobTarget.GetHashCode();
                return hashCode;
            }
        }
    }

}
