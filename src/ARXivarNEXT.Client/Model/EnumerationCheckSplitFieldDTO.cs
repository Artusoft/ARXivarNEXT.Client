/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// Split field of the enumeration
    /// </summary>
    [DataContract]
    public partial class EnumerationCheckSplitFieldDTO :  IEquatable<EnumerationCheckSplitFieldDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnumerationCheckSplitFieldDTO" /> class.
        /// </summary>
        /// <param name="fieldName">Field name of the split field.</param>
        /// <param name="fieldDescription">Field description of the split field.</param>
        /// <param name="value">Value of the split field.</param>
        public EnumerationCheckSplitFieldDTO(string fieldName = default(string), string fieldDescription = default(string), string value = default(string))
        {
            this.FieldName = fieldName;
            this.FieldDescription = fieldDescription;
            this.Value = value;
        }
        
        /// <summary>
        /// Field name of the split field
        /// </summary>
        /// <value>Field name of the split field</value>
        [DataMember(Name="fieldName", EmitDefaultValue=false)]
        public string FieldName { get; set; }

        /// <summary>
        /// Field description of the split field
        /// </summary>
        /// <value>Field description of the split field</value>
        [DataMember(Name="fieldDescription", EmitDefaultValue=false)]
        public string FieldDescription { get; set; }

        /// <summary>
        /// Value of the split field
        /// </summary>
        /// <value>Value of the split field</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnumerationCheckSplitFieldDTO {\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldDescription: ").Append(FieldDescription).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnumerationCheckSplitFieldDTO);
        }

        /// <summary>
        /// Returns true if EnumerationCheckSplitFieldDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EnumerationCheckSplitFieldDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnumerationCheckSplitFieldDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.FieldDescription == input.FieldDescription ||
                    (this.FieldDescription != null &&
                    this.FieldDescription.Equals(input.FieldDescription))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                if (this.FieldDescription != null)
                    hashCode = hashCode * 59 + this.FieldDescription.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
    }

}
