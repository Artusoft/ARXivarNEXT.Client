/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// Class for Graphometric signature user preferences
    /// </summary>
    [DataContract]
    public partial class GraphometricSignatureUserPreferencesDTO :  IEquatable<GraphometricSignatureUserPreferencesDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphometricSignatureUserPreferencesDTO" /> class.
        /// </summary>
        /// <param name="readerName">Gets or sets the smartcard reader name.</param>
        /// <param name="pin">Gets or sets the PIN code.</param>
        /// <param name="showSignerInformation">Gets or sets whether to show the signer&#39;s information.</param>
        /// <param name="enableInformationLog">Gets or sets whether to enable the information log.</param>
        /// <param name="skipDocumentsSummaryUI">Gets or sets whether to skip the sign summary window.</param>
        /// <param name="storeSignedDocumentInArxivar">Gets or sets whether to store the signed documents in ARXivar.</param>
        public GraphometricSignatureUserPreferencesDTO(string readerName = default(string), string pin = default(string), bool? showSignerInformation = default(bool?), bool? enableInformationLog = default(bool?), bool? skipDocumentsSummaryUI = default(bool?), bool? storeSignedDocumentInArxivar = default(bool?))
        {
            this.ReaderName = readerName;
            this.Pin = pin;
            this.ShowSignerInformation = showSignerInformation;
            this.EnableInformationLog = enableInformationLog;
            this.SkipDocumentsSummaryUI = skipDocumentsSummaryUI;
            this.StoreSignedDocumentInArxivar = storeSignedDocumentInArxivar;
        }
        
        /// <summary>
        /// Gets or sets the smartcard reader name
        /// </summary>
        /// <value>Gets or sets the smartcard reader name</value>
        [DataMember(Name="readerName", EmitDefaultValue=false)]
        public string ReaderName { get; set; }

        /// <summary>
        /// Gets or sets the PIN code
        /// </summary>
        /// <value>Gets or sets the PIN code</value>
        [DataMember(Name="pin", EmitDefaultValue=false)]
        public string Pin { get; set; }

        /// <summary>
        /// Gets or sets whether to show the signer&#39;s information
        /// </summary>
        /// <value>Gets or sets whether to show the signer&#39;s information</value>
        [DataMember(Name="showSignerInformation", EmitDefaultValue=false)]
        public bool? ShowSignerInformation { get; set; }

        /// <summary>
        /// Gets or sets whether to enable the information log
        /// </summary>
        /// <value>Gets or sets whether to enable the information log</value>
        [DataMember(Name="enableInformationLog", EmitDefaultValue=false)]
        public bool? EnableInformationLog { get; set; }

        /// <summary>
        /// Gets or sets whether to skip the sign summary window
        /// </summary>
        /// <value>Gets or sets whether to skip the sign summary window</value>
        [DataMember(Name="skipDocumentsSummaryUI", EmitDefaultValue=false)]
        public bool? SkipDocumentsSummaryUI { get; set; }

        /// <summary>
        /// Gets or sets whether to store the signed documents in ARXivar
        /// </summary>
        /// <value>Gets or sets whether to store the signed documents in ARXivar</value>
        [DataMember(Name="storeSignedDocumentInArxivar", EmitDefaultValue=false)]
        public bool? StoreSignedDocumentInArxivar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GraphometricSignatureUserPreferencesDTO {\n");
            sb.Append("  ReaderName: ").Append(ReaderName).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  ShowSignerInformation: ").Append(ShowSignerInformation).Append("\n");
            sb.Append("  EnableInformationLog: ").Append(EnableInformationLog).Append("\n");
            sb.Append("  SkipDocumentsSummaryUI: ").Append(SkipDocumentsSummaryUI).Append("\n");
            sb.Append("  StoreSignedDocumentInArxivar: ").Append(StoreSignedDocumentInArxivar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GraphometricSignatureUserPreferencesDTO);
        }

        /// <summary>
        /// Returns true if GraphometricSignatureUserPreferencesDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of GraphometricSignatureUserPreferencesDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GraphometricSignatureUserPreferencesDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReaderName == input.ReaderName ||
                    (this.ReaderName != null &&
                    this.ReaderName.Equals(input.ReaderName))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.ShowSignerInformation == input.ShowSignerInformation ||
                    (this.ShowSignerInformation != null &&
                    this.ShowSignerInformation.Equals(input.ShowSignerInformation))
                ) && 
                (
                    this.EnableInformationLog == input.EnableInformationLog ||
                    (this.EnableInformationLog != null &&
                    this.EnableInformationLog.Equals(input.EnableInformationLog))
                ) && 
                (
                    this.SkipDocumentsSummaryUI == input.SkipDocumentsSummaryUI ||
                    (this.SkipDocumentsSummaryUI != null &&
                    this.SkipDocumentsSummaryUI.Equals(input.SkipDocumentsSummaryUI))
                ) && 
                (
                    this.StoreSignedDocumentInArxivar == input.StoreSignedDocumentInArxivar ||
                    (this.StoreSignedDocumentInArxivar != null &&
                    this.StoreSignedDocumentInArxivar.Equals(input.StoreSignedDocumentInArxivar))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReaderName != null)
                    hashCode = hashCode * 59 + this.ReaderName.GetHashCode();
                if (this.Pin != null)
                    hashCode = hashCode * 59 + this.Pin.GetHashCode();
                if (this.ShowSignerInformation != null)
                    hashCode = hashCode * 59 + this.ShowSignerInformation.GetHashCode();
                if (this.EnableInformationLog != null)
                    hashCode = hashCode * 59 + this.EnableInformationLog.GetHashCode();
                if (this.SkipDocumentsSummaryUI != null)
                    hashCode = hashCode * 59 + this.SkipDocumentsSummaryUI.GetHashCode();
                if (this.StoreSignedDocumentInArxivar != null)
                    hashCode = hashCode * 59 + this.StoreSignedDocumentInArxivar.GetHashCode();
                return hashCode;
            }
        }
    }

}
