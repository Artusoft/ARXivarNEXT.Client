/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// Folder Permission to set for specific user
    /// </summary>
    [DataContract]
    public partial class SetFolderUserPermissionDTO :  IEquatable<SetFolderUserPermissionDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetFolderUserPermissionDTO" /> class.
        /// </summary>
        /// <param name="user">Identifier of user.</param>
        /// <param name="permissions">Permission list.</param>
        /// <param name="spread">If the permission should be spread to subfolder.</param>
        public SetFolderUserPermissionDTO(int? user = default(int?), List<PermissionItemDTO> permissions = default(List<PermissionItemDTO>), bool? spread = default(bool?))
        {
            this.User = user;
            this.Permissions = permissions;
            this.Spread = spread;
        }
        
        /// <summary>
        /// Identifier of user
        /// </summary>
        /// <value>Identifier of user</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public int? User { get; set; }

        /// <summary>
        /// Permission list
        /// </summary>
        /// <value>Permission list</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<PermissionItemDTO> Permissions { get; set; }

        /// <summary>
        /// If the permission should be spread to subfolder
        /// </summary>
        /// <value>If the permission should be spread to subfolder</value>
        [DataMember(Name="spread", EmitDefaultValue=false)]
        public bool? Spread { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetFolderUserPermissionDTO {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Spread: ").Append(Spread).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetFolderUserPermissionDTO);
        }

        /// <summary>
        /// Returns true if SetFolderUserPermissionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SetFolderUserPermissionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetFolderUserPermissionDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.Spread == input.Spread ||
                    (this.Spread != null &&
                    this.Spread.Equals(input.Spread))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Spread != null)
                    hashCode = hashCode * 59 + this.Spread.GetHashCode();
                return hashCode;
            }
        }
    }

}
