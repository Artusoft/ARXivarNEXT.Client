/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// Defines the document type configuration for the graphometric signature
    /// </summary>
    [DataContract]
    public partial class GraphometricSignatureDocumentTypeDTO :  IEquatable<GraphometricSignatureDocumentTypeDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GraphometricSignatureDocumentTypeDTO" /> class.
        /// </summary>
        /// <param name="documentType">Gets or sets the id of the document type.</param>
        /// <param name="description">Gets or sets the description which will be shown during the sign process. It could be a formula.</param>
        /// <param name="schema">Gets or sets the schema of the signature.</param>
        /// <param name="securityCheck">Gets or sets whether the system should raise an error if the template file does not exist or the current user doesn&#39;t have rights on it.</param>
        /// <param name="templateDocumentNumber">Gets or sets the eventual system id of the profile which contains the Namirial template (.fct).</param>
        /// <param name="workflowOnError">Gets or sets the eventual id of the workflow which will be executed if an error occurred during the sign process.</param>
        /// <param name="workflowOnSign">Gets or sets the eventual id of the workflow which will be executed if the document has been signed successfully.</param>
        public GraphometricSignatureDocumentTypeDTO(DocumentTypeSimpleDTO documentType = default(DocumentTypeSimpleDTO), string description = default(string), string schema = default(string), bool? securityCheck = default(bool?), int? templateDocumentNumber = default(int?), int? workflowOnError = default(int?), int? workflowOnSign = default(int?))
        {
            this.DocumentType = documentType;
            this.Description = description;
            this.Schema = schema;
            this.SecurityCheck = securityCheck;
            this.TemplateDocumentNumber = templateDocumentNumber;
            this.WorkflowOnError = workflowOnError;
            this.WorkflowOnSign = workflowOnSign;
        }
        
        /// <summary>
        /// Gets or sets the id of the document type
        /// </summary>
        /// <value>Gets or sets the id of the document type</value>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public DocumentTypeSimpleDTO DocumentType { get; set; }

        /// <summary>
        /// Gets or sets the description which will be shown during the sign process. It could be a formula
        /// </summary>
        /// <value>Gets or sets the description which will be shown during the sign process. It could be a formula</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the schema of the signature
        /// </summary>
        /// <value>Gets or sets the schema of the signature</value>
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public string Schema { get; set; }

        /// <summary>
        /// Gets or sets whether the system should raise an error if the template file does not exist or the current user doesn&#39;t have rights on it
        /// </summary>
        /// <value>Gets or sets whether the system should raise an error if the template file does not exist or the current user doesn&#39;t have rights on it</value>
        [DataMember(Name="securityCheck", EmitDefaultValue=false)]
        public bool? SecurityCheck { get; set; }

        /// <summary>
        /// Gets or sets the eventual system id of the profile which contains the Namirial template (.fct)
        /// </summary>
        /// <value>Gets or sets the eventual system id of the profile which contains the Namirial template (.fct)</value>
        [DataMember(Name="templateDocumentNumber", EmitDefaultValue=false)]
        public int? TemplateDocumentNumber { get; set; }

        /// <summary>
        /// Gets or sets the eventual id of the workflow which will be executed if an error occurred during the sign process
        /// </summary>
        /// <value>Gets or sets the eventual id of the workflow which will be executed if an error occurred during the sign process</value>
        [DataMember(Name="workflowOnError", EmitDefaultValue=false)]
        public int? WorkflowOnError { get; set; }

        /// <summary>
        /// Gets or sets the eventual id of the workflow which will be executed if the document has been signed successfully
        /// </summary>
        /// <value>Gets or sets the eventual id of the workflow which will be executed if the document has been signed successfully</value>
        [DataMember(Name="workflowOnSign", EmitDefaultValue=false)]
        public int? WorkflowOnSign { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GraphometricSignatureDocumentTypeDTO {\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  SecurityCheck: ").Append(SecurityCheck).Append("\n");
            sb.Append("  TemplateDocumentNumber: ").Append(TemplateDocumentNumber).Append("\n");
            sb.Append("  WorkflowOnError: ").Append(WorkflowOnError).Append("\n");
            sb.Append("  WorkflowOnSign: ").Append(WorkflowOnSign).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GraphometricSignatureDocumentTypeDTO);
        }

        /// <summary>
        /// Returns true if GraphometricSignatureDocumentTypeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of GraphometricSignatureDocumentTypeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GraphometricSignatureDocumentTypeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Schema == input.Schema ||
                    (this.Schema != null &&
                    this.Schema.Equals(input.Schema))
                ) && 
                (
                    this.SecurityCheck == input.SecurityCheck ||
                    (this.SecurityCheck != null &&
                    this.SecurityCheck.Equals(input.SecurityCheck))
                ) && 
                (
                    this.TemplateDocumentNumber == input.TemplateDocumentNumber ||
                    (this.TemplateDocumentNumber != null &&
                    this.TemplateDocumentNumber.Equals(input.TemplateDocumentNumber))
                ) && 
                (
                    this.WorkflowOnError == input.WorkflowOnError ||
                    (this.WorkflowOnError != null &&
                    this.WorkflowOnError.Equals(input.WorkflowOnError))
                ) && 
                (
                    this.WorkflowOnSign == input.WorkflowOnSign ||
                    (this.WorkflowOnSign != null &&
                    this.WorkflowOnSign.Equals(input.WorkflowOnSign))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Schema != null)
                    hashCode = hashCode * 59 + this.Schema.GetHashCode();
                if (this.SecurityCheck != null)
                    hashCode = hashCode * 59 + this.SecurityCheck.GetHashCode();
                if (this.TemplateDocumentNumber != null)
                    hashCode = hashCode * 59 + this.TemplateDocumentNumber.GetHashCode();
                if (this.WorkflowOnError != null)
                    hashCode = hashCode * 59 + this.WorkflowOnError.GetHashCode();
                if (this.WorkflowOnSign != null)
                    hashCode = hashCode * 59 + this.WorkflowOnSign.GetHashCode();
                return hashCode;
            }
        }
    }

}
