/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// NpceOutUpdateDTO
    /// </summary>
    [DataContract]
    public partial class NpceOutUpdateDTO :  IEquatable<NpceOutUpdateDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceOutUpdateDTO" /> class.
        /// </summary>
        /// <param name="requestId">requestId.</param>
        /// <param name="userGuid">userGuid.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="letterNumber">letterNumber.</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError .</param>
        /// <param name="sendingDate">sendingDate.</param>
        /// <param name="layoutState">layoutState.</param>
        /// <param name="cost">cost.</param>
        /// <param name="costDetails">costDetails.</param>
        /// <param name="note">note.</param>
        /// <param name="letterType">Possible values:  0: Posta4  1: Posta1  -1: Undefined .</param>
        /// <param name="trackingId">trackingId.</param>
        /// <param name="confirmId">confirmId.</param>
        public NpceOutUpdateDTO(string requestId = default(string), string userGuid = default(string), string orderId = default(string), string letterNumber = default(string), int? state = default(int?), DateTime? sendingDate = default(DateTime?), int? layoutState = default(int?), double? cost = default(double?), List<NpceCostDetailDto> costDetails = default(List<NpceCostDetailDto>), string note = default(string), int? letterType = default(int?), string trackingId = default(string), string confirmId = default(string))
        {
            this.RequestId = requestId;
            this.UserGuid = userGuid;
            this.OrderId = orderId;
            this.LetterNumber = letterNumber;
            this.State = state;
            this.SendingDate = sendingDate;
            this.LayoutState = layoutState;
            this.Cost = cost;
            this.CostDetails = costDetails;
            this.Note = note;
            this.LetterType = letterType;
            this.TrackingId = trackingId;
            this.ConfirmId = confirmId;
        }
        
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets UserGuid
        /// </summary>
        [DataMember(Name="userGuid", EmitDefaultValue=false)]
        public string UserGuid { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets LetterNumber
        /// </summary>
        [DataMember(Name="letterNumber", EmitDefaultValue=false)]
        public string LetterNumber { get; set; }

        /// <summary>
        /// Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError 
        /// </summary>
        /// <value>Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// Gets or Sets SendingDate
        /// </summary>
        [DataMember(Name="sendingDate", EmitDefaultValue=false)]
        public DateTime? SendingDate { get; set; }

        /// <summary>
        /// Gets or Sets LayoutState
        /// </summary>
        [DataMember(Name="layoutState", EmitDefaultValue=false)]
        public int? LayoutState { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets CostDetails
        /// </summary>
        [DataMember(Name="costDetails", EmitDefaultValue=false)]
        public List<NpceCostDetailDto> CostDetails { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Possible values:  0: Posta4  1: Posta1  -1: Undefined 
        /// </summary>
        /// <value>Possible values:  0: Posta4  1: Posta1  -1: Undefined </value>
        [DataMember(Name="letterType", EmitDefaultValue=false)]
        public int? LetterType { get; set; }

        /// <summary>
        /// Gets or Sets TrackingId
        /// </summary>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmId
        /// </summary>
        [DataMember(Name="confirmId", EmitDefaultValue=false)]
        public string ConfirmId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NpceOutUpdateDTO {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  UserGuid: ").Append(UserGuid).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  LetterNumber: ").Append(LetterNumber).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SendingDate: ").Append(SendingDate).Append("\n");
            sb.Append("  LayoutState: ").Append(LayoutState).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CostDetails: ").Append(CostDetails).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  LetterType: ").Append(LetterType).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  ConfirmId: ").Append(ConfirmId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NpceOutUpdateDTO);
        }

        /// <summary>
        /// Returns true if NpceOutUpdateDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NpceOutUpdateDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NpceOutUpdateDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.UserGuid == input.UserGuid ||
                    (this.UserGuid != null &&
                    this.UserGuid.Equals(input.UserGuid))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.LetterNumber == input.LetterNumber ||
                    (this.LetterNumber != null &&
                    this.LetterNumber.Equals(input.LetterNumber))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.SendingDate == input.SendingDate ||
                    (this.SendingDate != null &&
                    this.SendingDate.Equals(input.SendingDate))
                ) && 
                (
                    this.LayoutState == input.LayoutState ||
                    (this.LayoutState != null &&
                    this.LayoutState.Equals(input.LayoutState))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CostDetails == input.CostDetails ||
                    this.CostDetails != null &&
                    this.CostDetails.SequenceEqual(input.CostDetails)
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.LetterType == input.LetterType ||
                    (this.LetterType != null &&
                    this.LetterType.Equals(input.LetterType))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.ConfirmId == input.ConfirmId ||
                    (this.ConfirmId != null &&
                    this.ConfirmId.Equals(input.ConfirmId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.UserGuid != null)
                    hashCode = hashCode * 59 + this.UserGuid.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.LetterNumber != null)
                    hashCode = hashCode * 59 + this.LetterNumber.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.SendingDate != null)
                    hashCode = hashCode * 59 + this.SendingDate.GetHashCode();
                if (this.LayoutState != null)
                    hashCode = hashCode * 59 + this.LayoutState.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CostDetails != null)
                    hashCode = hashCode * 59 + this.CostDetails.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.LetterType != null)
                    hashCode = hashCode * 59 + this.LetterType.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.ConfirmId != null)
                    hashCode = hashCode * 59 + this.ConfirmId.GetHashCode();
                return hashCode;
            }
        }
    }

}
