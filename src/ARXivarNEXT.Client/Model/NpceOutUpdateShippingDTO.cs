/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// NpceOutUpdateShippingDTO
    /// </summary>
    [DataContract]
    public partial class NpceOutUpdateShippingDTO :  IEquatable<NpceOutUpdateShippingDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceOutUpdateShippingDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NpceOutUpdateShippingDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceOutUpdateShippingDTO" /> class.
        /// </summary>
        /// <param name="type">Possible values:  0: Letter  1: RegisteredLetter .</param>
        /// <param name="returnReceipt">returnReceipt.</param>
        /// <param name="letterType">Possible values:  0: Posta4  1: Posta1  -1: Undefined .</param>
        /// <param name="requestedSendingDate">requestedSendingDate.</param>
        /// <param name="recipient">recipient (required).</param>
        /// <param name="useDefaultSender">useDefaultSender.</param>
        /// <param name="sender">sender (required).</param>
        /// <param name="note">note.</param>
        /// <param name="optionsDto">optionsDto.</param>
        public NpceOutUpdateShippingDTO(int? type = default(int?), bool? returnReceipt = default(bool?), int? letterType = default(int?), DateTime? requestedSendingDate = default(DateTime?), NpceOutPartyDTO recipient = default(NpceOutPartyDTO), bool? useDefaultSender = default(bool?), NpceOutPartyDTO sender = default(NpceOutPartyDTO), string note = default(string), NpceOutOptionsDTO optionsDto = default(NpceOutOptionsDTO))
        {
            // to ensure "recipient" is required (not null)
            if (recipient == null)
            {
                throw new InvalidDataException("recipient is a required property for NpceOutUpdateShippingDTO and cannot be null");
            }
            else
            {
                this.Recipient = recipient;
            }
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new InvalidDataException("sender is a required property for NpceOutUpdateShippingDTO and cannot be null");
            }
            else
            {
                this.Sender = sender;
            }
            this.Type = type;
            this.ReturnReceipt = returnReceipt;
            this.LetterType = letterType;
            this.RequestedSendingDate = requestedSendingDate;
            this.UseDefaultSender = useDefaultSender;
            this.Note = note;
            this.OptionsDto = optionsDto;
        }
        
        /// <summary>
        /// Possible values:  0: Letter  1: RegisteredLetter 
        /// </summary>
        /// <value>Possible values:  0: Letter  1: RegisteredLetter </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Gets or Sets ReturnReceipt
        /// </summary>
        [DataMember(Name="returnReceipt", EmitDefaultValue=false)]
        public bool? ReturnReceipt { get; set; }

        /// <summary>
        /// Possible values:  0: Posta4  1: Posta1  -1: Undefined 
        /// </summary>
        /// <value>Possible values:  0: Posta4  1: Posta1  -1: Undefined </value>
        [DataMember(Name="letterType", EmitDefaultValue=false)]
        public int? LetterType { get; set; }

        /// <summary>
        /// Gets or Sets RequestedSendingDate
        /// </summary>
        [DataMember(Name="requestedSendingDate", EmitDefaultValue=false)]
        public DateTime? RequestedSendingDate { get; set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public NpceOutPartyDTO Recipient { get; set; }

        /// <summary>
        /// Gets or Sets UseDefaultSender
        /// </summary>
        [DataMember(Name="useDefaultSender", EmitDefaultValue=false)]
        public bool? UseDefaultSender { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public NpceOutPartyDTO Sender { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets OptionsDto
        /// </summary>
        [DataMember(Name="optionsDto", EmitDefaultValue=false)]
        public NpceOutOptionsDTO OptionsDto { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NpceOutUpdateShippingDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ReturnReceipt: ").Append(ReturnReceipt).Append("\n");
            sb.Append("  LetterType: ").Append(LetterType).Append("\n");
            sb.Append("  RequestedSendingDate: ").Append(RequestedSendingDate).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  UseDefaultSender: ").Append(UseDefaultSender).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  OptionsDto: ").Append(OptionsDto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NpceOutUpdateShippingDTO);
        }

        /// <summary>
        /// Returns true if NpceOutUpdateShippingDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NpceOutUpdateShippingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NpceOutUpdateShippingDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ReturnReceipt == input.ReturnReceipt ||
                    (this.ReturnReceipt != null &&
                    this.ReturnReceipt.Equals(input.ReturnReceipt))
                ) && 
                (
                    this.LetterType == input.LetterType ||
                    (this.LetterType != null &&
                    this.LetterType.Equals(input.LetterType))
                ) && 
                (
                    this.RequestedSendingDate == input.RequestedSendingDate ||
                    (this.RequestedSendingDate != null &&
                    this.RequestedSendingDate.Equals(input.RequestedSendingDate))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.UseDefaultSender == input.UseDefaultSender ||
                    (this.UseDefaultSender != null &&
                    this.UseDefaultSender.Equals(input.UseDefaultSender))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.OptionsDto == input.OptionsDto ||
                    (this.OptionsDto != null &&
                    this.OptionsDto.Equals(input.OptionsDto))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ReturnReceipt != null)
                    hashCode = hashCode * 59 + this.ReturnReceipt.GetHashCode();
                if (this.LetterType != null)
                    hashCode = hashCode * 59 + this.LetterType.GetHashCode();
                if (this.RequestedSendingDate != null)
                    hashCode = hashCode * 59 + this.RequestedSendingDate.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.UseDefaultSender != null)
                    hashCode = hashCode * 59 + this.UseDefaultSender.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.OptionsDto != null)
                    hashCode = hashCode * 59 + this.OptionsDto.GetHashCode();
                return hashCode;
            }
        }
    }

}
