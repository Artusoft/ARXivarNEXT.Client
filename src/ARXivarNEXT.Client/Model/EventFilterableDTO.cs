/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// EventFilterableDTO
    /// </summary>
    [DataContract]
    public partial class EventFilterableDTO :  IEquatable<EventFilterableDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventFilterableDTO" /> class.
        /// </summary>
        /// <param name="dataType">Possible values:  0: Integer  1: IntegerNullable  2: String  3: DateTime  4: DateTimeNullable  5: Double  6: DoubleNullable  7: Bool  8: DmAoo  9: DmTipiDocumento  10: DmTabelleStato  11: DmProfileInOut  12: AggiuntivoCombo  13: AggiuntivoTable  14: AggiuntivoMultivalues  15: DmDatiProfilo  16: DmDatiProfiloCollection  17: DmElencoPraticheStato  18: DmSharingMailerKind  19: DmUtenti  20: DmRubricaStato  21: DmRubricaTipo  22: DmRubricaPriorita  23: DmProfileIsAos  24: DmProfileFlag  25: DmRubricaCategoria .</param>
        /// <param name="filterClasseName">filterClasseName.</param>
        /// <param name="field">field.</param>
        /// <param name="description">description.</param>
        /// <param name="descriptionEx">descriptionEx.</param>
        /// <param name="filterContext">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument .</param>
        public EventFilterableDTO(int? dataType = default(int?), string filterClasseName = default(string), string field = default(string), string description = default(string), string descriptionEx = default(string), int? filterContext = default(int?))
        {
            this.DataType = dataType;
            this.FilterClasseName = filterClasseName;
            this.Field = field;
            this.Description = description;
            this.DescriptionEx = descriptionEx;
            this.FilterContext = filterContext;
        }
        
        /// <summary>
        /// Possible values:  0: Integer  1: IntegerNullable  2: String  3: DateTime  4: DateTimeNullable  5: Double  6: DoubleNullable  7: Bool  8: DmAoo  9: DmTipiDocumento  10: DmTabelleStato  11: DmProfileInOut  12: AggiuntivoCombo  13: AggiuntivoTable  14: AggiuntivoMultivalues  15: DmDatiProfilo  16: DmDatiProfiloCollection  17: DmElencoPraticheStato  18: DmSharingMailerKind  19: DmUtenti  20: DmRubricaStato  21: DmRubricaTipo  22: DmRubricaPriorita  23: DmProfileIsAos  24: DmProfileFlag  25: DmRubricaCategoria 
        /// </summary>
        /// <value>Possible values:  0: Integer  1: IntegerNullable  2: String  3: DateTime  4: DateTimeNullable  5: Double  6: DoubleNullable  7: Bool  8: DmAoo  9: DmTipiDocumento  10: DmTabelleStato  11: DmProfileInOut  12: AggiuntivoCombo  13: AggiuntivoTable  14: AggiuntivoMultivalues  15: DmDatiProfilo  16: DmDatiProfiloCollection  17: DmElencoPraticheStato  18: DmSharingMailerKind  19: DmUtenti  20: DmRubricaStato  21: DmRubricaTipo  22: DmRubricaPriorita  23: DmProfileIsAos  24: DmProfileFlag  25: DmRubricaCategoria </value>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public int? DataType { get; set; }

        /// <summary>
        /// Gets or Sets FilterClasseName
        /// </summary>
        [DataMember(Name="filterClasseName", EmitDefaultValue=false)]
        public string FilterClasseName { get; set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionEx
        /// </summary>
        [DataMember(Name="descriptionEx", EmitDefaultValue=false)]
        public string DescriptionEx { get; set; }

        /// <summary>
        /// Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument 
        /// </summary>
        /// <value>Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </value>
        [DataMember(Name="filterContext", EmitDefaultValue=false)]
        public int? FilterContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventFilterableDTO {\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  FilterClasseName: ").Append(FilterClasseName).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionEx: ").Append(DescriptionEx).Append("\n");
            sb.Append("  FilterContext: ").Append(FilterContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventFilterableDTO);
        }

        /// <summary>
        /// Returns true if EventFilterableDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EventFilterableDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventFilterableDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.FilterClasseName == input.FilterClasseName ||
                    (this.FilterClasseName != null &&
                    this.FilterClasseName.Equals(input.FilterClasseName))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DescriptionEx == input.DescriptionEx ||
                    (this.DescriptionEx != null &&
                    this.DescriptionEx.Equals(input.DescriptionEx))
                ) && 
                (
                    this.FilterContext == input.FilterContext ||
                    (this.FilterContext != null &&
                    this.FilterContext.Equals(input.FilterContext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.FilterClasseName != null)
                    hashCode = hashCode * 59 + this.FilterClasseName.GetHashCode();
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DescriptionEx != null)
                    hashCode = hashCode * 59 + this.DescriptionEx.GetHashCode();
                if (this.FilterContext != null)
                    hashCode = hashCode * 59 + this.FilterContext.GetHashCode();
                return hashCode;
            }
        }
    }

}
