/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// NpceTrackingDTO
    /// </summary>
    [DataContract]
    public partial class NpceTrackingDTO :  IEquatable<NpceTrackingDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceTrackingDTO" /> class.
        /// </summary>
        /// <param name="deliveryReason">deliveryReason.</param>
        /// <param name="geoCoordinates">geoCoordinates.</param>
        /// <param name="trackDate">trackDate.</param>
        /// <param name="officeTrackDescription">officeTrackDescription.</param>
        /// <param name="deliveryOutcome">deliveryOutcome.</param>
        /// <param name="trackOutcome">Possible values:  0: Delivered  2: SyntacticError  3: WrongFields  4: ApplicationError  99: Anomaly  -1: Undefined .</param>
        /// <param name="workingPhase">workingPhase.</param>
        /// <param name="summaryState">summaryState.</param>
        public NpceTrackingDTO(string deliveryReason = default(string), string geoCoordinates = default(string), DateTime? trackDate = default(DateTime?), string officeTrackDescription = default(string), string deliveryOutcome = default(string), int? trackOutcome = default(int?), string workingPhase = default(string), string summaryState = default(string))
        {
            this.DeliveryReason = deliveryReason;
            this.GeoCoordinates = geoCoordinates;
            this.TrackDate = trackDate;
            this.OfficeTrackDescription = officeTrackDescription;
            this.DeliveryOutcome = deliveryOutcome;
            this.TrackOutcome = trackOutcome;
            this.WorkingPhase = workingPhase;
            this.SummaryState = summaryState;
        }
        
        /// <summary>
        /// Gets or Sets DeliveryReason
        /// </summary>
        [DataMember(Name="deliveryReason", EmitDefaultValue=false)]
        public string DeliveryReason { get; set; }

        /// <summary>
        /// Gets or Sets GeoCoordinates
        /// </summary>
        [DataMember(Name="geoCoordinates", EmitDefaultValue=false)]
        public string GeoCoordinates { get; set; }

        /// <summary>
        /// Gets or Sets TrackDate
        /// </summary>
        [DataMember(Name="trackDate", EmitDefaultValue=false)]
        public DateTime? TrackDate { get; set; }

        /// <summary>
        /// Gets or Sets OfficeTrackDescription
        /// </summary>
        [DataMember(Name="officeTrackDescription", EmitDefaultValue=false)]
        public string OfficeTrackDescription { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryOutcome
        /// </summary>
        [DataMember(Name="deliveryOutcome", EmitDefaultValue=false)]
        public string DeliveryOutcome { get; set; }

        /// <summary>
        /// Possible values:  0: Delivered  2: SyntacticError  3: WrongFields  4: ApplicationError  99: Anomaly  -1: Undefined 
        /// </summary>
        /// <value>Possible values:  0: Delivered  2: SyntacticError  3: WrongFields  4: ApplicationError  99: Anomaly  -1: Undefined </value>
        [DataMember(Name="trackOutcome", EmitDefaultValue=false)]
        public int? TrackOutcome { get; set; }

        /// <summary>
        /// Gets or Sets WorkingPhase
        /// </summary>
        [DataMember(Name="workingPhase", EmitDefaultValue=false)]
        public string WorkingPhase { get; set; }

        /// <summary>
        /// Gets or Sets SummaryState
        /// </summary>
        [DataMember(Name="summaryState", EmitDefaultValue=false)]
        public string SummaryState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NpceTrackingDTO {\n");
            sb.Append("  DeliveryReason: ").Append(DeliveryReason).Append("\n");
            sb.Append("  GeoCoordinates: ").Append(GeoCoordinates).Append("\n");
            sb.Append("  TrackDate: ").Append(TrackDate).Append("\n");
            sb.Append("  OfficeTrackDescription: ").Append(OfficeTrackDescription).Append("\n");
            sb.Append("  DeliveryOutcome: ").Append(DeliveryOutcome).Append("\n");
            sb.Append("  TrackOutcome: ").Append(TrackOutcome).Append("\n");
            sb.Append("  WorkingPhase: ").Append(WorkingPhase).Append("\n");
            sb.Append("  SummaryState: ").Append(SummaryState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NpceTrackingDTO);
        }

        /// <summary>
        /// Returns true if NpceTrackingDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NpceTrackingDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NpceTrackingDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeliveryReason == input.DeliveryReason ||
                    (this.DeliveryReason != null &&
                    this.DeliveryReason.Equals(input.DeliveryReason))
                ) && 
                (
                    this.GeoCoordinates == input.GeoCoordinates ||
                    (this.GeoCoordinates != null &&
                    this.GeoCoordinates.Equals(input.GeoCoordinates))
                ) && 
                (
                    this.TrackDate == input.TrackDate ||
                    (this.TrackDate != null &&
                    this.TrackDate.Equals(input.TrackDate))
                ) && 
                (
                    this.OfficeTrackDescription == input.OfficeTrackDescription ||
                    (this.OfficeTrackDescription != null &&
                    this.OfficeTrackDescription.Equals(input.OfficeTrackDescription))
                ) && 
                (
                    this.DeliveryOutcome == input.DeliveryOutcome ||
                    (this.DeliveryOutcome != null &&
                    this.DeliveryOutcome.Equals(input.DeliveryOutcome))
                ) && 
                (
                    this.TrackOutcome == input.TrackOutcome ||
                    (this.TrackOutcome != null &&
                    this.TrackOutcome.Equals(input.TrackOutcome))
                ) && 
                (
                    this.WorkingPhase == input.WorkingPhase ||
                    (this.WorkingPhase != null &&
                    this.WorkingPhase.Equals(input.WorkingPhase))
                ) && 
                (
                    this.SummaryState == input.SummaryState ||
                    (this.SummaryState != null &&
                    this.SummaryState.Equals(input.SummaryState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryReason != null)
                    hashCode = hashCode * 59 + this.DeliveryReason.GetHashCode();
                if (this.GeoCoordinates != null)
                    hashCode = hashCode * 59 + this.GeoCoordinates.GetHashCode();
                if (this.TrackDate != null)
                    hashCode = hashCode * 59 + this.TrackDate.GetHashCode();
                if (this.OfficeTrackDescription != null)
                    hashCode = hashCode * 59 + this.OfficeTrackDescription.GetHashCode();
                if (this.DeliveryOutcome != null)
                    hashCode = hashCode * 59 + this.DeliveryOutcome.GetHashCode();
                if (this.TrackOutcome != null)
                    hashCode = hashCode * 59 + this.TrackOutcome.GetHashCode();
                if (this.WorkingPhase != null)
                    hashCode = hashCode * 59 + this.WorkingPhase.GetHashCode();
                if (this.SummaryState != null)
                    hashCode = hashCode * 59 + this.SummaryState.GetHashCode();
                return hashCode;
            }
        }
    }

}
