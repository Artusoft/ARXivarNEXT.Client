/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// BarcodeScanOptionsDTO
    /// </summary>
    [DataContract]
    public partial class BarcodeScanOptionsDTO :  IEquatable<BarcodeScanOptionsDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeScanOptionsDTO" /> class.
        /// </summary>
        /// <param name="enableMedianFilter">enableMedianFilter.</param>
        /// <param name="maxAngleTolerance">maxAngleTolerance.</param>
        /// <param name="minBarcodeLength">minBarcodeLength.</param>
        /// <param name="maxBarcodeLength">maxBarcodeLength.</param>
        /// <param name="noiseLevelSuppression">noiseLevelSuppression.</param>
        /// <param name="quiteZoneSize">quiteZoneSize.</param>
        /// <param name="pdfScanBit">pdfScanBit.</param>
        /// <param name="enableCheckDigit">enableCheckDigit.</param>
        /// <param name="enableDespeckle">enableDespeckle.</param>
        /// <param name="enablePdfImageOnly">enablePdfImageOnly.</param>
        /// <param name="enableErrorCorrection">enableErrorCorrection.</param>
        public BarcodeScanOptionsDTO(bool? enableMedianFilter = default(bool?), int? maxAngleTolerance = default(int?), int? minBarcodeLength = default(int?), int? maxBarcodeLength = default(int?), int? noiseLevelSuppression = default(int?), int? quiteZoneSize = default(int?), int? pdfScanBit = default(int?), bool? enableCheckDigit = default(bool?), bool? enableDespeckle = default(bool?), bool? enablePdfImageOnly = default(bool?), bool? enableErrorCorrection = default(bool?))
        {
            this.EnableMedianFilter = enableMedianFilter;
            this.MaxAngleTolerance = maxAngleTolerance;
            this.MinBarcodeLength = minBarcodeLength;
            this.MaxBarcodeLength = maxBarcodeLength;
            this.NoiseLevelSuppression = noiseLevelSuppression;
            this.QuiteZoneSize = quiteZoneSize;
            this.PdfScanBit = pdfScanBit;
            this.EnableCheckDigit = enableCheckDigit;
            this.EnableDespeckle = enableDespeckle;
            this.EnablePdfImageOnly = enablePdfImageOnly;
            this.EnableErrorCorrection = enableErrorCorrection;
        }
        
        /// <summary>
        /// Gets or Sets EnableMedianFilter
        /// </summary>
        [DataMember(Name="enableMedianFilter", EmitDefaultValue=false)]
        public bool? EnableMedianFilter { get; set; }

        /// <summary>
        /// Gets or Sets MaxAngleTolerance
        /// </summary>
        [DataMember(Name="maxAngleTolerance", EmitDefaultValue=false)]
        public int? MaxAngleTolerance { get; set; }

        /// <summary>
        /// Gets or Sets MinBarcodeLength
        /// </summary>
        [DataMember(Name="minBarcodeLength", EmitDefaultValue=false)]
        public int? MinBarcodeLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxBarcodeLength
        /// </summary>
        [DataMember(Name="maxBarcodeLength", EmitDefaultValue=false)]
        public int? MaxBarcodeLength { get; set; }

        /// <summary>
        /// Gets or Sets NoiseLevelSuppression
        /// </summary>
        [DataMember(Name="noiseLevelSuppression", EmitDefaultValue=false)]
        public int? NoiseLevelSuppression { get; set; }

        /// <summary>
        /// Gets or Sets QuiteZoneSize
        /// </summary>
        [DataMember(Name="quiteZoneSize", EmitDefaultValue=false)]
        public int? QuiteZoneSize { get; set; }

        /// <summary>
        /// Gets or Sets PdfScanBit
        /// </summary>
        [DataMember(Name="pdfScanBit", EmitDefaultValue=false)]
        public int? PdfScanBit { get; set; }

        /// <summary>
        /// Gets or Sets EnableCheckDigit
        /// </summary>
        [DataMember(Name="enableCheckDigit", EmitDefaultValue=false)]
        public bool? EnableCheckDigit { get; set; }

        /// <summary>
        /// Gets or Sets EnableDespeckle
        /// </summary>
        [DataMember(Name="enableDespeckle", EmitDefaultValue=false)]
        public bool? EnableDespeckle { get; set; }

        /// <summary>
        /// Gets or Sets EnablePdfImageOnly
        /// </summary>
        [DataMember(Name="enablePdfImageOnly", EmitDefaultValue=false)]
        public bool? EnablePdfImageOnly { get; set; }

        /// <summary>
        /// Gets or Sets EnableErrorCorrection
        /// </summary>
        [DataMember(Name="enableErrorCorrection", EmitDefaultValue=false)]
        public bool? EnableErrorCorrection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BarcodeScanOptionsDTO {\n");
            sb.Append("  EnableMedianFilter: ").Append(EnableMedianFilter).Append("\n");
            sb.Append("  MaxAngleTolerance: ").Append(MaxAngleTolerance).Append("\n");
            sb.Append("  MinBarcodeLength: ").Append(MinBarcodeLength).Append("\n");
            sb.Append("  MaxBarcodeLength: ").Append(MaxBarcodeLength).Append("\n");
            sb.Append("  NoiseLevelSuppression: ").Append(NoiseLevelSuppression).Append("\n");
            sb.Append("  QuiteZoneSize: ").Append(QuiteZoneSize).Append("\n");
            sb.Append("  PdfScanBit: ").Append(PdfScanBit).Append("\n");
            sb.Append("  EnableCheckDigit: ").Append(EnableCheckDigit).Append("\n");
            sb.Append("  EnableDespeckle: ").Append(EnableDespeckle).Append("\n");
            sb.Append("  EnablePdfImageOnly: ").Append(EnablePdfImageOnly).Append("\n");
            sb.Append("  EnableErrorCorrection: ").Append(EnableErrorCorrection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BarcodeScanOptionsDTO);
        }

        /// <summary>
        /// Returns true if BarcodeScanOptionsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of BarcodeScanOptionsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeScanOptionsDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableMedianFilter == input.EnableMedianFilter ||
                    (this.EnableMedianFilter != null &&
                    this.EnableMedianFilter.Equals(input.EnableMedianFilter))
                ) && 
                (
                    this.MaxAngleTolerance == input.MaxAngleTolerance ||
                    (this.MaxAngleTolerance != null &&
                    this.MaxAngleTolerance.Equals(input.MaxAngleTolerance))
                ) && 
                (
                    this.MinBarcodeLength == input.MinBarcodeLength ||
                    (this.MinBarcodeLength != null &&
                    this.MinBarcodeLength.Equals(input.MinBarcodeLength))
                ) && 
                (
                    this.MaxBarcodeLength == input.MaxBarcodeLength ||
                    (this.MaxBarcodeLength != null &&
                    this.MaxBarcodeLength.Equals(input.MaxBarcodeLength))
                ) && 
                (
                    this.NoiseLevelSuppression == input.NoiseLevelSuppression ||
                    (this.NoiseLevelSuppression != null &&
                    this.NoiseLevelSuppression.Equals(input.NoiseLevelSuppression))
                ) && 
                (
                    this.QuiteZoneSize == input.QuiteZoneSize ||
                    (this.QuiteZoneSize != null &&
                    this.QuiteZoneSize.Equals(input.QuiteZoneSize))
                ) && 
                (
                    this.PdfScanBit == input.PdfScanBit ||
                    (this.PdfScanBit != null &&
                    this.PdfScanBit.Equals(input.PdfScanBit))
                ) && 
                (
                    this.EnableCheckDigit == input.EnableCheckDigit ||
                    (this.EnableCheckDigit != null &&
                    this.EnableCheckDigit.Equals(input.EnableCheckDigit))
                ) && 
                (
                    this.EnableDespeckle == input.EnableDespeckle ||
                    (this.EnableDespeckle != null &&
                    this.EnableDespeckle.Equals(input.EnableDespeckle))
                ) && 
                (
                    this.EnablePdfImageOnly == input.EnablePdfImageOnly ||
                    (this.EnablePdfImageOnly != null &&
                    this.EnablePdfImageOnly.Equals(input.EnablePdfImageOnly))
                ) && 
                (
                    this.EnableErrorCorrection == input.EnableErrorCorrection ||
                    (this.EnableErrorCorrection != null &&
                    this.EnableErrorCorrection.Equals(input.EnableErrorCorrection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnableMedianFilter != null)
                    hashCode = hashCode * 59 + this.EnableMedianFilter.GetHashCode();
                if (this.MaxAngleTolerance != null)
                    hashCode = hashCode * 59 + this.MaxAngleTolerance.GetHashCode();
                if (this.MinBarcodeLength != null)
                    hashCode = hashCode * 59 + this.MinBarcodeLength.GetHashCode();
                if (this.MaxBarcodeLength != null)
                    hashCode = hashCode * 59 + this.MaxBarcodeLength.GetHashCode();
                if (this.NoiseLevelSuppression != null)
                    hashCode = hashCode * 59 + this.NoiseLevelSuppression.GetHashCode();
                if (this.QuiteZoneSize != null)
                    hashCode = hashCode * 59 + this.QuiteZoneSize.GetHashCode();
                if (this.PdfScanBit != null)
                    hashCode = hashCode * 59 + this.PdfScanBit.GetHashCode();
                if (this.EnableCheckDigit != null)
                    hashCode = hashCode * 59 + this.EnableCheckDigit.GetHashCode();
                if (this.EnableDespeckle != null)
                    hashCode = hashCode * 59 + this.EnableDespeckle.GetHashCode();
                if (this.EnablePdfImageOnly != null)
                    hashCode = hashCode * 59 + this.EnablePdfImageOnly.GetHashCode();
                if (this.EnableErrorCorrection != null)
                    hashCode = hashCode * 59 + this.EnableErrorCorrection.GetHashCode();
                return hashCode;
            }
        }
    }

}
