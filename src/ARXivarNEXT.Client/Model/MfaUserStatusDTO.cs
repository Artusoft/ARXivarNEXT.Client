/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// MfaUserStatusDTO
    /// </summary>
    [DataContract]
    public partial class MfaUserStatusDTO :  IEquatable<MfaUserStatusDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MfaUserStatusDTO" /> class.
        /// </summary>
        /// <param name="mfaPermission">Possible values:  0: Deny  1: Allow  2: Mandatory .</param>
        /// <param name="_readonly">_readonly.</param>
        public MfaUserStatusDTO(int? mfaPermission = default(int?), bool? _readonly = default(bool?))
        {
            this.MfaPermission = mfaPermission;
            this.Readonly = _readonly;
        }
        
        /// <summary>
        /// Possible values:  0: Deny  1: Allow  2: Mandatory 
        /// </summary>
        /// <value>Possible values:  0: Deny  1: Allow  2: Mandatory </value>
        [DataMember(Name="mfaPermission", EmitDefaultValue=false)]
        public int? MfaPermission { get; set; }

        /// <summary>
        /// Gets or Sets Readonly
        /// </summary>
        [DataMember(Name="readonly", EmitDefaultValue=false)]
        public bool? Readonly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MfaUserStatusDTO {\n");
            sb.Append("  MfaPermission: ").Append(MfaPermission).Append("\n");
            sb.Append("  Readonly: ").Append(Readonly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MfaUserStatusDTO);
        }

        /// <summary>
        /// Returns true if MfaUserStatusDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MfaUserStatusDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MfaUserStatusDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MfaPermission == input.MfaPermission ||
                    (this.MfaPermission != null &&
                    this.MfaPermission.Equals(input.MfaPermission))
                ) && 
                (
                    this.Readonly == input.Readonly ||
                    (this.Readonly != null &&
                    this.Readonly.Equals(input.Readonly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MfaPermission != null)
                    hashCode = hashCode * 59 + this.MfaPermission.GetHashCode();
                if (this.Readonly != null)
                    hashCode = hashCode * 59 + this.Readonly.GetHashCode();
                return hashCode;
            }
        }
    }

}
