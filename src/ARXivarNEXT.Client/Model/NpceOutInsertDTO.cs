/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// NpceOutInsertDTO
    /// </summary>
    [DataContract]
    public partial class NpceOutInsertDTO :  IEquatable<NpceOutInsertDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceOutInsertDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NpceOutInsertDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceOutInsertDTO" /> class.
        /// </summary>
        /// <param name="docNumbers">docNumbers (required).</param>
        /// <param name="requestedSendingDate">requestedSendingDate.</param>
        /// <param name="type">Possible values:  0: Letter  1: RegisteredLetter  (required).</param>
        /// <param name="returnReceipt">returnReceipt (required).</param>
        /// <param name="letterType">Possible values:  0: Posta4  1: Posta1  -1: Undefined  (required).</param>
        /// <param name="cc">cc (required).</param>
        /// <param name="options">options (required).</param>
        public NpceOutInsertDTO(List<int?> docNumbers = default(List<int?>), DateTime? requestedSendingDate = default(DateTime?), int? type = default(int?), bool? returnReceipt = default(bool?), int? letterType = default(int?), bool? cc = default(bool?), NpceOutOptionsDTO options = default(NpceOutOptionsDTO))
        {
            // to ensure "docNumbers" is required (not null)
            if (docNumbers == null)
            {
                throw new InvalidDataException("docNumbers is a required property for NpceOutInsertDTO and cannot be null");
            }
            else
            {
                this.DocNumbers = docNumbers;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for NpceOutInsertDTO and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "returnReceipt" is required (not null)
            if (returnReceipt == null)
            {
                throw new InvalidDataException("returnReceipt is a required property for NpceOutInsertDTO and cannot be null");
            }
            else
            {
                this.ReturnReceipt = returnReceipt;
            }
            // to ensure "letterType" is required (not null)
            if (letterType == null)
            {
                throw new InvalidDataException("letterType is a required property for NpceOutInsertDTO and cannot be null");
            }
            else
            {
                this.LetterType = letterType;
            }
            // to ensure "cc" is required (not null)
            if (cc == null)
            {
                throw new InvalidDataException("cc is a required property for NpceOutInsertDTO and cannot be null");
            }
            else
            {
                this.Cc = cc;
            }
            // to ensure "options" is required (not null)
            if (options == null)
            {
                throw new InvalidDataException("options is a required property for NpceOutInsertDTO and cannot be null");
            }
            else
            {
                this.Options = options;
            }
            this.RequestedSendingDate = requestedSendingDate;
        }
        
        /// <summary>
        /// Gets or Sets DocNumbers
        /// </summary>
        [DataMember(Name="docNumbers", EmitDefaultValue=false)]
        public List<int?> DocNumbers { get; set; }

        /// <summary>
        /// Gets or Sets RequestedSendingDate
        /// </summary>
        [DataMember(Name="requestedSendingDate", EmitDefaultValue=false)]
        public DateTime? RequestedSendingDate { get; set; }

        /// <summary>
        /// Possible values:  0: Letter  1: RegisteredLetter 
        /// </summary>
        /// <value>Possible values:  0: Letter  1: RegisteredLetter </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Gets or Sets ReturnReceipt
        /// </summary>
        [DataMember(Name="returnReceipt", EmitDefaultValue=false)]
        public bool? ReturnReceipt { get; set; }

        /// <summary>
        /// Possible values:  0: Posta4  1: Posta1  -1: Undefined 
        /// </summary>
        /// <value>Possible values:  0: Posta4  1: Posta1  -1: Undefined </value>
        [DataMember(Name="letterType", EmitDefaultValue=false)]
        public int? LetterType { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>
        [DataMember(Name="cc", EmitDefaultValue=false)]
        public bool? Cc { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public NpceOutOptionsDTO Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NpceOutInsertDTO {\n");
            sb.Append("  DocNumbers: ").Append(DocNumbers).Append("\n");
            sb.Append("  RequestedSendingDate: ").Append(RequestedSendingDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ReturnReceipt: ").Append(ReturnReceipt).Append("\n");
            sb.Append("  LetterType: ").Append(LetterType).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NpceOutInsertDTO);
        }

        /// <summary>
        /// Returns true if NpceOutInsertDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NpceOutInsertDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NpceOutInsertDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocNumbers == input.DocNumbers ||
                    this.DocNumbers != null &&
                    this.DocNumbers.SequenceEqual(input.DocNumbers)
                ) && 
                (
                    this.RequestedSendingDate == input.RequestedSendingDate ||
                    (this.RequestedSendingDate != null &&
                    this.RequestedSendingDate.Equals(input.RequestedSendingDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ReturnReceipt == input.ReturnReceipt ||
                    (this.ReturnReceipt != null &&
                    this.ReturnReceipt.Equals(input.ReturnReceipt))
                ) && 
                (
                    this.LetterType == input.LetterType ||
                    (this.LetterType != null &&
                    this.LetterType.Equals(input.LetterType))
                ) && 
                (
                    this.Cc == input.Cc ||
                    (this.Cc != null &&
                    this.Cc.Equals(input.Cc))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocNumbers != null)
                    hashCode = hashCode * 59 + this.DocNumbers.GetHashCode();
                if (this.RequestedSendingDate != null)
                    hashCode = hashCode * 59 + this.RequestedSendingDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ReturnReceipt != null)
                    hashCode = hashCode * 59 + this.ReturnReceipt.GetHashCode();
                if (this.LetterType != null)
                    hashCode = hashCode * 59 + this.LetterType.GetHashCode();
                if (this.Cc != null)
                    hashCode = hashCode * 59 + this.Cc.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                return hashCode;
            }
        }
    }

}
