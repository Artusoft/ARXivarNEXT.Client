/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// BinderFieldSummaryDTO
    /// </summary>
    [DataContract]
    public partial class BinderFieldSummaryDTO :  IEquatable<BinderFieldSummaryDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BinderFieldSummaryDTO" /> class.
        /// </summary>
        /// <param name="binderTypeId">binderTypeId.</param>
        /// <param name="binderName">binderName.</param>
        /// <param name="field">field.</param>
        public BinderFieldSummaryDTO(int? binderTypeId = default(int?), string binderName = default(string), FieldBaseDTO field = default(FieldBaseDTO))
        {
            this.BinderTypeId = binderTypeId;
            this.BinderName = binderName;
            this.Field = field;
        }
        
        /// <summary>
        /// Gets or Sets BinderTypeId
        /// </summary>
        [DataMember(Name="binderTypeId", EmitDefaultValue=false)]
        public int? BinderTypeId { get; set; }

        /// <summary>
        /// Gets or Sets BinderName
        /// </summary>
        [DataMember(Name="binderName", EmitDefaultValue=false)]
        public string BinderName { get; set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public FieldBaseDTO Field { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BinderFieldSummaryDTO {\n");
            sb.Append("  BinderTypeId: ").Append(BinderTypeId).Append("\n");
            sb.Append("  BinderName: ").Append(BinderName).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BinderFieldSummaryDTO);
        }

        /// <summary>
        /// Returns true if BinderFieldSummaryDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of BinderFieldSummaryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BinderFieldSummaryDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BinderTypeId == input.BinderTypeId ||
                    (this.BinderTypeId != null &&
                    this.BinderTypeId.Equals(input.BinderTypeId))
                ) && 
                (
                    this.BinderName == input.BinderName ||
                    (this.BinderName != null &&
                    this.BinderName.Equals(input.BinderName))
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BinderTypeId != null)
                    hashCode = hashCode * 59 + this.BinderTypeId.GetHashCode();
                if (this.BinderName != null)
                    hashCode = hashCode * 59 + this.BinderName.GetHashCode();
                if (this.Field != null)
                    hashCode = hashCode * 59 + this.Field.GetHashCode();
                return hashCode;
            }
        }
    }

}
