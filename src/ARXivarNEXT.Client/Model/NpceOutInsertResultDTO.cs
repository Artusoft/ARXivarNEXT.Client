/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// NpceOutInsertResultDTO
    /// </summary>
    [DataContract]
    public partial class NpceOutInsertResultDTO :  IEquatable<NpceOutInsertResultDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceOutInsertResultDTO" /> class.
        /// </summary>
        /// <param name="docNumber">docNumber.</param>
        /// <param name="succeeded">succeeded.</param>
        /// <param name="error">error.</param>
        /// <param name="requestIds">requestIds.</param>
        public NpceOutInsertResultDTO(int? docNumber = default(int?), bool? succeeded = default(bool?), string error = default(string), List<int?> requestIds = default(List<int?>))
        {
            this.DocNumber = docNumber;
            this.Succeeded = succeeded;
            this.Error = error;
            this.RequestIds = requestIds;
        }
        
        /// <summary>
        /// Gets or Sets DocNumber
        /// </summary>
        [DataMember(Name="docNumber", EmitDefaultValue=false)]
        public int? DocNumber { get; set; }

        /// <summary>
        /// Gets or Sets Succeeded
        /// </summary>
        [DataMember(Name="succeeded", EmitDefaultValue=false)]
        public bool? Succeeded { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets RequestIds
        /// </summary>
        [DataMember(Name="requestIds", EmitDefaultValue=false)]
        public List<int?> RequestIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NpceOutInsertResultDTO {\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  RequestIds: ").Append(RequestIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NpceOutInsertResultDTO);
        }

        /// <summary>
        /// Returns true if NpceOutInsertResultDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NpceOutInsertResultDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NpceOutInsertResultDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocNumber == input.DocNumber ||
                    (this.DocNumber != null &&
                    this.DocNumber.Equals(input.DocNumber))
                ) && 
                (
                    this.Succeeded == input.Succeeded ||
                    (this.Succeeded != null &&
                    this.Succeeded.Equals(input.Succeeded))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.RequestIds == input.RequestIds ||
                    this.RequestIds != null &&
                    this.RequestIds.SequenceEqual(input.RequestIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocNumber != null)
                    hashCode = hashCode * 59 + this.DocNumber.GetHashCode();
                if (this.Succeeded != null)
                    hashCode = hashCode * 59 + this.Succeeded.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.RequestIds != null)
                    hashCode = hashCode * 59 + this.RequestIds.GetHashCode();
                return hashCode;
            }
        }
    }

}
