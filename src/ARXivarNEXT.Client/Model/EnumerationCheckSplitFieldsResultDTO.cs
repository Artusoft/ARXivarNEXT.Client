/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// Result of the enumeration check for the split fields
    /// </summary>
    [DataContract]
    public partial class EnumerationCheckSplitFieldsResultDTO :  IEquatable<EnumerationCheckSplitFieldsResultDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnumerationCheckSplitFieldsResultDTO" /> class.
        /// </summary>
        /// <param name="success">If the enumeration check is successful.</param>
        /// <param name="checkedOnlyNumbers">If standard or advanced check.</param>
        /// <param name="previousNumber">Previous number in the enumerations.</param>
        /// <param name="userMustIndicateLastNumber">If user must indicate last number, therefore no result are provided.</param>
        /// <param name="numbers">Numbers in the enumeration.</param>
        /// <param name="splitFieldsValues">Values of the split fields in the enumeration.</param>
        /// <param name="missingNumbers">Missing number in the enumeration.</param>
        /// <param name="duplicatedNumbers">Duplicated number in the enumeration.</param>
        /// <param name="violations">Types of violation in the enumeration.</param>
        /// <param name="request">Request for the advanced enumeration check when user must indicate last number.</param>
        public EnumerationCheckSplitFieldsResultDTO(bool? success = default(bool?), bool? checkedOnlyNumbers = default(bool?), long? previousNumber = default(long?), bool? userMustIndicateLastNumber = default(bool?), List<long?> numbers = default(List<long?>), List<EnumerationCheckSplitFieldDTO> splitFieldsValues = default(List<EnumerationCheckSplitFieldDTO>), List<long?> missingNumbers = default(List<long?>), List<long?> duplicatedNumbers = default(List<long?>), List<int?> violations = default(List<int?>), List<EnumerationCheckLastNumberDTO> request = default(List<EnumerationCheckLastNumberDTO>))
        {
            this.Success = success;
            this.CheckedOnlyNumbers = checkedOnlyNumbers;
            this.PreviousNumber = previousNumber;
            this.UserMustIndicateLastNumber = userMustIndicateLastNumber;
            this.Numbers = numbers;
            this.SplitFieldsValues = splitFieldsValues;
            this.MissingNumbers = missingNumbers;
            this.DuplicatedNumbers = duplicatedNumbers;
            this.Violations = violations;
            this.Request = request;
        }
        
        /// <summary>
        /// If the enumeration check is successful
        /// </summary>
        /// <value>If the enumeration check is successful</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// If standard or advanced check
        /// </summary>
        /// <value>If standard or advanced check</value>
        [DataMember(Name="checkedOnlyNumbers", EmitDefaultValue=false)]
        public bool? CheckedOnlyNumbers { get; set; }

        /// <summary>
        /// Previous number in the enumerations
        /// </summary>
        /// <value>Previous number in the enumerations</value>
        [DataMember(Name="previousNumber", EmitDefaultValue=false)]
        public long? PreviousNumber { get; set; }

        /// <summary>
        /// If user must indicate last number, therefore no result are provided
        /// </summary>
        /// <value>If user must indicate last number, therefore no result are provided</value>
        [DataMember(Name="userMustIndicateLastNumber", EmitDefaultValue=false)]
        public bool? UserMustIndicateLastNumber { get; set; }

        /// <summary>
        /// Numbers in the enumeration
        /// </summary>
        /// <value>Numbers in the enumeration</value>
        [DataMember(Name="numbers", EmitDefaultValue=false)]
        public List<long?> Numbers { get; set; }

        /// <summary>
        /// Values of the split fields in the enumeration
        /// </summary>
        /// <value>Values of the split fields in the enumeration</value>
        [DataMember(Name="splitFieldsValues", EmitDefaultValue=false)]
        public List<EnumerationCheckSplitFieldDTO> SplitFieldsValues { get; set; }

        /// <summary>
        /// Missing number in the enumeration
        /// </summary>
        /// <value>Missing number in the enumeration</value>
        [DataMember(Name="missingNumbers", EmitDefaultValue=false)]
        public List<long?> MissingNumbers { get; set; }

        /// <summary>
        /// Duplicated number in the enumeration
        /// </summary>
        /// <value>Duplicated number in the enumeration</value>
        [DataMember(Name="duplicatedNumbers", EmitDefaultValue=false)]
        public List<long?> DuplicatedNumbers { get; set; }

        /// <summary>
        /// Types of violation in the enumeration
        /// </summary>
        /// <value>Types of violation in the enumeration</value>
        [DataMember(Name="violations", EmitDefaultValue=false)]
        public List<int?> Violations { get; set; }

        /// <summary>
        /// Request for the advanced enumeration check when user must indicate last number
        /// </summary>
        /// <value>Request for the advanced enumeration check when user must indicate last number</value>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public List<EnumerationCheckLastNumberDTO> Request { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnumerationCheckSplitFieldsResultDTO {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  CheckedOnlyNumbers: ").Append(CheckedOnlyNumbers).Append("\n");
            sb.Append("  PreviousNumber: ").Append(PreviousNumber).Append("\n");
            sb.Append("  UserMustIndicateLastNumber: ").Append(UserMustIndicateLastNumber).Append("\n");
            sb.Append("  Numbers: ").Append(Numbers).Append("\n");
            sb.Append("  SplitFieldsValues: ").Append(SplitFieldsValues).Append("\n");
            sb.Append("  MissingNumbers: ").Append(MissingNumbers).Append("\n");
            sb.Append("  DuplicatedNumbers: ").Append(DuplicatedNumbers).Append("\n");
            sb.Append("  Violations: ").Append(Violations).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnumerationCheckSplitFieldsResultDTO);
        }

        /// <summary>
        /// Returns true if EnumerationCheckSplitFieldsResultDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EnumerationCheckSplitFieldsResultDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnumerationCheckSplitFieldsResultDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.CheckedOnlyNumbers == input.CheckedOnlyNumbers ||
                    (this.CheckedOnlyNumbers != null &&
                    this.CheckedOnlyNumbers.Equals(input.CheckedOnlyNumbers))
                ) && 
                (
                    this.PreviousNumber == input.PreviousNumber ||
                    (this.PreviousNumber != null &&
                    this.PreviousNumber.Equals(input.PreviousNumber))
                ) && 
                (
                    this.UserMustIndicateLastNumber == input.UserMustIndicateLastNumber ||
                    (this.UserMustIndicateLastNumber != null &&
                    this.UserMustIndicateLastNumber.Equals(input.UserMustIndicateLastNumber))
                ) && 
                (
                    this.Numbers == input.Numbers ||
                    this.Numbers != null &&
                    this.Numbers.SequenceEqual(input.Numbers)
                ) && 
                (
                    this.SplitFieldsValues == input.SplitFieldsValues ||
                    this.SplitFieldsValues != null &&
                    this.SplitFieldsValues.SequenceEqual(input.SplitFieldsValues)
                ) && 
                (
                    this.MissingNumbers == input.MissingNumbers ||
                    this.MissingNumbers != null &&
                    this.MissingNumbers.SequenceEqual(input.MissingNumbers)
                ) && 
                (
                    this.DuplicatedNumbers == input.DuplicatedNumbers ||
                    this.DuplicatedNumbers != null &&
                    this.DuplicatedNumbers.SequenceEqual(input.DuplicatedNumbers)
                ) && 
                (
                    this.Violations == input.Violations ||
                    this.Violations != null &&
                    this.Violations.SequenceEqual(input.Violations)
                ) && 
                (
                    this.Request == input.Request ||
                    this.Request != null &&
                    this.Request.SequenceEqual(input.Request)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.CheckedOnlyNumbers != null)
                    hashCode = hashCode * 59 + this.CheckedOnlyNumbers.GetHashCode();
                if (this.PreviousNumber != null)
                    hashCode = hashCode * 59 + this.PreviousNumber.GetHashCode();
                if (this.UserMustIndicateLastNumber != null)
                    hashCode = hashCode * 59 + this.UserMustIndicateLastNumber.GetHashCode();
                if (this.Numbers != null)
                    hashCode = hashCode * 59 + this.Numbers.GetHashCode();
                if (this.SplitFieldsValues != null)
                    hashCode = hashCode * 59 + this.SplitFieldsValues.GetHashCode();
                if (this.MissingNumbers != null)
                    hashCode = hashCode * 59 + this.MissingNumbers.GetHashCode();
                if (this.DuplicatedNumbers != null)
                    hashCode = hashCode * 59 + this.DuplicatedNumbers.GetHashCode();
                if (this.Violations != null)
                    hashCode = hashCode * 59 + this.Violations.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                return hashCode;
            }
        }
    }

}
