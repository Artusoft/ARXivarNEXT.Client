/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// NpceLogDTO
    /// </summary>
    [DataContract]
    public partial class NpceLogDTO :  IEquatable<NpceLogDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceLogDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NpceLogDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceLogDTO" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="requestId">requestId (required).</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError  (required).</param>
        /// <param name="data">data (required).</param>
        /// <param name="messageCode">messageCode (required).</param>
        /// <param name="messageData">messageData.</param>
        /// <param name="description">description.</param>
        public NpceLogDTO(int? id = default(int?), int? requestId = default(int?), int? state = default(int?), DateTime? data = default(DateTime?), string messageCode = default(string), string messageData = default(string), string description = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for NpceLogDTO and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for NpceLogDTO and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new InvalidDataException("state is a required property for NpceLogDTO and cannot be null");
            }
            else
            {
                this.State = state;
            }
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for NpceLogDTO and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            // to ensure "messageCode" is required (not null)
            if (messageCode == null)
            {
                throw new InvalidDataException("messageCode is a required property for NpceLogDTO and cannot be null");
            }
            else
            {
                this.MessageCode = messageCode;
            }
            this.MessageData = messageData;
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public int? RequestId { get; set; }

        /// <summary>
        /// Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError 
        /// </summary>
        /// <value>Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public DateTime? Data { get; set; }

        /// <summary>
        /// Gets or Sets MessageCode
        /// </summary>
        [DataMember(Name="messageCode", EmitDefaultValue=false)]
        public string MessageCode { get; set; }

        /// <summary>
        /// Gets or Sets MessageData
        /// </summary>
        [DataMember(Name="messageData", EmitDefaultValue=false)]
        public string MessageData { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NpceLogDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  MessageCode: ").Append(MessageCode).Append("\n");
            sb.Append("  MessageData: ").Append(MessageData).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NpceLogDTO);
        }

        /// <summary>
        /// Returns true if NpceLogDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NpceLogDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NpceLogDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.MessageCode == input.MessageCode ||
                    (this.MessageCode != null &&
                    this.MessageCode.Equals(input.MessageCode))
                ) && 
                (
                    this.MessageData == input.MessageData ||
                    (this.MessageData != null &&
                    this.MessageData.Equals(input.MessageData))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.MessageCode != null)
                    hashCode = hashCode * 59 + this.MessageCode.GetHashCode();
                if (this.MessageData != null)
                    hashCode = hashCode * 59 + this.MessageData.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }
    }

}
