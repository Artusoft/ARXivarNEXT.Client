/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// Barcode import message throw by the ARXivar Next Helper  at the barcode import end
    /// </summary>
    [DataContract]
    public partial class BarcodeImportDto :  IEquatable<BarcodeImportDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeImportDto" /> class.
        /// </summary>
        /// <param name="success">True if the operation succeds.</param>
        /// <param name="dmBarcodeIds">List of barcode identifier imported.</param>
        public BarcodeImportDto(bool? success = default(bool?), List<int?> dmBarcodeIds = default(List<int?>))
        {
            this.Success = success;
            this.DmBarcodeIds = dmBarcodeIds;
        }
        
        /// <summary>
        /// True if the operation succeds
        /// </summary>
        /// <value>True if the operation succeds</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// List of barcode identifier imported
        /// </summary>
        /// <value>List of barcode identifier imported</value>
        [DataMember(Name="dmBarcodeIds", EmitDefaultValue=false)]
        public List<int?> DmBarcodeIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BarcodeImportDto {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  DmBarcodeIds: ").Append(DmBarcodeIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BarcodeImportDto);
        }

        /// <summary>
        /// Returns true if BarcodeImportDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BarcodeImportDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeImportDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.DmBarcodeIds == input.DmBarcodeIds ||
                    this.DmBarcodeIds != null &&
                    this.DmBarcodeIds.SequenceEqual(input.DmBarcodeIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.DmBarcodeIds != null)
                    hashCode = hashCode * 59 + this.DmBarcodeIds.GetHashCode();
                return hashCode;
            }
        }
    }

}
