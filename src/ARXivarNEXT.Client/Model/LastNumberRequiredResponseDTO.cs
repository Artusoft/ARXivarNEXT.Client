/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// A combination of Business unit and Document Type for which an ending number is required
    /// </summary>
    [DataContract]
    public partial class LastNumberRequiredResponseDTO :  IEquatable<LastNumberRequiredResponseDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LastNumberRequiredResponseDTO" /> class.
        /// </summary>
        /// <param name="businessUnit">Business unit of the enumeration.</param>
        /// <param name="documentType">Document type of the enumeration.</param>
        /// <param name="enumerationField">Name and description of the enumeration field.</param>
        /// <param name="splitFields">Split field of the enumeration.</param>
        public LastNumberRequiredResponseDTO(BusinessUnitDTO businessUnit = default(BusinessUnitDTO), DocumentTypeCompleteDTO documentType = default(DocumentTypeCompleteDTO), KeyValueDTO enumerationField = default(KeyValueDTO), List<EnumerationCheckSplitFieldDTO> splitFields = default(List<EnumerationCheckSplitFieldDTO>))
        {
            this.BusinessUnit = businessUnit;
            this.DocumentType = documentType;
            this.EnumerationField = enumerationField;
            this.SplitFields = splitFields;
        }
        
        /// <summary>
        /// Business unit of the enumeration
        /// </summary>
        /// <value>Business unit of the enumeration</value>
        [DataMember(Name="businessUnit", EmitDefaultValue=false)]
        public BusinessUnitDTO BusinessUnit { get; set; }

        /// <summary>
        /// Document type of the enumeration
        /// </summary>
        /// <value>Document type of the enumeration</value>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public DocumentTypeCompleteDTO DocumentType { get; set; }

        /// <summary>
        /// Name and description of the enumeration field
        /// </summary>
        /// <value>Name and description of the enumeration field</value>
        [DataMember(Name="enumerationField", EmitDefaultValue=false)]
        public KeyValueDTO EnumerationField { get; set; }

        /// <summary>
        /// Split field of the enumeration
        /// </summary>
        /// <value>Split field of the enumeration</value>
        [DataMember(Name="splitFields", EmitDefaultValue=false)]
        public List<EnumerationCheckSplitFieldDTO> SplitFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LastNumberRequiredResponseDTO {\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  EnumerationField: ").Append(EnumerationField).Append("\n");
            sb.Append("  SplitFields: ").Append(SplitFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LastNumberRequiredResponseDTO);
        }

        /// <summary>
        /// Returns true if LastNumberRequiredResponseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of LastNumberRequiredResponseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LastNumberRequiredResponseDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.EnumerationField == input.EnumerationField ||
                    (this.EnumerationField != null &&
                    this.EnumerationField.Equals(input.EnumerationField))
                ) && 
                (
                    this.SplitFields == input.SplitFields ||
                    this.SplitFields != null &&
                    this.SplitFields.SequenceEqual(input.SplitFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.EnumerationField != null)
                    hashCode = hashCode * 59 + this.EnumerationField.GetHashCode();
                if (this.SplitFields != null)
                    hashCode = hashCode * 59 + this.SplitFields.GetHashCode();
                return hashCode;
            }
        }
    }

}
