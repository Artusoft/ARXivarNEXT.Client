/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// BarcodeSetDocumentRequestDto
    /// </summary>
    [DataContract]
    public partial class BarcodeSetDocumentRequestDto :  IEquatable<BarcodeSetDocumentRequestDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeSetDocumentRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BarcodeSetDocumentRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeSetDocumentRequestDto" /> class.
        /// </summary>
        /// <param name="barcodeId">barcodeId.</param>
        /// <param name="bufferId">bufferId (required).</param>
        /// <param name="numPages">numPages.</param>
        /// <param name="deleteBarcodeAfterAssign">deleteBarcodeAfterAssign.</param>
        public BarcodeSetDocumentRequestDto(int? barcodeId = default(int?), string bufferId = default(string), int? numPages = default(int?), bool? deleteBarcodeAfterAssign = default(bool?))
        {
            // to ensure "bufferId" is required (not null)
            if (bufferId == null)
            {
                throw new InvalidDataException("bufferId is a required property for BarcodeSetDocumentRequestDto and cannot be null");
            }
            else
            {
                this.BufferId = bufferId;
            }
            this.BarcodeId = barcodeId;
            this.NumPages = numPages;
            this.DeleteBarcodeAfterAssign = deleteBarcodeAfterAssign;
        }
        
        /// <summary>
        /// Gets or Sets BarcodeId
        /// </summary>
        [DataMember(Name="barcodeId", EmitDefaultValue=false)]
        public int? BarcodeId { get; set; }

        /// <summary>
        /// Gets or Sets BufferId
        /// </summary>
        [DataMember(Name="bufferId", EmitDefaultValue=false)]
        public string BufferId { get; set; }

        /// <summary>
        /// Gets or Sets NumPages
        /// </summary>
        [DataMember(Name="numPages", EmitDefaultValue=false)]
        public int? NumPages { get; set; }

        /// <summary>
        /// Gets or Sets DeleteBarcodeAfterAssign
        /// </summary>
        [DataMember(Name="deleteBarcodeAfterAssign", EmitDefaultValue=false)]
        public bool? DeleteBarcodeAfterAssign { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BarcodeSetDocumentRequestDto {\n");
            sb.Append("  BarcodeId: ").Append(BarcodeId).Append("\n");
            sb.Append("  BufferId: ").Append(BufferId).Append("\n");
            sb.Append("  NumPages: ").Append(NumPages).Append("\n");
            sb.Append("  DeleteBarcodeAfterAssign: ").Append(DeleteBarcodeAfterAssign).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BarcodeSetDocumentRequestDto);
        }

        /// <summary>
        /// Returns true if BarcodeSetDocumentRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BarcodeSetDocumentRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeSetDocumentRequestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BarcodeId == input.BarcodeId ||
                    (this.BarcodeId != null &&
                    this.BarcodeId.Equals(input.BarcodeId))
                ) && 
                (
                    this.BufferId == input.BufferId ||
                    (this.BufferId != null &&
                    this.BufferId.Equals(input.BufferId))
                ) && 
                (
                    this.NumPages == input.NumPages ||
                    (this.NumPages != null &&
                    this.NumPages.Equals(input.NumPages))
                ) && 
                (
                    this.DeleteBarcodeAfterAssign == input.DeleteBarcodeAfterAssign ||
                    (this.DeleteBarcodeAfterAssign != null &&
                    this.DeleteBarcodeAfterAssign.Equals(input.DeleteBarcodeAfterAssign))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BarcodeId != null)
                    hashCode = hashCode * 59 + this.BarcodeId.GetHashCode();
                if (this.BufferId != null)
                    hashCode = hashCode * 59 + this.BufferId.GetHashCode();
                if (this.NumPages != null)
                    hashCode = hashCode * 59 + this.NumPages.GetHashCode();
                if (this.DeleteBarcodeAfterAssign != null)
                    hashCode = hashCode * 59 + this.DeleteBarcodeAfterAssign.GetHashCode();
                return hashCode;
            }
        }
    }

}
