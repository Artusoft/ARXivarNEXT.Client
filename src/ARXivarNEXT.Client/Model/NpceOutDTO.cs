/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// NpceOutDTO
    /// </summary>
    [DataContract]
    public partial class NpceOutDTO :  IEquatable<NpceOutDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NpceOutDTO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="docNumber">docNumber.</param>
        /// <param name="date">date.</param>
        /// <param name="type">Possible values:  0: Letter  1: RegisteredLetter .</param>
        /// <param name="returnReceipt">returnReceipt.</param>
        /// <param name="letterType">Possible values:  0: Posta4  1: Posta1  -1: Undefined .</param>
        /// <param name="sendingDate">sendingDate.</param>
        /// <param name="requestedSendingDate">requestedSendingDate.</param>
        /// <param name="authorizationDate">authorizationDate.</param>
        /// <param name="sendingUser">sendingUser.</param>
        /// <param name="authorizationUser">authorizationUser.</param>
        /// <param name="addressBookId">addressBookId.</param>
        /// <param name="recipient">recipient.</param>
        /// <param name="useDefaultSender">useDefaultSender.</param>
        /// <param name="sender">sender.</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError .</param>
        /// <param name="stateFlags">Possible values:  1: Deleted .</param>
        /// <param name="requestId">requestId.</param>
        /// <param name="userGuid">userGuid.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="letterNumber">letterNumber.</param>
        /// <param name="cost">cost.</param>
        /// <param name="costDetails">costDetails.</param>
        /// <param name="note">note.</param>
        /// <param name="optionsDto">optionsDto.</param>
        /// <param name="subject">subject.</param>
        /// <param name="documentType">documentType.</param>
        /// <param name="originalFileName">originalFileName.</param>
        /// <param name="documentTypeDescription">documentTypeDescription.</param>
        /// <param name="trackingId">trackingId.</param>
        /// <param name="confirmId">confirmId.</param>
        /// <param name="trackingData">trackingData.</param>
        /// <param name="registeredTracking">registeredTracking.</param>
        /// <param name="isFinal">isFinal.</param>
        public NpceOutDTO(int? id = default(int?), int? docNumber = default(int?), DateTime? date = default(DateTime?), int? type = default(int?), bool? returnReceipt = default(bool?), int? letterType = default(int?), DateTime? sendingDate = default(DateTime?), DateTime? requestedSendingDate = default(DateTime?), DateTime? authorizationDate = default(DateTime?), UserSimpleDTO sendingUser = default(UserSimpleDTO), UserSimpleDTO authorizationUser = default(UserSimpleDTO), int? addressBookId = default(int?), NpceOutPartyDTO recipient = default(NpceOutPartyDTO), bool? useDefaultSender = default(bool?), NpceOutPartyDTO sender = default(NpceOutPartyDTO), int? state = default(int?), int? stateFlags = default(int?), string requestId = default(string), string userGuid = default(string), string orderId = default(string), string letterNumber = default(string), double? cost = default(double?), List<NpceCostDetailDto> costDetails = default(List<NpceCostDetailDto>), string note = default(string), NpceOutOptionsDTO optionsDto = default(NpceOutOptionsDTO), string subject = default(string), int? documentType = default(int?), string originalFileName = default(string), string documentTypeDescription = default(string), string trackingId = default(string), string confirmId = default(string), NpceTrackingDTO trackingData = default(NpceTrackingDTO), NpceRegisteredTrackingDTO registeredTracking = default(NpceRegisteredTrackingDTO), bool? isFinal = default(bool?))
        {
            this.Id = id;
            this.DocNumber = docNumber;
            this.Date = date;
            this.Type = type;
            this.ReturnReceipt = returnReceipt;
            this.LetterType = letterType;
            this.SendingDate = sendingDate;
            this.RequestedSendingDate = requestedSendingDate;
            this.AuthorizationDate = authorizationDate;
            this.SendingUser = sendingUser;
            this.AuthorizationUser = authorizationUser;
            this.AddressBookId = addressBookId;
            this.Recipient = recipient;
            this.UseDefaultSender = useDefaultSender;
            this.Sender = sender;
            this.State = state;
            this.StateFlags = stateFlags;
            this.RequestId = requestId;
            this.UserGuid = userGuid;
            this.OrderId = orderId;
            this.LetterNumber = letterNumber;
            this.Cost = cost;
            this.CostDetails = costDetails;
            this.Note = note;
            this.OptionsDto = optionsDto;
            this.Subject = subject;
            this.DocumentType = documentType;
            this.OriginalFileName = originalFileName;
            this.DocumentTypeDescription = documentTypeDescription;
            this.TrackingId = trackingId;
            this.ConfirmId = confirmId;
            this.TrackingData = trackingData;
            this.RegisteredTracking = registeredTracking;
            this.IsFinal = isFinal;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets DocNumber
        /// </summary>
        [DataMember(Name="docNumber", EmitDefaultValue=false)]
        public int? DocNumber { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Possible values:  0: Letter  1: RegisteredLetter 
        /// </summary>
        /// <value>Possible values:  0: Letter  1: RegisteredLetter </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public int? Type { get; set; }

        /// <summary>
        /// Gets or Sets ReturnReceipt
        /// </summary>
        [DataMember(Name="returnReceipt", EmitDefaultValue=false)]
        public bool? ReturnReceipt { get; set; }

        /// <summary>
        /// Possible values:  0: Posta4  1: Posta1  -1: Undefined 
        /// </summary>
        /// <value>Possible values:  0: Posta4  1: Posta1  -1: Undefined </value>
        [DataMember(Name="letterType", EmitDefaultValue=false)]
        public int? LetterType { get; set; }

        /// <summary>
        /// Gets or Sets SendingDate
        /// </summary>
        [DataMember(Name="sendingDate", EmitDefaultValue=false)]
        public DateTime? SendingDate { get; set; }

        /// <summary>
        /// Gets or Sets RequestedSendingDate
        /// </summary>
        [DataMember(Name="requestedSendingDate", EmitDefaultValue=false)]
        public DateTime? RequestedSendingDate { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationDate
        /// </summary>
        [DataMember(Name="authorizationDate", EmitDefaultValue=false)]
        public DateTime? AuthorizationDate { get; set; }

        /// <summary>
        /// Gets or Sets SendingUser
        /// </summary>
        [DataMember(Name="sendingUser", EmitDefaultValue=false)]
        public UserSimpleDTO SendingUser { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationUser
        /// </summary>
        [DataMember(Name="authorizationUser", EmitDefaultValue=false)]
        public UserSimpleDTO AuthorizationUser { get; set; }

        /// <summary>
        /// Gets or Sets AddressBookId
        /// </summary>
        [DataMember(Name="addressBookId", EmitDefaultValue=false)]
        public int? AddressBookId { get; set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public NpceOutPartyDTO Recipient { get; set; }

        /// <summary>
        /// Gets or Sets UseDefaultSender
        /// </summary>
        [DataMember(Name="useDefaultSender", EmitDefaultValue=false)]
        public bool? UseDefaultSender { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public NpceOutPartyDTO Sender { get; set; }

        /// <summary>
        /// Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError 
        /// </summary>
        /// <value>Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// Possible values:  1: Deleted 
        /// </summary>
        /// <value>Possible values:  1: Deleted </value>
        [DataMember(Name="stateFlags", EmitDefaultValue=false)]
        public int? StateFlags { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets UserGuid
        /// </summary>
        [DataMember(Name="userGuid", EmitDefaultValue=false)]
        public string UserGuid { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets LetterNumber
        /// </summary>
        [DataMember(Name="letterNumber", EmitDefaultValue=false)]
        public string LetterNumber { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or Sets CostDetails
        /// </summary>
        [DataMember(Name="costDetails", EmitDefaultValue=false)]
        public List<NpceCostDetailDto> CostDetails { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets OptionsDto
        /// </summary>
        [DataMember(Name="optionsDto", EmitDefaultValue=false)]
        public NpceOutOptionsDTO OptionsDto { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public int? DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets OriginalFileName
        /// </summary>
        [DataMember(Name="originalFileName", EmitDefaultValue=false)]
        public string OriginalFileName { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeDescription
        /// </summary>
        [DataMember(Name="documentTypeDescription", EmitDefaultValue=false)]
        public string DocumentTypeDescription { get; set; }

        /// <summary>
        /// Gets or Sets TrackingId
        /// </summary>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public string TrackingId { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmId
        /// </summary>
        [DataMember(Name="confirmId", EmitDefaultValue=false)]
        public string ConfirmId { get; set; }

        /// <summary>
        /// Gets or Sets TrackingData
        /// </summary>
        [DataMember(Name="trackingData", EmitDefaultValue=false)]
        public NpceTrackingDTO TrackingData { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredTracking
        /// </summary>
        [DataMember(Name="registeredTracking", EmitDefaultValue=false)]
        public NpceRegisteredTrackingDTO RegisteredTracking { get; set; }

        /// <summary>
        /// Gets or Sets IsFinal
        /// </summary>
        [DataMember(Name="isFinal", EmitDefaultValue=false)]
        public bool? IsFinal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NpceOutDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ReturnReceipt: ").Append(ReturnReceipt).Append("\n");
            sb.Append("  LetterType: ").Append(LetterType).Append("\n");
            sb.Append("  SendingDate: ").Append(SendingDate).Append("\n");
            sb.Append("  RequestedSendingDate: ").Append(RequestedSendingDate).Append("\n");
            sb.Append("  AuthorizationDate: ").Append(AuthorizationDate).Append("\n");
            sb.Append("  SendingUser: ").Append(SendingUser).Append("\n");
            sb.Append("  AuthorizationUser: ").Append(AuthorizationUser).Append("\n");
            sb.Append("  AddressBookId: ").Append(AddressBookId).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  UseDefaultSender: ").Append(UseDefaultSender).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateFlags: ").Append(StateFlags).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  UserGuid: ").Append(UserGuid).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  LetterNumber: ").Append(LetterNumber).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CostDetails: ").Append(CostDetails).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  OptionsDto: ").Append(OptionsDto).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  OriginalFileName: ").Append(OriginalFileName).Append("\n");
            sb.Append("  DocumentTypeDescription: ").Append(DocumentTypeDescription).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  ConfirmId: ").Append(ConfirmId).Append("\n");
            sb.Append("  TrackingData: ").Append(TrackingData).Append("\n");
            sb.Append("  RegisteredTracking: ").Append(RegisteredTracking).Append("\n");
            sb.Append("  IsFinal: ").Append(IsFinal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NpceOutDTO);
        }

        /// <summary>
        /// Returns true if NpceOutDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NpceOutDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NpceOutDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DocNumber == input.DocNumber ||
                    (this.DocNumber != null &&
                    this.DocNumber.Equals(input.DocNumber))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ReturnReceipt == input.ReturnReceipt ||
                    (this.ReturnReceipt != null &&
                    this.ReturnReceipt.Equals(input.ReturnReceipt))
                ) && 
                (
                    this.LetterType == input.LetterType ||
                    (this.LetterType != null &&
                    this.LetterType.Equals(input.LetterType))
                ) && 
                (
                    this.SendingDate == input.SendingDate ||
                    (this.SendingDate != null &&
                    this.SendingDate.Equals(input.SendingDate))
                ) && 
                (
                    this.RequestedSendingDate == input.RequestedSendingDate ||
                    (this.RequestedSendingDate != null &&
                    this.RequestedSendingDate.Equals(input.RequestedSendingDate))
                ) && 
                (
                    this.AuthorizationDate == input.AuthorizationDate ||
                    (this.AuthorizationDate != null &&
                    this.AuthorizationDate.Equals(input.AuthorizationDate))
                ) && 
                (
                    this.SendingUser == input.SendingUser ||
                    (this.SendingUser != null &&
                    this.SendingUser.Equals(input.SendingUser))
                ) && 
                (
                    this.AuthorizationUser == input.AuthorizationUser ||
                    (this.AuthorizationUser != null &&
                    this.AuthorizationUser.Equals(input.AuthorizationUser))
                ) && 
                (
                    this.AddressBookId == input.AddressBookId ||
                    (this.AddressBookId != null &&
                    this.AddressBookId.Equals(input.AddressBookId))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.UseDefaultSender == input.UseDefaultSender ||
                    (this.UseDefaultSender != null &&
                    this.UseDefaultSender.Equals(input.UseDefaultSender))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateFlags == input.StateFlags ||
                    (this.StateFlags != null &&
                    this.StateFlags.Equals(input.StateFlags))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.UserGuid == input.UserGuid ||
                    (this.UserGuid != null &&
                    this.UserGuid.Equals(input.UserGuid))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.LetterNumber == input.LetterNumber ||
                    (this.LetterNumber != null &&
                    this.LetterNumber.Equals(input.LetterNumber))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CostDetails == input.CostDetails ||
                    this.CostDetails != null &&
                    this.CostDetails.SequenceEqual(input.CostDetails)
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.OptionsDto == input.OptionsDto ||
                    (this.OptionsDto != null &&
                    this.OptionsDto.Equals(input.OptionsDto))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.OriginalFileName == input.OriginalFileName ||
                    (this.OriginalFileName != null &&
                    this.OriginalFileName.Equals(input.OriginalFileName))
                ) && 
                (
                    this.DocumentTypeDescription == input.DocumentTypeDescription ||
                    (this.DocumentTypeDescription != null &&
                    this.DocumentTypeDescription.Equals(input.DocumentTypeDescription))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.ConfirmId == input.ConfirmId ||
                    (this.ConfirmId != null &&
                    this.ConfirmId.Equals(input.ConfirmId))
                ) && 
                (
                    this.TrackingData == input.TrackingData ||
                    (this.TrackingData != null &&
                    this.TrackingData.Equals(input.TrackingData))
                ) && 
                (
                    this.RegisteredTracking == input.RegisteredTracking ||
                    (this.RegisteredTracking != null &&
                    this.RegisteredTracking.Equals(input.RegisteredTracking))
                ) && 
                (
                    this.IsFinal == input.IsFinal ||
                    (this.IsFinal != null &&
                    this.IsFinal.Equals(input.IsFinal))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DocNumber != null)
                    hashCode = hashCode * 59 + this.DocNumber.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ReturnReceipt != null)
                    hashCode = hashCode * 59 + this.ReturnReceipt.GetHashCode();
                if (this.LetterType != null)
                    hashCode = hashCode * 59 + this.LetterType.GetHashCode();
                if (this.SendingDate != null)
                    hashCode = hashCode * 59 + this.SendingDate.GetHashCode();
                if (this.RequestedSendingDate != null)
                    hashCode = hashCode * 59 + this.RequestedSendingDate.GetHashCode();
                if (this.AuthorizationDate != null)
                    hashCode = hashCode * 59 + this.AuthorizationDate.GetHashCode();
                if (this.SendingUser != null)
                    hashCode = hashCode * 59 + this.SendingUser.GetHashCode();
                if (this.AuthorizationUser != null)
                    hashCode = hashCode * 59 + this.AuthorizationUser.GetHashCode();
                if (this.AddressBookId != null)
                    hashCode = hashCode * 59 + this.AddressBookId.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.UseDefaultSender != null)
                    hashCode = hashCode * 59 + this.UseDefaultSender.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StateFlags != null)
                    hashCode = hashCode * 59 + this.StateFlags.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.UserGuid != null)
                    hashCode = hashCode * 59 + this.UserGuid.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.LetterNumber != null)
                    hashCode = hashCode * 59 + this.LetterNumber.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CostDetails != null)
                    hashCode = hashCode * 59 + this.CostDetails.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.OptionsDto != null)
                    hashCode = hashCode * 59 + this.OptionsDto.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.OriginalFileName != null)
                    hashCode = hashCode * 59 + this.OriginalFileName.GetHashCode();
                if (this.DocumentTypeDescription != null)
                    hashCode = hashCode * 59 + this.DocumentTypeDescription.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.ConfirmId != null)
                    hashCode = hashCode * 59 + this.ConfirmId.GetHashCode();
                if (this.TrackingData != null)
                    hashCode = hashCode * 59 + this.TrackingData.GetHashCode();
                if (this.RegisteredTracking != null)
                    hashCode = hashCode * 59 + this.RegisteredTracking.GetHashCode();
                if (this.IsFinal != null)
                    hashCode = hashCode * 59 + this.IsFinal.GetHashCode();
                return hashCode;
            }
        }
    }

}
