/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// MfaProviderDTO
    /// </summary>
    [DataContract]
    public partial class MfaProviderDTO :  IEquatable<MfaProviderDTO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MfaProviderDTO" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="authenticatorType">authenticatorType.</param>
        /// <param name="oobChannel">oobChannel.</param>
        /// <param name="authenticatorId">authenticatorId.</param>
        /// <param name="authenticatorStatus">Possible values:  0: None  1: Enabled  2: Disabled .</param>
        public MfaProviderDTO(string name = default(string), string description = default(string), bool? enabled = default(bool?), string authenticatorType = default(string), string oobChannel = default(string), string authenticatorId = default(string), int? authenticatorStatus = default(int?))
        {
            this.Name = name;
            this.Description = description;
            this.Enabled = enabled;
            this.AuthenticatorType = authenticatorType;
            this.OobChannel = oobChannel;
            this.AuthenticatorId = authenticatorId;
            this.AuthenticatorStatus = authenticatorStatus;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatorType
        /// </summary>
        [DataMember(Name="authenticatorType", EmitDefaultValue=false)]
        public string AuthenticatorType { get; set; }

        /// <summary>
        /// Gets or Sets OobChannel
        /// </summary>
        [DataMember(Name="oobChannel", EmitDefaultValue=false)]
        public string OobChannel { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticatorId
        /// </summary>
        [DataMember(Name="authenticatorId", EmitDefaultValue=false)]
        public string AuthenticatorId { get; set; }

        /// <summary>
        /// Possible values:  0: None  1: Enabled  2: Disabled 
        /// </summary>
        /// <value>Possible values:  0: None  1: Enabled  2: Disabled </value>
        [DataMember(Name="authenticatorStatus", EmitDefaultValue=false)]
        public int? AuthenticatorStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MfaProviderDTO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  AuthenticatorType: ").Append(AuthenticatorType).Append("\n");
            sb.Append("  OobChannel: ").Append(OobChannel).Append("\n");
            sb.Append("  AuthenticatorId: ").Append(AuthenticatorId).Append("\n");
            sb.Append("  AuthenticatorStatus: ").Append(AuthenticatorStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MfaProviderDTO);
        }

        /// <summary>
        /// Returns true if MfaProviderDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MfaProviderDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MfaProviderDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.AuthenticatorType == input.AuthenticatorType ||
                    (this.AuthenticatorType != null &&
                    this.AuthenticatorType.Equals(input.AuthenticatorType))
                ) && 
                (
                    this.OobChannel == input.OobChannel ||
                    (this.OobChannel != null &&
                    this.OobChannel.Equals(input.OobChannel))
                ) && 
                (
                    this.AuthenticatorId == input.AuthenticatorId ||
                    (this.AuthenticatorId != null &&
                    this.AuthenticatorId.Equals(input.AuthenticatorId))
                ) && 
                (
                    this.AuthenticatorStatus == input.AuthenticatorStatus ||
                    (this.AuthenticatorStatus != null &&
                    this.AuthenticatorStatus.Equals(input.AuthenticatorStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.AuthenticatorType != null)
                    hashCode = hashCode * 59 + this.AuthenticatorType.GetHashCode();
                if (this.OobChannel != null)
                    hashCode = hashCode * 59 + this.OobChannel.GetHashCode();
                if (this.AuthenticatorId != null)
                    hashCode = hashCode * 59 + this.AuthenticatorId.GetHashCode();
                if (this.AuthenticatorStatus != null)
                    hashCode = hashCode * 59 + this.AuthenticatorStatus.GetHashCode();
                return hashCode;
            }
        }
    }

}
