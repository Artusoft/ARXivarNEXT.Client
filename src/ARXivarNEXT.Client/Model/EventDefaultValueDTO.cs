/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = ARXivarNEXT.Client.Client.SwaggerDateConverter;

namespace ARXivarNEXT.Client.Model
{
    /// <summary>
    /// EventDefaultValueDTO
    /// </summary>
    [DataContract]
    public partial class EventDefaultValueDTO :  IEquatable<EventDefaultValueDTO>
    {
        /// <summary>
        /// Defines DiagramVariableType
        /// </summary>
        public enum DiagramVariableTypeEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            
            NUMBER_4 = 4,
            
            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            
            NUMBER_5 = 5,
            
            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            
            NUMBER_6 = 6,
            
            /// <summary>
            /// Enum NUMBER_7 for value: 7
            /// </summary>
            
            NUMBER_7 = 7,
            
            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            
            NUMBER_8 = 8,
            
            /// <summary>
            /// Enum NUMBER_9 for value: 9
            /// </summary>
            
            NUMBER_9 = 9,
            
            /// <summary>
            /// Enum NUMBER_10 for value: 10
            /// </summary>
            
            NUMBER_10 = 10
        }

        /// <summary>
        /// Gets or Sets DiagramVariableType
        /// </summary>
        [DataMember(Name="diagramVariableType", EmitDefaultValue=false)]
        public DiagramVariableTypeEnum? DiagramVariableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventDefaultValueDTO" /> class.
        /// </summary>
        /// <param name="diagramVariableId">diagramVariableId.</param>
        /// <param name="diagramVariableName">diagramVariableName.</param>
        /// <param name="diagramVariableType">diagramVariableType.</param>
        /// <param name="value">value.</param>
        public EventDefaultValueDTO(string diagramVariableId = default(string), string diagramVariableName = default(string), DiagramVariableTypeEnum? diagramVariableType = default(DiagramVariableTypeEnum?), GenericKeyValueDTO value = default(GenericKeyValueDTO))
        {
            this.DiagramVariableId = diagramVariableId;
            this.DiagramVariableName = diagramVariableName;
            this.DiagramVariableType = diagramVariableType;
            this.Value = value;
        }
        
        /// <summary>
        /// Gets or Sets DiagramVariableId
        /// </summary>
        [DataMember(Name="diagramVariableId", EmitDefaultValue=false)]
        public string DiagramVariableId { get; set; }

        /// <summary>
        /// Gets or Sets DiagramVariableName
        /// </summary>
        [DataMember(Name="diagramVariableName", EmitDefaultValue=false)]
        public string DiagramVariableName { get; set; }


        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public GenericKeyValueDTO Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventDefaultValueDTO {\n");
            sb.Append("  DiagramVariableId: ").Append(DiagramVariableId).Append("\n");
            sb.Append("  DiagramVariableName: ").Append(DiagramVariableName).Append("\n");
            sb.Append("  DiagramVariableType: ").Append(DiagramVariableType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventDefaultValueDTO);
        }

        /// <summary>
        /// Returns true if EventDefaultValueDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EventDefaultValueDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventDefaultValueDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiagramVariableId == input.DiagramVariableId ||
                    (this.DiagramVariableId != null &&
                    this.DiagramVariableId.Equals(input.DiagramVariableId))
                ) && 
                (
                    this.DiagramVariableName == input.DiagramVariableName ||
                    (this.DiagramVariableName != null &&
                    this.DiagramVariableName.Equals(input.DiagramVariableName))
                ) && 
                (
                    this.DiagramVariableType == input.DiagramVariableType ||
                    (this.DiagramVariableType != null &&
                    this.DiagramVariableType.Equals(input.DiagramVariableType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiagramVariableId != null)
                    hashCode = hashCode * 59 + this.DiagramVariableId.GetHashCode();
                if (this.DiagramVariableName != null)
                    hashCode = hashCode * 59 + this.DiagramVariableName.GetHashCode();
                if (this.DiagramVariableType != null)
                    hashCode = hashCode * 59 + this.DiagramVariableType.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }
    }

}
