/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ARXivarNEXT.Client.Client;
using ARXivarNEXT.Client.Model;

namespace ARXivarNEXT.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowConnectorApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call deletes a workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">The chain ID to be deleted</param>
        /// <returns></returns>
        void WorkflowConnectorDeleteChainMaster (string chainMasterId);

        /// <summary>
        /// This call deletes a workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">The chain ID to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkflowConnectorDeleteChainMasterWithHttpInfo (string chainMasterId);
        /// <summary>
        /// This call returns all the workflow chains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkFlowChainMasterDTO&gt;</returns>
        List<WorkFlowChainMasterDTO> WorkflowConnectorGetAllChainMaster ();

        /// <summary>
        /// This call returns all the workflow chains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkFlowChainMasterDTO&gt;</returns>
        ApiResponse<List<WorkFlowChainMasterDTO>> WorkflowConnectorGetAllChainMasterWithHttpInfo ();
        /// <summary>
        /// This call returns a Workflow chain by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">Chain Master identifier</param>
        /// <returns>WorkFlowChainMasterDTO</returns>
        WorkFlowChainMasterDTO WorkflowConnectorGetByChainMasterId (string chainMasterId);

        /// <summary>
        /// This call returns a Workflow chain by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">Chain Master identifier</param>
        /// <returns>ApiResponse of WorkFlowChainMasterDTO</returns>
        ApiResponse<WorkFlowChainMasterDTO> WorkflowConnectorGetByChainMasterIdWithHttpInfo (string chainMasterId);
        /// <summary>
        /// This call returns all the workflow chain by its correlation identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">Correlation Chain identifier</param>
        /// <param name="excludeLast">Indicates if the last correlated chain must be excluded</param>
        /// <returns>List&lt;WorkFlowChainMasterDTO&gt;</returns>
        List<WorkFlowChainMasterDTO> WorkflowConnectorGetByCorrelationId (string correlationId, bool? excludeLast);

        /// <summary>
        /// This call returns all the workflow chain by its correlation identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">Correlation Chain identifier</param>
        /// <param name="excludeLast">Indicates if the last correlated chain must be excluded</param>
        /// <returns>ApiResponse of List&lt;WorkFlowChainMasterDTO&gt;</returns>
        ApiResponse<List<WorkFlowChainMasterDTO>> WorkflowConnectorGetByCorrelationIdWithHttpInfo (string correlationId, bool? excludeLast);
        /// <summary>
        /// This call returns all the last workflow chains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkFlowChainMasterSummaryDTO&gt;</returns>
        List<WorkFlowChainMasterSummaryDTO> WorkflowConnectorGetLastChainMaster ();

        /// <summary>
        /// This call returns all the last workflow chains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkFlowChainMasterSummaryDTO&gt;</returns>
        ApiResponse<List<WorkFlowChainMasterSummaryDTO>> WorkflowConnectorGetLastChainMasterWithHttpInfo ();
        /// <summary>
        /// This call inserts a new workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>WorkFlowChainMasterDTO</returns>
        WorkFlowChainMasterDTO WorkflowConnectorInsertChainMaster (WorkFlowChainMasterDTO chainMaster);

        /// <summary>
        /// This call inserts a new workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>ApiResponse of WorkFlowChainMasterDTO</returns>
        ApiResponse<WorkFlowChainMasterDTO> WorkflowConnectorInsertChainMasterWithHttpInfo (WorkFlowChainMasterDTO chainMaster);
        /// <summary>
        /// This call updates a workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>WorkFlowChainMasterDTO</returns>
        WorkFlowChainMasterDTO WorkflowConnectorUpdateChainMaster (WorkFlowChainMasterDTO chainMaster);

        /// <summary>
        /// This call updates a workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>ApiResponse of WorkFlowChainMasterDTO</returns>
        ApiResponse<WorkFlowChainMasterDTO> WorkflowConnectorUpdateChainMasterWithHttpInfo (WorkFlowChainMasterDTO chainMaster);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call deletes a workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">The chain ID to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkflowConnectorDeleteChainMasterAsync (string chainMasterId);

        /// <summary>
        /// This call deletes a workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">The chain ID to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowConnectorDeleteChainMasterAsyncWithHttpInfo (string chainMasterId);
        /// <summary>
        /// This call returns all the workflow chains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WorkFlowChainMasterDTO&gt;</returns>
        System.Threading.Tasks.Task<List<WorkFlowChainMasterDTO>> WorkflowConnectorGetAllChainMasterAsync ();

        /// <summary>
        /// This call returns all the workflow chains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowChainMasterDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkFlowChainMasterDTO>>> WorkflowConnectorGetAllChainMasterAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns a Workflow chain by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">Chain Master identifier</param>
        /// <returns>Task of WorkFlowChainMasterDTO</returns>
        System.Threading.Tasks.Task<WorkFlowChainMasterDTO> WorkflowConnectorGetByChainMasterIdAsync (string chainMasterId);

        /// <summary>
        /// This call returns a Workflow chain by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">Chain Master identifier</param>
        /// <returns>Task of ApiResponse (WorkFlowChainMasterDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkFlowChainMasterDTO>> WorkflowConnectorGetByChainMasterIdAsyncWithHttpInfo (string chainMasterId);
        /// <summary>
        /// This call returns all the workflow chain by its correlation identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">Correlation Chain identifier</param>
        /// <param name="excludeLast">Indicates if the last correlated chain must be excluded</param>
        /// <returns>Task of List&lt;WorkFlowChainMasterDTO&gt;</returns>
        System.Threading.Tasks.Task<List<WorkFlowChainMasterDTO>> WorkflowConnectorGetByCorrelationIdAsync (string correlationId, bool? excludeLast);

        /// <summary>
        /// This call returns all the workflow chain by its correlation identifier
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">Correlation Chain identifier</param>
        /// <param name="excludeLast">Indicates if the last correlated chain must be excluded</param>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowChainMasterDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkFlowChainMasterDTO>>> WorkflowConnectorGetByCorrelationIdAsyncWithHttpInfo (string correlationId, bool? excludeLast);
        /// <summary>
        /// This call returns all the last workflow chains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WorkFlowChainMasterSummaryDTO&gt;</returns>
        System.Threading.Tasks.Task<List<WorkFlowChainMasterSummaryDTO>> WorkflowConnectorGetLastChainMasterAsync ();

        /// <summary>
        /// This call returns all the last workflow chains
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowChainMasterSummaryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkFlowChainMasterSummaryDTO>>> WorkflowConnectorGetLastChainMasterAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts a new workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>Task of WorkFlowChainMasterDTO</returns>
        System.Threading.Tasks.Task<WorkFlowChainMasterDTO> WorkflowConnectorInsertChainMasterAsync (WorkFlowChainMasterDTO chainMaster);

        /// <summary>
        /// This call inserts a new workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>Task of ApiResponse (WorkFlowChainMasterDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkFlowChainMasterDTO>> WorkflowConnectorInsertChainMasterAsyncWithHttpInfo (WorkFlowChainMasterDTO chainMaster);
        /// <summary>
        /// This call updates a workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>Task of WorkFlowChainMasterDTO</returns>
        System.Threading.Tasks.Task<WorkFlowChainMasterDTO> WorkflowConnectorUpdateChainMasterAsync (WorkFlowChainMasterDTO chainMaster);

        /// <summary>
        /// This call updates a workflow chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>Task of ApiResponse (WorkFlowChainMasterDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkFlowChainMasterDTO>> WorkflowConnectorUpdateChainMasterAsyncWithHttpInfo (WorkFlowChainMasterDTO chainMaster);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowConnectorApi : IWorkflowConnectorApi
    {
        private ARXivarNEXT.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowConnectorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowConnectorApi(String basePath)
        {
            this.Configuration = new ARXivarNEXT.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowConnectorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowConnectorApi(ARXivarNEXT.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ARXivarNEXT.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ARXivarNEXT.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ARXivarNEXT.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call deletes a workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">The chain ID to be deleted</param>
        /// <returns></returns>
        public void WorkflowConnectorDeleteChainMaster (string chainMasterId)
        {
             WorkflowConnectorDeleteChainMasterWithHttpInfo(chainMasterId);
        }

        /// <summary>
        /// This call deletes a workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">The chain ID to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkflowConnectorDeleteChainMasterWithHttpInfo (string chainMasterId)
        {
            // verify the required parameter 'chainMasterId' is set
            if (chainMasterId == null)
                throw new ApiException(400, "Missing required parameter 'chainMasterId' when calling WorkflowConnectorApi->WorkflowConnectorDeleteChainMaster");

            var localVarPath = "./api/WorkflowConnector/{chainMasterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainMasterId != null) localVarPathParams.Add("chainMasterId", this.Configuration.ApiClient.ParameterToString(chainMasterId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorDeleteChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes a workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">The chain ID to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkflowConnectorDeleteChainMasterAsync (string chainMasterId)
        {
             await WorkflowConnectorDeleteChainMasterAsyncWithHttpInfo(chainMasterId);

        }

        /// <summary>
        /// This call deletes a workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">The chain ID to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowConnectorDeleteChainMasterAsyncWithHttpInfo (string chainMasterId)
        {
            // verify the required parameter 'chainMasterId' is set
            if (chainMasterId == null)
                throw new ApiException(400, "Missing required parameter 'chainMasterId' when calling WorkflowConnectorApi->WorkflowConnectorDeleteChainMaster");

            var localVarPath = "./api/WorkflowConnector/{chainMasterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainMasterId != null) localVarPathParams.Add("chainMasterId", this.Configuration.ApiClient.ParameterToString(chainMasterId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorDeleteChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns all the workflow chains 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkFlowChainMasterDTO&gt;</returns>
        public List<WorkFlowChainMasterDTO> WorkflowConnectorGetAllChainMaster ()
        {
             ApiResponse<List<WorkFlowChainMasterDTO>> localVarResponse = WorkflowConnectorGetAllChainMasterWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the workflow chains 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkFlowChainMasterDTO&gt;</returns>
        public ApiResponse< List<WorkFlowChainMasterDTO> > WorkflowConnectorGetAllChainMasterWithHttpInfo ()
        {

            var localVarPath = "./api/WorkflowConnector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorGetAllChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowChainMasterDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WorkFlowChainMasterDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowChainMasterDTO>)));
        }

        /// <summary>
        /// This call returns all the workflow chains 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WorkFlowChainMasterDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkFlowChainMasterDTO>> WorkflowConnectorGetAllChainMasterAsync ()
        {
             ApiResponse<List<WorkFlowChainMasterDTO>> localVarResponse = await WorkflowConnectorGetAllChainMasterAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the workflow chains 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowChainMasterDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkFlowChainMasterDTO>>> WorkflowConnectorGetAllChainMasterAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/WorkflowConnector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorGetAllChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowChainMasterDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WorkFlowChainMasterDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowChainMasterDTO>)));
        }

        /// <summary>
        /// This call returns a Workflow chain by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">Chain Master identifier</param>
        /// <returns>WorkFlowChainMasterDTO</returns>
        public WorkFlowChainMasterDTO WorkflowConnectorGetByChainMasterId (string chainMasterId)
        {
             ApiResponse<WorkFlowChainMasterDTO> localVarResponse = WorkflowConnectorGetByChainMasterIdWithHttpInfo(chainMasterId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns a Workflow chain by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">Chain Master identifier</param>
        /// <returns>ApiResponse of WorkFlowChainMasterDTO</returns>
        public ApiResponse< WorkFlowChainMasterDTO > WorkflowConnectorGetByChainMasterIdWithHttpInfo (string chainMasterId)
        {
            // verify the required parameter 'chainMasterId' is set
            if (chainMasterId == null)
                throw new ApiException(400, "Missing required parameter 'chainMasterId' when calling WorkflowConnectorApi->WorkflowConnectorGetByChainMasterId");

            var localVarPath = "./api/WorkflowConnector/{chainMasterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainMasterId != null) localVarPathParams.Add("chainMasterId", this.Configuration.ApiClient.ParameterToString(chainMasterId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorGetByChainMasterId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowChainMasterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowChainMasterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowChainMasterDTO)));
        }

        /// <summary>
        /// This call returns a Workflow chain by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">Chain Master identifier</param>
        /// <returns>Task of WorkFlowChainMasterDTO</returns>
        public async System.Threading.Tasks.Task<WorkFlowChainMasterDTO> WorkflowConnectorGetByChainMasterIdAsync (string chainMasterId)
        {
             ApiResponse<WorkFlowChainMasterDTO> localVarResponse = await WorkflowConnectorGetByChainMasterIdAsyncWithHttpInfo(chainMasterId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns a Workflow chain by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMasterId">Chain Master identifier</param>
        /// <returns>Task of ApiResponse (WorkFlowChainMasterDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkFlowChainMasterDTO>> WorkflowConnectorGetByChainMasterIdAsyncWithHttpInfo (string chainMasterId)
        {
            // verify the required parameter 'chainMasterId' is set
            if (chainMasterId == null)
                throw new ApiException(400, "Missing required parameter 'chainMasterId' when calling WorkflowConnectorApi->WorkflowConnectorGetByChainMasterId");

            var localVarPath = "./api/WorkflowConnector/{chainMasterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainMasterId != null) localVarPathParams.Add("chainMasterId", this.Configuration.ApiClient.ParameterToString(chainMasterId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorGetByChainMasterId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowChainMasterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowChainMasterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowChainMasterDTO)));
        }

        /// <summary>
        /// This call returns all the workflow chain by its correlation identifier 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">Correlation Chain identifier</param>
        /// <param name="excludeLast">Indicates if the last correlated chain must be excluded</param>
        /// <returns>List&lt;WorkFlowChainMasterDTO&gt;</returns>
        public List<WorkFlowChainMasterDTO> WorkflowConnectorGetByCorrelationId (string correlationId, bool? excludeLast)
        {
             ApiResponse<List<WorkFlowChainMasterDTO>> localVarResponse = WorkflowConnectorGetByCorrelationIdWithHttpInfo(correlationId, excludeLast);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the workflow chain by its correlation identifier 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">Correlation Chain identifier</param>
        /// <param name="excludeLast">Indicates if the last correlated chain must be excluded</param>
        /// <returns>ApiResponse of List&lt;WorkFlowChainMasterDTO&gt;</returns>
        public ApiResponse< List<WorkFlowChainMasterDTO> > WorkflowConnectorGetByCorrelationIdWithHttpInfo (string correlationId, bool? excludeLast)
        {
            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
                throw new ApiException(400, "Missing required parameter 'correlationId' when calling WorkflowConnectorApi->WorkflowConnectorGetByCorrelationId");
            // verify the required parameter 'excludeLast' is set
            if (excludeLast == null)
                throw new ApiException(400, "Missing required parameter 'excludeLast' when calling WorkflowConnectorApi->WorkflowConnectorGetByCorrelationId");

            var localVarPath = "./api/WorkflowConnector/correlation-id/{correlationId}/{excludeLast}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (correlationId != null) localVarPathParams.Add("correlationId", this.Configuration.ApiClient.ParameterToString(correlationId)); // path parameter
            if (excludeLast != null) localVarPathParams.Add("excludeLast", this.Configuration.ApiClient.ParameterToString(excludeLast)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorGetByCorrelationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowChainMasterDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WorkFlowChainMasterDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowChainMasterDTO>)));
        }

        /// <summary>
        /// This call returns all the workflow chain by its correlation identifier 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">Correlation Chain identifier</param>
        /// <param name="excludeLast">Indicates if the last correlated chain must be excluded</param>
        /// <returns>Task of List&lt;WorkFlowChainMasterDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkFlowChainMasterDTO>> WorkflowConnectorGetByCorrelationIdAsync (string correlationId, bool? excludeLast)
        {
             ApiResponse<List<WorkFlowChainMasterDTO>> localVarResponse = await WorkflowConnectorGetByCorrelationIdAsyncWithHttpInfo(correlationId, excludeLast);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the workflow chain by its correlation identifier 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="correlationId">Correlation Chain identifier</param>
        /// <param name="excludeLast">Indicates if the last correlated chain must be excluded</param>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowChainMasterDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkFlowChainMasterDTO>>> WorkflowConnectorGetByCorrelationIdAsyncWithHttpInfo (string correlationId, bool? excludeLast)
        {
            // verify the required parameter 'correlationId' is set
            if (correlationId == null)
                throw new ApiException(400, "Missing required parameter 'correlationId' when calling WorkflowConnectorApi->WorkflowConnectorGetByCorrelationId");
            // verify the required parameter 'excludeLast' is set
            if (excludeLast == null)
                throw new ApiException(400, "Missing required parameter 'excludeLast' when calling WorkflowConnectorApi->WorkflowConnectorGetByCorrelationId");

            var localVarPath = "./api/WorkflowConnector/correlation-id/{correlationId}/{excludeLast}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (correlationId != null) localVarPathParams.Add("correlationId", this.Configuration.ApiClient.ParameterToString(correlationId)); // path parameter
            if (excludeLast != null) localVarPathParams.Add("excludeLast", this.Configuration.ApiClient.ParameterToString(excludeLast)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorGetByCorrelationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowChainMasterDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WorkFlowChainMasterDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowChainMasterDTO>)));
        }

        /// <summary>
        /// This call returns all the last workflow chains 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkFlowChainMasterSummaryDTO&gt;</returns>
        public List<WorkFlowChainMasterSummaryDTO> WorkflowConnectorGetLastChainMaster ()
        {
             ApiResponse<List<WorkFlowChainMasterSummaryDTO>> localVarResponse = WorkflowConnectorGetLastChainMasterWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns all the last workflow chains 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkFlowChainMasterSummaryDTO&gt;</returns>
        public ApiResponse< List<WorkFlowChainMasterSummaryDTO> > WorkflowConnectorGetLastChainMasterWithHttpInfo ()
        {

            var localVarPath = "./api/WorkflowConnector/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorGetLastChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowChainMasterSummaryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WorkFlowChainMasterSummaryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowChainMasterSummaryDTO>)));
        }

        /// <summary>
        /// This call returns all the last workflow chains 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WorkFlowChainMasterSummaryDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkFlowChainMasterSummaryDTO>> WorkflowConnectorGetLastChainMasterAsync ()
        {
             ApiResponse<List<WorkFlowChainMasterSummaryDTO>> localVarResponse = await WorkflowConnectorGetLastChainMasterAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns all the last workflow chains 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowChainMasterSummaryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkFlowChainMasterSummaryDTO>>> WorkflowConnectorGetLastChainMasterAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/WorkflowConnector/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorGetLastChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowChainMasterSummaryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WorkFlowChainMasterSummaryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowChainMasterSummaryDTO>)));
        }

        /// <summary>
        /// This call inserts a new workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>WorkFlowChainMasterDTO</returns>
        public WorkFlowChainMasterDTO WorkflowConnectorInsertChainMaster (WorkFlowChainMasterDTO chainMaster)
        {
             ApiResponse<WorkFlowChainMasterDTO> localVarResponse = WorkflowConnectorInsertChainMasterWithHttpInfo(chainMaster);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a new workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>ApiResponse of WorkFlowChainMasterDTO</returns>
        public ApiResponse< WorkFlowChainMasterDTO > WorkflowConnectorInsertChainMasterWithHttpInfo (WorkFlowChainMasterDTO chainMaster)
        {
            // verify the required parameter 'chainMaster' is set
            if (chainMaster == null)
                throw new ApiException(400, "Missing required parameter 'chainMaster' when calling WorkflowConnectorApi->WorkflowConnectorInsertChainMaster");

            var localVarPath = "./api/WorkflowConnector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainMaster != null && chainMaster.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(chainMaster); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chainMaster; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorInsertChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowChainMasterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowChainMasterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowChainMasterDTO)));
        }

        /// <summary>
        /// This call inserts a new workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>Task of WorkFlowChainMasterDTO</returns>
        public async System.Threading.Tasks.Task<WorkFlowChainMasterDTO> WorkflowConnectorInsertChainMasterAsync (WorkFlowChainMasterDTO chainMaster)
        {
             ApiResponse<WorkFlowChainMasterDTO> localVarResponse = await WorkflowConnectorInsertChainMasterAsyncWithHttpInfo(chainMaster);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a new workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>Task of ApiResponse (WorkFlowChainMasterDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkFlowChainMasterDTO>> WorkflowConnectorInsertChainMasterAsyncWithHttpInfo (WorkFlowChainMasterDTO chainMaster)
        {
            // verify the required parameter 'chainMaster' is set
            if (chainMaster == null)
                throw new ApiException(400, "Missing required parameter 'chainMaster' when calling WorkflowConnectorApi->WorkflowConnectorInsertChainMaster");

            var localVarPath = "./api/WorkflowConnector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainMaster != null && chainMaster.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(chainMaster); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chainMaster; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorInsertChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowChainMasterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowChainMasterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowChainMasterDTO)));
        }

        /// <summary>
        /// This call updates a workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>WorkFlowChainMasterDTO</returns>
        public WorkFlowChainMasterDTO WorkflowConnectorUpdateChainMaster (WorkFlowChainMasterDTO chainMaster)
        {
             ApiResponse<WorkFlowChainMasterDTO> localVarResponse = WorkflowConnectorUpdateChainMasterWithHttpInfo(chainMaster);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates a workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>ApiResponse of WorkFlowChainMasterDTO</returns>
        public ApiResponse< WorkFlowChainMasterDTO > WorkflowConnectorUpdateChainMasterWithHttpInfo (WorkFlowChainMasterDTO chainMaster)
        {
            // verify the required parameter 'chainMaster' is set
            if (chainMaster == null)
                throw new ApiException(400, "Missing required parameter 'chainMaster' when calling WorkflowConnectorApi->WorkflowConnectorUpdateChainMaster");

            var localVarPath = "./api/WorkflowConnector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainMaster != null && chainMaster.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(chainMaster); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chainMaster; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorUpdateChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowChainMasterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowChainMasterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowChainMasterDTO)));
        }

        /// <summary>
        /// This call updates a workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>Task of WorkFlowChainMasterDTO</returns>
        public async System.Threading.Tasks.Task<WorkFlowChainMasterDTO> WorkflowConnectorUpdateChainMasterAsync (WorkFlowChainMasterDTO chainMaster)
        {
             ApiResponse<WorkFlowChainMasterDTO> localVarResponse = await WorkflowConnectorUpdateChainMasterAsyncWithHttpInfo(chainMaster);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates a workflow chain 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainMaster">The chain to be created</param>
        /// <returns>Task of ApiResponse (WorkFlowChainMasterDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkFlowChainMasterDTO>> WorkflowConnectorUpdateChainMasterAsyncWithHttpInfo (WorkFlowChainMasterDTO chainMaster)
        {
            // verify the required parameter 'chainMaster' is set
            if (chainMaster == null)
                throw new ApiException(400, "Missing required parameter 'chainMaster' when calling WorkflowConnectorApi->WorkflowConnectorUpdateChainMaster");

            var localVarPath = "./api/WorkflowConnector";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainMaster != null && chainMaster.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(chainMaster); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chainMaster; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowConnectorUpdateChainMaster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowChainMasterDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowChainMasterDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowChainMasterDTO)));
        }

    }
}
