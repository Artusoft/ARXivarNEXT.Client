/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ARXivarNEXT.Client.Client;
using ARXivarNEXT.Client.Model;

namespace ARXivarNEXT.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationMfaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Associates the mfa authenticator to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associateInfo">The associate request information</param>
        /// <returns>MfaAssociateAuthenticatorResponseDTO</returns>
        MfaAssociateAuthenticatorResponseDTO AuthenticationMfaAssociateAuthenticator (MfaAssociateAuthenticatorRequestDTO associateInfo);

        /// <summary>
        /// Associates the mfa authenticator to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associateInfo">The associate request information</param>
        /// <returns>ApiResponse of MfaAssociateAuthenticatorResponseDTO</returns>
        ApiResponse<MfaAssociateAuthenticatorResponseDTO> AuthenticationMfaAssociateAuthenticatorWithHttpInfo (MfaAssociateAuthenticatorRequestDTO associateInfo);
        /// <summary>
        /// Challenges the mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="challengeInfo">The challenge request information</param>
        /// <returns>MfaChallengeAuthenticatorResponseDTO</returns>
        MfaChallengeAuthenticatorResponseDTO AuthenticationMfaChallengeAuthenticator (MfaChallengeAuthenticatorRequestDTO challengeInfo);

        /// <summary>
        /// Challenges the mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="challengeInfo">The challenge request information</param>
        /// <returns>ApiResponse of MfaChallengeAuthenticatorResponseDTO</returns>
        ApiResponse<MfaChallengeAuthenticatorResponseDTO> AuthenticationMfaChallengeAuthenticatorWithHttpInfo (MfaChallengeAuthenticatorRequestDTO challengeInfo);
        /// <summary>
        /// Deletes the specified mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="deleteInfo">The delete request information</param>
        /// <returns></returns>
        void AuthenticationMfaDeleteAuthenticator (string id, MfaDeleteAuthenticatorRequestDTO deleteInfo);

        /// <summary>
        /// Deletes the specified mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="deleteInfo">The delete request information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthenticationMfaDeleteAuthenticatorWithHttpInfo (string id, MfaDeleteAuthenticatorRequestDTO deleteInfo);
        /// <summary>
        /// Disables the specified mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="disableInfo">The disable request information</param>
        /// <returns></returns>
        void AuthenticationMfaDisableAuthenticator (string id, MfaDisableAuthenticatorRequestDTO disableInfo);

        /// <summary>
        /// Disables the specified mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="disableInfo">The disable request information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthenticationMfaDisableAuthenticatorWithHttpInfo (string id, MfaDisableAuthenticatorRequestDTO disableInfo);
        /// <summary>
        /// Retrieves the access token information using the mfa oob authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oobAuthenticationInfo">The oob authentication request information</param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationMfaGetAccessTokenInfoOobGrantType (MfaOobAuthenticationRequestDTO oobAuthenticationInfo);

        /// <summary>
        /// Retrieves the access token information using the mfa oob authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oobAuthenticationInfo">The oob authentication request information</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationMfaGetAccessTokenInfoOobGrantTypeWithHttpInfo (MfaOobAuthenticationRequestDTO oobAuthenticationInfo);
        /// <summary>
        /// Retrieves the access token information using the mfa otp authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otpAuthenticationInfo">The otp authentication request information</param>
        /// <returns>AccessTokenInfoDTO</returns>
        AccessTokenInfoDTO AuthenticationMfaGetAccessTokenInfoOtpGrantType (MfaOtpAuthenticationRequestDTO otpAuthenticationInfo);

        /// <summary>
        /// Retrieves the access token information using the mfa otp authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otpAuthenticationInfo">The otp authentication request information</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        ApiResponse<AccessTokenInfoDTO> AuthenticationMfaGetAccessTokenInfoOtpGrantTypeWithHttpInfo (MfaOtpAuthenticationRequestDTO otpAuthenticationInfo);
        /// <summary>
        /// Retrieves all the mfa authenticators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MfaAuthenticatorDTO&gt;</returns>
        List<MfaAuthenticatorDTO> AuthenticationMfaGetAuthenticators ();

        /// <summary>
        /// Retrieves all the mfa authenticators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MfaAuthenticatorDTO&gt;</returns>
        ApiResponse<List<MfaAuthenticatorDTO>> AuthenticationMfaGetAuthenticatorsWithHttpInfo ();
        /// <summary>
        /// Retrieves the MFA permission for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MfaUserStatusDTO</returns>
        MfaUserStatusDTO AuthenticationMfaGetCurrentUserMfaStatus ();

        /// <summary>
        /// Retrieves the MFA permission for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MfaUserStatusDTO</returns>
        ApiResponse<MfaUserStatusDTO> AuthenticationMfaGetCurrentUserMfaStatusWithHttpInfo ();
        /// <summary>
        /// Retrieves all the active mfa providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MfaProviderDTO&gt;</returns>
        List<MfaProviderDTO> AuthenticationMfaGetProviders ();

        /// <summary>
        /// Retrieves all the active mfa providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MfaProviderDTO&gt;</returns>
        ApiResponse<List<MfaProviderDTO>> AuthenticationMfaGetProvidersWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Associates the mfa authenticator to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associateInfo">The associate request information</param>
        /// <returns>Task of MfaAssociateAuthenticatorResponseDTO</returns>
        System.Threading.Tasks.Task<MfaAssociateAuthenticatorResponseDTO> AuthenticationMfaAssociateAuthenticatorAsync (MfaAssociateAuthenticatorRequestDTO associateInfo);

        /// <summary>
        /// Associates the mfa authenticator to a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associateInfo">The associate request information</param>
        /// <returns>Task of ApiResponse (MfaAssociateAuthenticatorResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MfaAssociateAuthenticatorResponseDTO>> AuthenticationMfaAssociateAuthenticatorAsyncWithHttpInfo (MfaAssociateAuthenticatorRequestDTO associateInfo);
        /// <summary>
        /// Challenges the mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="challengeInfo">The challenge request information</param>
        /// <returns>Task of MfaChallengeAuthenticatorResponseDTO</returns>
        System.Threading.Tasks.Task<MfaChallengeAuthenticatorResponseDTO> AuthenticationMfaChallengeAuthenticatorAsync (MfaChallengeAuthenticatorRequestDTO challengeInfo);

        /// <summary>
        /// Challenges the mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="challengeInfo">The challenge request information</param>
        /// <returns>Task of ApiResponse (MfaChallengeAuthenticatorResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MfaChallengeAuthenticatorResponseDTO>> AuthenticationMfaChallengeAuthenticatorAsyncWithHttpInfo (MfaChallengeAuthenticatorRequestDTO challengeInfo);
        /// <summary>
        /// Deletes the specified mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="deleteInfo">The delete request information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthenticationMfaDeleteAuthenticatorAsync (string id, MfaDeleteAuthenticatorRequestDTO deleteInfo);

        /// <summary>
        /// Deletes the specified mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="deleteInfo">The delete request information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationMfaDeleteAuthenticatorAsyncWithHttpInfo (string id, MfaDeleteAuthenticatorRequestDTO deleteInfo);
        /// <summary>
        /// Disables the specified mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="disableInfo">The disable request information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthenticationMfaDisableAuthenticatorAsync (string id, MfaDisableAuthenticatorRequestDTO disableInfo);

        /// <summary>
        /// Disables the specified mfa authenticator
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="disableInfo">The disable request information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationMfaDisableAuthenticatorAsyncWithHttpInfo (string id, MfaDisableAuthenticatorRequestDTO disableInfo);
        /// <summary>
        /// Retrieves the access token information using the mfa oob authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oobAuthenticationInfo">The oob authentication request information</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationMfaGetAccessTokenInfoOobGrantTypeAsync (MfaOobAuthenticationRequestDTO oobAuthenticationInfo);

        /// <summary>
        /// Retrieves the access token information using the mfa oob authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oobAuthenticationInfo">The oob authentication request information</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationMfaGetAccessTokenInfoOobGrantTypeAsyncWithHttpInfo (MfaOobAuthenticationRequestDTO oobAuthenticationInfo);
        /// <summary>
        /// Retrieves the access token information using the mfa otp authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otpAuthenticationInfo">The otp authentication request information</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationMfaGetAccessTokenInfoOtpGrantTypeAsync (MfaOtpAuthenticationRequestDTO otpAuthenticationInfo);

        /// <summary>
        /// Retrieves the access token information using the mfa otp authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otpAuthenticationInfo">The otp authentication request information</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationMfaGetAccessTokenInfoOtpGrantTypeAsyncWithHttpInfo (MfaOtpAuthenticationRequestDTO otpAuthenticationInfo);
        /// <summary>
        /// Retrieves all the mfa authenticators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MfaAuthenticatorDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MfaAuthenticatorDTO>> AuthenticationMfaGetAuthenticatorsAsync ();

        /// <summary>
        /// Retrieves all the mfa authenticators
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MfaAuthenticatorDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MfaAuthenticatorDTO>>> AuthenticationMfaGetAuthenticatorsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the MFA permission for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MfaUserStatusDTO</returns>
        System.Threading.Tasks.Task<MfaUserStatusDTO> AuthenticationMfaGetCurrentUserMfaStatusAsync ();

        /// <summary>
        /// Retrieves the MFA permission for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MfaUserStatusDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MfaUserStatusDTO>> AuthenticationMfaGetCurrentUserMfaStatusAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves all the active mfa providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MfaProviderDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MfaProviderDTO>> AuthenticationMfaGetProvidersAsync ();

        /// <summary>
        /// Retrieves all the active mfa providers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MfaProviderDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MfaProviderDTO>>> AuthenticationMfaGetProvidersAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationMfaApi : IAuthenticationMfaApi
    {
        private ARXivarNEXT.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationMfaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationMfaApi(String basePath)
        {
            this.Configuration = new ARXivarNEXT.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationMfaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationMfaApi(ARXivarNEXT.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ARXivarNEXT.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ARXivarNEXT.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ARXivarNEXT.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Associates the mfa authenticator to a user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associateInfo">The associate request information</param>
        /// <returns>MfaAssociateAuthenticatorResponseDTO</returns>
        public MfaAssociateAuthenticatorResponseDTO AuthenticationMfaAssociateAuthenticator (MfaAssociateAuthenticatorRequestDTO associateInfo)
        {
             ApiResponse<MfaAssociateAuthenticatorResponseDTO> localVarResponse = AuthenticationMfaAssociateAuthenticatorWithHttpInfo(associateInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Associates the mfa authenticator to a user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associateInfo">The associate request information</param>
        /// <returns>ApiResponse of MfaAssociateAuthenticatorResponseDTO</returns>
        public ApiResponse< MfaAssociateAuthenticatorResponseDTO > AuthenticationMfaAssociateAuthenticatorWithHttpInfo (MfaAssociateAuthenticatorRequestDTO associateInfo)
        {
            // verify the required parameter 'associateInfo' is set
            if (associateInfo == null)
                throw new ApiException(400, "Missing required parameter 'associateInfo' when calling AuthenticationMfaApi->AuthenticationMfaAssociateAuthenticator");

            var localVarPath = "./api/authentication/mfa/authenticators/associate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (associateInfo != null && associateInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(associateInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = associateInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaAssociateAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MfaAssociateAuthenticatorResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MfaAssociateAuthenticatorResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MfaAssociateAuthenticatorResponseDTO)));
        }

        /// <summary>
        /// Associates the mfa authenticator to a user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associateInfo">The associate request information</param>
        /// <returns>Task of MfaAssociateAuthenticatorResponseDTO</returns>
        public async System.Threading.Tasks.Task<MfaAssociateAuthenticatorResponseDTO> AuthenticationMfaAssociateAuthenticatorAsync (MfaAssociateAuthenticatorRequestDTO associateInfo)
        {
             ApiResponse<MfaAssociateAuthenticatorResponseDTO> localVarResponse = await AuthenticationMfaAssociateAuthenticatorAsyncWithHttpInfo(associateInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Associates the mfa authenticator to a user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="associateInfo">The associate request information</param>
        /// <returns>Task of ApiResponse (MfaAssociateAuthenticatorResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MfaAssociateAuthenticatorResponseDTO>> AuthenticationMfaAssociateAuthenticatorAsyncWithHttpInfo (MfaAssociateAuthenticatorRequestDTO associateInfo)
        {
            // verify the required parameter 'associateInfo' is set
            if (associateInfo == null)
                throw new ApiException(400, "Missing required parameter 'associateInfo' when calling AuthenticationMfaApi->AuthenticationMfaAssociateAuthenticator");

            var localVarPath = "./api/authentication/mfa/authenticators/associate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (associateInfo != null && associateInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(associateInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = associateInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaAssociateAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MfaAssociateAuthenticatorResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MfaAssociateAuthenticatorResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MfaAssociateAuthenticatorResponseDTO)));
        }

        /// <summary>
        /// Challenges the mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="challengeInfo">The challenge request information</param>
        /// <returns>MfaChallengeAuthenticatorResponseDTO</returns>
        public MfaChallengeAuthenticatorResponseDTO AuthenticationMfaChallengeAuthenticator (MfaChallengeAuthenticatorRequestDTO challengeInfo)
        {
             ApiResponse<MfaChallengeAuthenticatorResponseDTO> localVarResponse = AuthenticationMfaChallengeAuthenticatorWithHttpInfo(challengeInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Challenges the mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="challengeInfo">The challenge request information</param>
        /// <returns>ApiResponse of MfaChallengeAuthenticatorResponseDTO</returns>
        public ApiResponse< MfaChallengeAuthenticatorResponseDTO > AuthenticationMfaChallengeAuthenticatorWithHttpInfo (MfaChallengeAuthenticatorRequestDTO challengeInfo)
        {
            // verify the required parameter 'challengeInfo' is set
            if (challengeInfo == null)
                throw new ApiException(400, "Missing required parameter 'challengeInfo' when calling AuthenticationMfaApi->AuthenticationMfaChallengeAuthenticator");

            var localVarPath = "./api/authentication/mfa/authenticators/challenge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (challengeInfo != null && challengeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(challengeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = challengeInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaChallengeAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MfaChallengeAuthenticatorResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MfaChallengeAuthenticatorResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MfaChallengeAuthenticatorResponseDTO)));
        }

        /// <summary>
        /// Challenges the mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="challengeInfo">The challenge request information</param>
        /// <returns>Task of MfaChallengeAuthenticatorResponseDTO</returns>
        public async System.Threading.Tasks.Task<MfaChallengeAuthenticatorResponseDTO> AuthenticationMfaChallengeAuthenticatorAsync (MfaChallengeAuthenticatorRequestDTO challengeInfo)
        {
             ApiResponse<MfaChallengeAuthenticatorResponseDTO> localVarResponse = await AuthenticationMfaChallengeAuthenticatorAsyncWithHttpInfo(challengeInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Challenges the mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="challengeInfo">The challenge request information</param>
        /// <returns>Task of ApiResponse (MfaChallengeAuthenticatorResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MfaChallengeAuthenticatorResponseDTO>> AuthenticationMfaChallengeAuthenticatorAsyncWithHttpInfo (MfaChallengeAuthenticatorRequestDTO challengeInfo)
        {
            // verify the required parameter 'challengeInfo' is set
            if (challengeInfo == null)
                throw new ApiException(400, "Missing required parameter 'challengeInfo' when calling AuthenticationMfaApi->AuthenticationMfaChallengeAuthenticator");

            var localVarPath = "./api/authentication/mfa/authenticators/challenge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (challengeInfo != null && challengeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(challengeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = challengeInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaChallengeAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MfaChallengeAuthenticatorResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MfaChallengeAuthenticatorResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MfaChallengeAuthenticatorResponseDTO)));
        }

        /// <summary>
        /// Deletes the specified mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="deleteInfo">The delete request information</param>
        /// <returns></returns>
        public void AuthenticationMfaDeleteAuthenticator (string id, MfaDeleteAuthenticatorRequestDTO deleteInfo)
        {
             AuthenticationMfaDeleteAuthenticatorWithHttpInfo(id, deleteInfo);
        }

        /// <summary>
        /// Deletes the specified mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="deleteInfo">The delete request information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthenticationMfaDeleteAuthenticatorWithHttpInfo (string id, MfaDeleteAuthenticatorRequestDTO deleteInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuthenticationMfaApi->AuthenticationMfaDeleteAuthenticator");
            // verify the required parameter 'deleteInfo' is set
            if (deleteInfo == null)
                throw new ApiException(400, "Missing required parameter 'deleteInfo' when calling AuthenticationMfaApi->AuthenticationMfaDeleteAuthenticator");

            var localVarPath = "./api/authentication/mfa/authenticators/{id}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteInfo != null && deleteInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaDeleteAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="deleteInfo">The delete request information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthenticationMfaDeleteAuthenticatorAsync (string id, MfaDeleteAuthenticatorRequestDTO deleteInfo)
        {
             await AuthenticationMfaDeleteAuthenticatorAsyncWithHttpInfo(id, deleteInfo);

        }

        /// <summary>
        /// Deletes the specified mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="deleteInfo">The delete request information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationMfaDeleteAuthenticatorAsyncWithHttpInfo (string id, MfaDeleteAuthenticatorRequestDTO deleteInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuthenticationMfaApi->AuthenticationMfaDeleteAuthenticator");
            // verify the required parameter 'deleteInfo' is set
            if (deleteInfo == null)
                throw new ApiException(400, "Missing required parameter 'deleteInfo' when calling AuthenticationMfaApi->AuthenticationMfaDeleteAuthenticator");

            var localVarPath = "./api/authentication/mfa/authenticators/{id}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteInfo != null && deleteInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaDeleteAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disables the specified mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="disableInfo">The disable request information</param>
        /// <returns></returns>
        public void AuthenticationMfaDisableAuthenticator (string id, MfaDisableAuthenticatorRequestDTO disableInfo)
        {
             AuthenticationMfaDisableAuthenticatorWithHttpInfo(id, disableInfo);
        }

        /// <summary>
        /// Disables the specified mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="disableInfo">The disable request information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthenticationMfaDisableAuthenticatorWithHttpInfo (string id, MfaDisableAuthenticatorRequestDTO disableInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuthenticationMfaApi->AuthenticationMfaDisableAuthenticator");
            // verify the required parameter 'disableInfo' is set
            if (disableInfo == null)
                throw new ApiException(400, "Missing required parameter 'disableInfo' when calling AuthenticationMfaApi->AuthenticationMfaDisableAuthenticator");

            var localVarPath = "./api/authentication/mfa/authenticators/{id}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disableInfo != null && disableInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(disableInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = disableInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaDisableAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disables the specified mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="disableInfo">The disable request information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthenticationMfaDisableAuthenticatorAsync (string id, MfaDisableAuthenticatorRequestDTO disableInfo)
        {
             await AuthenticationMfaDisableAuthenticatorAsyncWithHttpInfo(id, disableInfo);

        }

        /// <summary>
        /// Disables the specified mfa authenticator 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identifier of the mfa authenticator</param>
        /// <param name="disableInfo">The disable request information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthenticationMfaDisableAuthenticatorAsyncWithHttpInfo (string id, MfaDisableAuthenticatorRequestDTO disableInfo)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AuthenticationMfaApi->AuthenticationMfaDisableAuthenticator");
            // verify the required parameter 'disableInfo' is set
            if (disableInfo == null)
                throw new ApiException(400, "Missing required parameter 'disableInfo' when calling AuthenticationMfaApi->AuthenticationMfaDisableAuthenticator");

            var localVarPath = "./api/authentication/mfa/authenticators/{id}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disableInfo != null && disableInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(disableInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = disableInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaDisableAuthenticator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieves the access token information using the mfa oob authentication 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oobAuthenticationInfo">The oob authentication request information</param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationMfaGetAccessTokenInfoOobGrantType (MfaOobAuthenticationRequestDTO oobAuthenticationInfo)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationMfaGetAccessTokenInfoOobGrantTypeWithHttpInfo(oobAuthenticationInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the access token information using the mfa oob authentication 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oobAuthenticationInfo">The oob authentication request information</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationMfaGetAccessTokenInfoOobGrantTypeWithHttpInfo (MfaOobAuthenticationRequestDTO oobAuthenticationInfo)
        {
            // verify the required parameter 'oobAuthenticationInfo' is set
            if (oobAuthenticationInfo == null)
                throw new ApiException(400, "Missing required parameter 'oobAuthenticationInfo' when calling AuthenticationMfaApi->AuthenticationMfaGetAccessTokenInfoOobGrantType");

            var localVarPath = "./api/authentication/mfa/authenticators/token/oob";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oobAuthenticationInfo != null && oobAuthenticationInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oobAuthenticationInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oobAuthenticationInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetAccessTokenInfoOobGrantType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// Retrieves the access token information using the mfa oob authentication 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oobAuthenticationInfo">The oob authentication request information</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationMfaGetAccessTokenInfoOobGrantTypeAsync (MfaOobAuthenticationRequestDTO oobAuthenticationInfo)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationMfaGetAccessTokenInfoOobGrantTypeAsyncWithHttpInfo(oobAuthenticationInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the access token information using the mfa oob authentication 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oobAuthenticationInfo">The oob authentication request information</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationMfaGetAccessTokenInfoOobGrantTypeAsyncWithHttpInfo (MfaOobAuthenticationRequestDTO oobAuthenticationInfo)
        {
            // verify the required parameter 'oobAuthenticationInfo' is set
            if (oobAuthenticationInfo == null)
                throw new ApiException(400, "Missing required parameter 'oobAuthenticationInfo' when calling AuthenticationMfaApi->AuthenticationMfaGetAccessTokenInfoOobGrantType");

            var localVarPath = "./api/authentication/mfa/authenticators/token/oob";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (oobAuthenticationInfo != null && oobAuthenticationInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(oobAuthenticationInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = oobAuthenticationInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetAccessTokenInfoOobGrantType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// Retrieves the access token information using the mfa otp authentication 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otpAuthenticationInfo">The otp authentication request information</param>
        /// <returns>AccessTokenInfoDTO</returns>
        public AccessTokenInfoDTO AuthenticationMfaGetAccessTokenInfoOtpGrantType (MfaOtpAuthenticationRequestDTO otpAuthenticationInfo)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = AuthenticationMfaGetAccessTokenInfoOtpGrantTypeWithHttpInfo(otpAuthenticationInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the access token information using the mfa otp authentication 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otpAuthenticationInfo">The otp authentication request information</param>
        /// <returns>ApiResponse of AccessTokenInfoDTO</returns>
        public ApiResponse< AccessTokenInfoDTO > AuthenticationMfaGetAccessTokenInfoOtpGrantTypeWithHttpInfo (MfaOtpAuthenticationRequestDTO otpAuthenticationInfo)
        {
            // verify the required parameter 'otpAuthenticationInfo' is set
            if (otpAuthenticationInfo == null)
                throw new ApiException(400, "Missing required parameter 'otpAuthenticationInfo' when calling AuthenticationMfaApi->AuthenticationMfaGetAccessTokenInfoOtpGrantType");

            var localVarPath = "./api/authentication/mfa/authenticators/token/otp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (otpAuthenticationInfo != null && otpAuthenticationInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(otpAuthenticationInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = otpAuthenticationInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetAccessTokenInfoOtpGrantType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// Retrieves the access token information using the mfa otp authentication 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otpAuthenticationInfo">The otp authentication request information</param>
        /// <returns>Task of AccessTokenInfoDTO</returns>
        public async System.Threading.Tasks.Task<AccessTokenInfoDTO> AuthenticationMfaGetAccessTokenInfoOtpGrantTypeAsync (MfaOtpAuthenticationRequestDTO otpAuthenticationInfo)
        {
             ApiResponse<AccessTokenInfoDTO> localVarResponse = await AuthenticationMfaGetAccessTokenInfoOtpGrantTypeAsyncWithHttpInfo(otpAuthenticationInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the access token information using the mfa otp authentication 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="otpAuthenticationInfo">The otp authentication request information</param>
        /// <returns>Task of ApiResponse (AccessTokenInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenInfoDTO>> AuthenticationMfaGetAccessTokenInfoOtpGrantTypeAsyncWithHttpInfo (MfaOtpAuthenticationRequestDTO otpAuthenticationInfo)
        {
            // verify the required parameter 'otpAuthenticationInfo' is set
            if (otpAuthenticationInfo == null)
                throw new ApiException(400, "Missing required parameter 'otpAuthenticationInfo' when calling AuthenticationMfaApi->AuthenticationMfaGetAccessTokenInfoOtpGrantType");

            var localVarPath = "./api/authentication/mfa/authenticators/token/otp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (otpAuthenticationInfo != null && otpAuthenticationInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(otpAuthenticationInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = otpAuthenticationInfo; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetAccessTokenInfoOtpGrantType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (AccessTokenInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenInfoDTO)));
        }

        /// <summary>
        /// Retrieves all the mfa authenticators 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MfaAuthenticatorDTO&gt;</returns>
        public List<MfaAuthenticatorDTO> AuthenticationMfaGetAuthenticators ()
        {
             ApiResponse<List<MfaAuthenticatorDTO>> localVarResponse = AuthenticationMfaGetAuthenticatorsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the mfa authenticators 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MfaAuthenticatorDTO&gt;</returns>
        public ApiResponse< List<MfaAuthenticatorDTO> > AuthenticationMfaGetAuthenticatorsWithHttpInfo ()
        {

            var localVarPath = "./api/authentication/mfa/authenticators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetAuthenticators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MfaAuthenticatorDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<MfaAuthenticatorDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MfaAuthenticatorDTO>)));
        }

        /// <summary>
        /// Retrieves all the mfa authenticators 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MfaAuthenticatorDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MfaAuthenticatorDTO>> AuthenticationMfaGetAuthenticatorsAsync ()
        {
             ApiResponse<List<MfaAuthenticatorDTO>> localVarResponse = await AuthenticationMfaGetAuthenticatorsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves all the mfa authenticators 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MfaAuthenticatorDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MfaAuthenticatorDTO>>> AuthenticationMfaGetAuthenticatorsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/authentication/mfa/authenticators";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetAuthenticators", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MfaAuthenticatorDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<MfaAuthenticatorDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MfaAuthenticatorDTO>)));
        }

        /// <summary>
        /// Retrieves the MFA permission for the current user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MfaUserStatusDTO</returns>
        public MfaUserStatusDTO AuthenticationMfaGetCurrentUserMfaStatus ()
        {
             ApiResponse<MfaUserStatusDTO> localVarResponse = AuthenticationMfaGetCurrentUserMfaStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the MFA permission for the current user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MfaUserStatusDTO</returns>
        public ApiResponse< MfaUserStatusDTO > AuthenticationMfaGetCurrentUserMfaStatusWithHttpInfo ()
        {

            var localVarPath = "./api/authentication/mfa/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetCurrentUserMfaStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MfaUserStatusDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MfaUserStatusDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MfaUserStatusDTO)));
        }

        /// <summary>
        /// Retrieves the MFA permission for the current user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MfaUserStatusDTO</returns>
        public async System.Threading.Tasks.Task<MfaUserStatusDTO> AuthenticationMfaGetCurrentUserMfaStatusAsync ()
        {
             ApiResponse<MfaUserStatusDTO> localVarResponse = await AuthenticationMfaGetCurrentUserMfaStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the MFA permission for the current user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MfaUserStatusDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MfaUserStatusDTO>> AuthenticationMfaGetCurrentUserMfaStatusAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/authentication/mfa/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetCurrentUserMfaStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MfaUserStatusDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (MfaUserStatusDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MfaUserStatusDTO)));
        }

        /// <summary>
        /// Retrieves all the active mfa providers 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MfaProviderDTO&gt;</returns>
        public List<MfaProviderDTO> AuthenticationMfaGetProviders ()
        {
             ApiResponse<List<MfaProviderDTO>> localVarResponse = AuthenticationMfaGetProvidersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all the active mfa providers 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MfaProviderDTO&gt;</returns>
        public ApiResponse< List<MfaProviderDTO> > AuthenticationMfaGetProvidersWithHttpInfo ()
        {

            var localVarPath = "./api/authentication/mfa/providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MfaProviderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<MfaProviderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MfaProviderDTO>)));
        }

        /// <summary>
        /// Retrieves all the active mfa providers 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MfaProviderDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MfaProviderDTO>> AuthenticationMfaGetProvidersAsync ()
        {
             ApiResponse<List<MfaProviderDTO>> localVarResponse = await AuthenticationMfaGetProvidersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves all the active mfa providers 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MfaProviderDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MfaProviderDTO>>> AuthenticationMfaGetProvidersAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/authentication/mfa/providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AuthenticationMfaGetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MfaProviderDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<MfaProviderDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MfaProviderDTO>)));
        }

    }
}
