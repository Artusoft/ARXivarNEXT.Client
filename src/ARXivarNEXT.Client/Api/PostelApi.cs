/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ARXivarNEXT.Client.Client;
using ARXivarNEXT.Client.Model;

namespace ARXivarNEXT.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call sets one or more requests to Canceled
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        List<NpceOutOperationResultDTO> PostelCancelRequest (List<int?> requestIds);

        /// <summary>
        /// This call sets one or more requests to Canceled
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        ApiResponse<List<NpceOutOperationResultDTO>> PostelCancelRequestWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call confirms one or more requests price
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        List<NpceOutOperationResultDTO> PostelConfirmPrices (List<int?> requestIds);

        /// <summary>
        /// This call confirms one or more requests price
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        ApiResponse<List<NpceOutOperationResultDTO>> PostelConfirmPricesWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call confirm the send of one or more requests
        /// </summary>
        /// <remarks>
        /// Forwarded, In error or canceled request can be sent
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        List<NpceOutOperationResultDTO> PostelConfirmSend (List<int?> requestIds);

        /// <summary>
        /// This call confirm the send of one or more requests
        /// </summary>
        /// <remarks>
        /// Forwarded, In error or canceled request can be sent
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        ApiResponse<List<NpceOutOperationResultDTO>> PostelConfirmSendWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call deletes the logs related to a specific request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns></returns>
        void PostelDeleteLogs (int? requestId);

        /// <summary>
        /// This call deletes the logs related to a specific request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostelDeleteLogsWithHttpInfo (int? requestId);
        /// <summary>
        /// This call deletes permanently one or more request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        List<NpceOutOperationResultDTO> PostelDeleteRequests (List<int?> requestIds);

        /// <summary>
        /// This call deletes permanently one or more request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        ApiResponse<List<NpceOutOperationResultDTO>> PostelDeleteRequestsWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call forward a specified npce entry to multiple recipients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutForward"></param>
        /// <returns>List&lt;NpceOutDTO&gt;</returns>
        List<NpceOutDTO> PostelForwardRequest (NpceOutForwardDTO npceOutForward);

        /// <summary>
        /// This call forward a specified npce entry to multiple recipients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutForward"></param>
        /// <returns>ApiResponse of List&lt;NpceOutDTO&gt;</returns>
        ApiResponse<List<NpceOutDTO>> PostelForwardRequestWithHttpInfo (NpceOutForwardDTO npceOutForward);
        /// <summary>
        /// This call returns the Postel Default Sender information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PostelDefaultSenderInfoDTO</returns>
        PostelDefaultSenderInfoDTO PostelGetDefaultSenderInfo ();

        /// <summary>
        /// This call returns the Postel Default Sender information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PostelDefaultSenderInfoDTO</returns>
        ApiResponse<PostelDefaultSenderInfoDTO> PostelGetDefaultSenderInfoWithHttpInfo ();
        /// <summary>
        /// This call gets the logs related to a specific request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>List&lt;NpceLogDTO&gt;</returns>
        List<NpceLogDTO> PostelGetLogs (int? requestId);

        /// <summary>
        /// This call gets the logs related to a specific request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>ApiResponse of List&lt;NpceLogDTO&gt;</returns>
        ApiResponse<List<NpceLogDTO>> PostelGetLogsWithHttpInfo (int? requestId);
        /// <summary>
        /// This call gets a specific request by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>NpceOutDTO</returns>
        NpceOutDTO PostelGetRequestById (int? requestId);

        /// <summary>
        /// This call gets a specific request by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        ApiResponse<NpceOutDTO> PostelGetRequestByIdWithHttpInfo (int? requestId);
        /// <summary>
        /// This call gets the non deleted requests in a given state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <returns>List&lt;NpceOutDTO&gt;</returns>
        List<NpceOutDTO> PostelGetRequestsByState (int? state);

        /// <summary>
        /// This call gets the non deleted requests in a given state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <returns>ApiResponse of List&lt;NpceOutDTO&gt;</returns>
        ApiResponse<List<NpceOutDTO>> PostelGetRequestsByStateWithHttpInfo (int? state);
        /// <summary>
        /// This call gets the list of requests in a grouped state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupedState">Possible values:  0: ToSend  1: Processing  2: ToBeConfirmed  3: Sent  4: InDelivery  5: Delivered  6: ProcessingError  7: SendError  8: DeliveryError  9: Aborted  10: Deleted </param>
        /// <returns>List&lt;NpceOutDTO&gt;</returns>
        List<NpceOutDTO> PostelGetRequestsStates (int? groupedState);

        /// <summary>
        /// This call gets the list of requests in a grouped state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupedState">Possible values:  0: ToSend  1: Processing  2: ToBeConfirmed  3: Sent  4: InDelivery  5: Delivered  6: ProcessingError  7: SendError  8: DeliveryError  9: Aborted  10: Deleted </param>
        /// <returns>ApiResponse of List&lt;NpceOutDTO&gt;</returns>
        ApiResponse<List<NpceOutDTO>> PostelGetRequestsStatesWithHttpInfo (int? groupedState);
        /// <summary>
        /// This call gets the list of the suggested addresses for a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>List&lt;NpceOutPartyDTO&gt;</returns>
        List<NpceOutPartyDTO> PostelGetSuggestedAddresses (int? requestId);

        /// <summary>
        /// This call gets the list of the suggested addresses for a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>ApiResponse of List&lt;NpceOutPartyDTO&gt;</returns>
        ApiResponse<List<NpceOutPartyDTO>> PostelGetSuggestedAddressesWithHttpInfo (int? requestId);
        /// <summary>
        /// This call gets the request summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NpceSummaryDTO</returns>
        NpceSummaryDTO PostelGetSummary ();

        /// <summary>
        /// This call gets the request summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NpceSummaryDTO</returns>
        ApiResponse<NpceSummaryDTO> PostelGetSummaryWithHttpInfo ();
        /// <summary>
        /// This call inserts a log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="log">The log</param>
        /// <returns></returns>
        void PostelInsertLog (NpceLogDTO log);

        /// <summary>
        /// This call inserts a log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="log">The log</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostelInsertLogWithHttpInfo (NpceLogDTO log);
        /// <summary>
        /// This call inserts a list of requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutInsert"></param>
        /// <returns>List&lt;NpceOutInsertResultDTO&gt;</returns>
        List<NpceOutInsertResultDTO> PostelInsertRequests (NpceOutInsertDTO npceOutInsert);

        /// <summary>
        /// This call inserts a list of requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutInsert"></param>
        /// <returns>ApiResponse of List&lt;NpceOutInsertResultDTO&gt;</returns>
        ApiResponse<List<NpceOutInsertResultDTO>> PostelInsertRequestsWithHttpInfo (NpceOutInsertDTO npceOutInsert);
        /// <summary>
        /// This call moves one or more requests to the trash bin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        List<NpceOutOperationResultDTO> PostelMoveToTrashRequests (List<int?> requestIds);

        /// <summary>
        /// This call moves one or more requests to the trash bin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        ApiResponse<List<NpceOutOperationResultDTO>> PostelMoveToTrashRequestsWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call restores one or more requests from the trash bin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        List<NpceOutOperationResultDTO> PostelRestoreFromTrashRequests (List<int?> requestIds);

        /// <summary>
        /// This call restores one or more requests from the trash bin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        ApiResponse<List<NpceOutOperationResultDTO>> PostelRestoreFromTrashRequestsWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call updates the tracking data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>NpceOutDTO</returns>
        NpceOutDTO PostelUpdateRegisteredTracking (int? id, int? state, NpceRegisteredTrackingDTO trackingDTO);

        /// <summary>
        /// This call updates the tracking data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        ApiResponse<NpceOutDTO> PostelUpdateRegisteredTrackingWithHttpInfo (int? id, int? state, NpceRegisteredTrackingDTO trackingDTO);
        /// <summary>
        /// This call updates the request fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>NpceOutDTO</returns>
        NpceOutDTO PostelUpdateRequestFields (int? requestId, NpceOutUpdateDTO requestFields);

        /// <summary>
        /// This call updates the request fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        ApiResponse<NpceOutDTO> PostelUpdateRequestFieldsWithHttpInfo (int? requestId, NpceOutUpdateDTO requestFields);
        /// <summary>
        /// This call updates the request fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>NpceOutDTO</returns>
        NpceOutDTO PostelUpdateShipping (int? requestId, NpceOutUpdateShippingDTO requestFields);

        /// <summary>
        /// This call updates the request fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        ApiResponse<NpceOutDTO> PostelUpdateShippingWithHttpInfo (int? requestId, NpceOutUpdateShippingDTO requestFields);
        /// <summary>
        /// This call updates the tracking data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>NpceOutDTO</returns>
        NpceOutDTO PostelUpdateTracking (int? id, int? state, NpceTrackingDTO trackingDTO);

        /// <summary>
        /// This call updates the tracking data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        ApiResponse<NpceOutDTO> PostelUpdateTrackingWithHttpInfo (int? id, int? state, NpceTrackingDTO trackingDTO);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call sets one or more requests to Canceled
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelCancelRequestAsync (List<int?> requestIds);

        /// <summary>
        /// This call sets one or more requests to Canceled
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelCancelRequestAsyncWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call confirms one or more requests price
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelConfirmPricesAsync (List<int?> requestIds);

        /// <summary>
        /// This call confirms one or more requests price
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelConfirmPricesAsyncWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call confirm the send of one or more requests
        /// </summary>
        /// <remarks>
        /// Forwarded, In error or canceled request can be sent
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelConfirmSendAsync (List<int?> requestIds);

        /// <summary>
        /// This call confirm the send of one or more requests
        /// </summary>
        /// <remarks>
        /// Forwarded, In error or canceled request can be sent
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelConfirmSendAsyncWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call deletes the logs related to a specific request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostelDeleteLogsAsync (int? requestId);

        /// <summary>
        /// This call deletes the logs related to a specific request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostelDeleteLogsAsyncWithHttpInfo (int? requestId);
        /// <summary>
        /// This call deletes permanently one or more request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelDeleteRequestsAsync (List<int?> requestIds);

        /// <summary>
        /// This call deletes permanently one or more request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelDeleteRequestsAsyncWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call forward a specified npce entry to multiple recipients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutForward"></param>
        /// <returns>Task of List&lt;NpceOutDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutDTO>> PostelForwardRequestAsync (NpceOutForwardDTO npceOutForward);

        /// <summary>
        /// This call forward a specified npce entry to multiple recipients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutForward"></param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutDTO>>> PostelForwardRequestAsyncWithHttpInfo (NpceOutForwardDTO npceOutForward);
        /// <summary>
        /// This call returns the Postel Default Sender information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PostelDefaultSenderInfoDTO</returns>
        System.Threading.Tasks.Task<PostelDefaultSenderInfoDTO> PostelGetDefaultSenderInfoAsync ();

        /// <summary>
        /// This call returns the Postel Default Sender information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PostelDefaultSenderInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostelDefaultSenderInfoDTO>> PostelGetDefaultSenderInfoAsyncWithHttpInfo ();
        /// <summary>
        /// This call gets the logs related to a specific request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of List&lt;NpceLogDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceLogDTO>> PostelGetLogsAsync (int? requestId);

        /// <summary>
        /// This call gets the logs related to a specific request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of ApiResponse (List&lt;NpceLogDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceLogDTO>>> PostelGetLogsAsyncWithHttpInfo (int? requestId);
        /// <summary>
        /// This call gets a specific request by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>Task of NpceOutDTO</returns>
        System.Threading.Tasks.Task<NpceOutDTO> PostelGetRequestByIdAsync (int? requestId);

        /// <summary>
        /// This call gets a specific request by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelGetRequestByIdAsyncWithHttpInfo (int? requestId);
        /// <summary>
        /// This call gets the non deleted requests in a given state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <returns>Task of List&lt;NpceOutDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutDTO>> PostelGetRequestsByStateAsync (int? state);

        /// <summary>
        /// This call gets the non deleted requests in a given state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutDTO>>> PostelGetRequestsByStateAsyncWithHttpInfo (int? state);
        /// <summary>
        /// This call gets the list of requests in a grouped state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupedState">Possible values:  0: ToSend  1: Processing  2: ToBeConfirmed  3: Sent  4: InDelivery  5: Delivered  6: ProcessingError  7: SendError  8: DeliveryError  9: Aborted  10: Deleted </param>
        /// <returns>Task of List&lt;NpceOutDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutDTO>> PostelGetRequestsStatesAsync (int? groupedState);

        /// <summary>
        /// This call gets the list of requests in a grouped state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupedState">Possible values:  0: ToSend  1: Processing  2: ToBeConfirmed  3: Sent  4: InDelivery  5: Delivered  6: ProcessingError  7: SendError  8: DeliveryError  9: Aborted  10: Deleted </param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutDTO>>> PostelGetRequestsStatesAsyncWithHttpInfo (int? groupedState);
        /// <summary>
        /// This call gets the list of the suggested addresses for a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of List&lt;NpceOutPartyDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutPartyDTO>> PostelGetSuggestedAddressesAsync (int? requestId);

        /// <summary>
        /// This call gets the list of the suggested addresses for a request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutPartyDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutPartyDTO>>> PostelGetSuggestedAddressesAsyncWithHttpInfo (int? requestId);
        /// <summary>
        /// This call gets the request summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NpceSummaryDTO</returns>
        System.Threading.Tasks.Task<NpceSummaryDTO> PostelGetSummaryAsync ();

        /// <summary>
        /// This call gets the request summary
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NpceSummaryDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NpceSummaryDTO>> PostelGetSummaryAsyncWithHttpInfo ();
        /// <summary>
        /// This call inserts a log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="log">The log</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostelInsertLogAsync (NpceLogDTO log);

        /// <summary>
        /// This call inserts a log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="log">The log</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostelInsertLogAsyncWithHttpInfo (NpceLogDTO log);
        /// <summary>
        /// This call inserts a list of requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutInsert"></param>
        /// <returns>Task of List&lt;NpceOutInsertResultDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutInsertResultDTO>> PostelInsertRequestsAsync (NpceOutInsertDTO npceOutInsert);

        /// <summary>
        /// This call inserts a list of requests
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutInsert"></param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutInsertResultDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutInsertResultDTO>>> PostelInsertRequestsAsyncWithHttpInfo (NpceOutInsertDTO npceOutInsert);
        /// <summary>
        /// This call moves one or more requests to the trash bin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelMoveToTrashRequestsAsync (List<int?> requestIds);

        /// <summary>
        /// This call moves one or more requests to the trash bin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelMoveToTrashRequestsAsyncWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call restores one or more requests from the trash bin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelRestoreFromTrashRequestsAsync (List<int?> requestIds);

        /// <summary>
        /// This call restores one or more requests from the trash bin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelRestoreFromTrashRequestsAsyncWithHttpInfo (List<int?> requestIds);
        /// <summary>
        /// This call updates the tracking data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>Task of NpceOutDTO</returns>
        System.Threading.Tasks.Task<NpceOutDTO> PostelUpdateRegisteredTrackingAsync (int? id, int? state, NpceRegisteredTrackingDTO trackingDTO);

        /// <summary>
        /// This call updates the tracking data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelUpdateRegisteredTrackingAsyncWithHttpInfo (int? id, int? state, NpceRegisteredTrackingDTO trackingDTO);
        /// <summary>
        /// This call updates the request fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>Task of NpceOutDTO</returns>
        System.Threading.Tasks.Task<NpceOutDTO> PostelUpdateRequestFieldsAsync (int? requestId, NpceOutUpdateDTO requestFields);

        /// <summary>
        /// This call updates the request fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelUpdateRequestFieldsAsyncWithHttpInfo (int? requestId, NpceOutUpdateDTO requestFields);
        /// <summary>
        /// This call updates the request fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>Task of NpceOutDTO</returns>
        System.Threading.Tasks.Task<NpceOutDTO> PostelUpdateShippingAsync (int? requestId, NpceOutUpdateShippingDTO requestFields);

        /// <summary>
        /// This call updates the request fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelUpdateShippingAsyncWithHttpInfo (int? requestId, NpceOutUpdateShippingDTO requestFields);
        /// <summary>
        /// This call updates the tracking data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>Task of NpceOutDTO</returns>
        System.Threading.Tasks.Task<NpceOutDTO> PostelUpdateTrackingAsync (int? id, int? state, NpceTrackingDTO trackingDTO);

        /// <summary>
        /// This call updates the tracking data
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelUpdateTrackingAsyncWithHttpInfo (int? id, int? state, NpceTrackingDTO trackingDTO);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PostelApi : IPostelApi
    {
        private ARXivarNEXT.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostelApi(String basePath)
        {
            this.Configuration = new ARXivarNEXT.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PostelApi(ARXivarNEXT.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ARXivarNEXT.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ARXivarNEXT.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ARXivarNEXT.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call sets one or more requests to Canceled 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        public List<NpceOutOperationResultDTO> PostelCancelRequest (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = PostelCancelRequestWithHttpInfo(requestIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call sets one or more requests to Canceled 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public ApiResponse< List<NpceOutOperationResultDTO> > PostelCancelRequestWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelCancelRequest");

            var localVarPath = "./api/Postel/CancelRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelCancelRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call sets one or more requests to Canceled 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelCancelRequestAsync (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = await PostelCancelRequestAsyncWithHttpInfo(requestIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call sets one or more requests to Canceled 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelCancelRequestAsyncWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelCancelRequest");

            var localVarPath = "./api/Postel/CancelRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelCancelRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call confirms one or more requests price 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        public List<NpceOutOperationResultDTO> PostelConfirmPrices (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = PostelConfirmPricesWithHttpInfo(requestIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call confirms one or more requests price 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public ApiResponse< List<NpceOutOperationResultDTO> > PostelConfirmPricesWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelConfirmPrices");

            var localVarPath = "./api/Postel/ConfirmPrices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelConfirmPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call confirms one or more requests price 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelConfirmPricesAsync (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = await PostelConfirmPricesAsyncWithHttpInfo(requestIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call confirms one or more requests price 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelConfirmPricesAsyncWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelConfirmPrices");

            var localVarPath = "./api/Postel/ConfirmPrices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelConfirmPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call confirm the send of one or more requests Forwarded, In error or canceled request can be sent
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        public List<NpceOutOperationResultDTO> PostelConfirmSend (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = PostelConfirmSendWithHttpInfo(requestIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call confirm the send of one or more requests Forwarded, In error or canceled request can be sent
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public ApiResponse< List<NpceOutOperationResultDTO> > PostelConfirmSendWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelConfirmSend");

            var localVarPath = "./api/Postel/ConfirmSend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelConfirmSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call confirm the send of one or more requests Forwarded, In error or canceled request can be sent
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelConfirmSendAsync (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = await PostelConfirmSendAsyncWithHttpInfo(requestIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call confirm the send of one or more requests Forwarded, In error or canceled request can be sent
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelConfirmSendAsyncWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelConfirmSend");

            var localVarPath = "./api/Postel/ConfirmSend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelConfirmSend", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call deletes the logs related to a specific request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns></returns>
        public void PostelDeleteLogs (int? requestId)
        {
             PostelDeleteLogsWithHttpInfo(requestId);
        }

        /// <summary>
        /// This call deletes the logs related to a specific request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostelDeleteLogsWithHttpInfo (int? requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelDeleteLogs");

            var localVarPath = "./api/Postel/DeleteLogs/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelDeleteLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes the logs related to a specific request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostelDeleteLogsAsync (int? requestId)
        {
             await PostelDeleteLogsAsyncWithHttpInfo(requestId);

        }

        /// <summary>
        /// This call deletes the logs related to a specific request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostelDeleteLogsAsyncWithHttpInfo (int? requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelDeleteLogs");

            var localVarPath = "./api/Postel/DeleteLogs/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelDeleteLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call deletes permanently one or more request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        public List<NpceOutOperationResultDTO> PostelDeleteRequests (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = PostelDeleteRequestsWithHttpInfo(requestIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call deletes permanently one or more request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public ApiResponse< List<NpceOutOperationResultDTO> > PostelDeleteRequestsWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelDeleteRequests");

            var localVarPath = "./api/Postel/DeleteRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelDeleteRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call deletes permanently one or more request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelDeleteRequestsAsync (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = await PostelDeleteRequestsAsyncWithHttpInfo(requestIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call deletes permanently one or more request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelDeleteRequestsAsyncWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelDeleteRequests");

            var localVarPath = "./api/Postel/DeleteRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelDeleteRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call forward a specified npce entry to multiple recipients 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutForward"></param>
        /// <returns>List&lt;NpceOutDTO&gt;</returns>
        public List<NpceOutDTO> PostelForwardRequest (NpceOutForwardDTO npceOutForward)
        {
             ApiResponse<List<NpceOutDTO>> localVarResponse = PostelForwardRequestWithHttpInfo(npceOutForward);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call forward a specified npce entry to multiple recipients 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutForward"></param>
        /// <returns>ApiResponse of List&lt;NpceOutDTO&gt;</returns>
        public ApiResponse< List<NpceOutDTO> > PostelForwardRequestWithHttpInfo (NpceOutForwardDTO npceOutForward)
        {
            // verify the required parameter 'npceOutForward' is set
            if (npceOutForward == null)
                throw new ApiException(400, "Missing required parameter 'npceOutForward' when calling PostelApi->PostelForwardRequest");

            var localVarPath = "./api/Postel/ForwardRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (npceOutForward != null && npceOutForward.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(npceOutForward); // http body (model) parameter
            }
            else
            {
                localVarPostBody = npceOutForward; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelForwardRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutDTO>)));
        }

        /// <summary>
        /// This call forward a specified npce entry to multiple recipients 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutForward"></param>
        /// <returns>Task of List&lt;NpceOutDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutDTO>> PostelForwardRequestAsync (NpceOutForwardDTO npceOutForward)
        {
             ApiResponse<List<NpceOutDTO>> localVarResponse = await PostelForwardRequestAsyncWithHttpInfo(npceOutForward);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call forward a specified npce entry to multiple recipients 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutForward"></param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutDTO>>> PostelForwardRequestAsyncWithHttpInfo (NpceOutForwardDTO npceOutForward)
        {
            // verify the required parameter 'npceOutForward' is set
            if (npceOutForward == null)
                throw new ApiException(400, "Missing required parameter 'npceOutForward' when calling PostelApi->PostelForwardRequest");

            var localVarPath = "./api/Postel/ForwardRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (npceOutForward != null && npceOutForward.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(npceOutForward); // http body (model) parameter
            }
            else
            {
                localVarPostBody = npceOutForward; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelForwardRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutDTO>)));
        }

        /// <summary>
        /// This call returns the Postel Default Sender information 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PostelDefaultSenderInfoDTO</returns>
        public PostelDefaultSenderInfoDTO PostelGetDefaultSenderInfo ()
        {
             ApiResponse<PostelDefaultSenderInfoDTO> localVarResponse = PostelGetDefaultSenderInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the Postel Default Sender information 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PostelDefaultSenderInfoDTO</returns>
        public ApiResponse< PostelDefaultSenderInfoDTO > PostelGetDefaultSenderInfoWithHttpInfo ()
        {

            var localVarPath = "./api/Postel/DefaultSenderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetDefaultSenderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostelDefaultSenderInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostelDefaultSenderInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostelDefaultSenderInfoDTO)));
        }

        /// <summary>
        /// This call returns the Postel Default Sender information 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PostelDefaultSenderInfoDTO</returns>
        public async System.Threading.Tasks.Task<PostelDefaultSenderInfoDTO> PostelGetDefaultSenderInfoAsync ()
        {
             ApiResponse<PostelDefaultSenderInfoDTO> localVarResponse = await PostelGetDefaultSenderInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the Postel Default Sender information 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PostelDefaultSenderInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostelDefaultSenderInfoDTO>> PostelGetDefaultSenderInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/Postel/DefaultSenderInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetDefaultSenderInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostelDefaultSenderInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostelDefaultSenderInfoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostelDefaultSenderInfoDTO)));
        }

        /// <summary>
        /// This call gets the logs related to a specific request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>List&lt;NpceLogDTO&gt;</returns>
        public List<NpceLogDTO> PostelGetLogs (int? requestId)
        {
             ApiResponse<List<NpceLogDTO>> localVarResponse = PostelGetLogsWithHttpInfo(requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the logs related to a specific request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>ApiResponse of List&lt;NpceLogDTO&gt;</returns>
        public ApiResponse< List<NpceLogDTO> > PostelGetLogsWithHttpInfo (int? requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelGetLogs");

            var localVarPath = "./api/Postel/GetLogs/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceLogDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceLogDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceLogDTO>)));
        }

        /// <summary>
        /// This call gets the logs related to a specific request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of List&lt;NpceLogDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceLogDTO>> PostelGetLogsAsync (int? requestId)
        {
             ApiResponse<List<NpceLogDTO>> localVarResponse = await PostelGetLogsAsyncWithHttpInfo(requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the logs related to a specific request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of ApiResponse (List&lt;NpceLogDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceLogDTO>>> PostelGetLogsAsyncWithHttpInfo (int? requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelGetLogs");

            var localVarPath = "./api/Postel/GetLogs/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceLogDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceLogDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceLogDTO>)));
        }

        /// <summary>
        /// This call gets a specific request by its ID 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>NpceOutDTO</returns>
        public NpceOutDTO PostelGetRequestById (int? requestId)
        {
             ApiResponse<NpceOutDTO> localVarResponse = PostelGetRequestByIdWithHttpInfo(requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets a specific request by its ID 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        public ApiResponse< NpceOutDTO > PostelGetRequestByIdWithHttpInfo (int? requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelGetRequestById");

            var localVarPath = "./api/Postel/Request/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetRequestById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call gets a specific request by its ID 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>Task of NpceOutDTO</returns>
        public async System.Threading.Tasks.Task<NpceOutDTO> PostelGetRequestByIdAsync (int? requestId)
        {
             ApiResponse<NpceOutDTO> localVarResponse = await PostelGetRequestByIdAsyncWithHttpInfo(requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets a specific request by its ID 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelGetRequestByIdAsyncWithHttpInfo (int? requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelGetRequestById");

            var localVarPath = "./api/Postel/Request/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetRequestById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call gets the non deleted requests in a given state 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <returns>List&lt;NpceOutDTO&gt;</returns>
        public List<NpceOutDTO> PostelGetRequestsByState (int? state)
        {
             ApiResponse<List<NpceOutDTO>> localVarResponse = PostelGetRequestsByStateWithHttpInfo(state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the non deleted requests in a given state 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <returns>ApiResponse of List&lt;NpceOutDTO&gt;</returns>
        public ApiResponse< List<NpceOutDTO> > PostelGetRequestsByStateWithHttpInfo (int? state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling PostelApi->PostelGetRequestsByState");

            var localVarPath = "./api/Postel/ByState/{state}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetRequestsByState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutDTO>)));
        }

        /// <summary>
        /// This call gets the non deleted requests in a given state 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <returns>Task of List&lt;NpceOutDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutDTO>> PostelGetRequestsByStateAsync (int? state)
        {
             ApiResponse<List<NpceOutDTO>> localVarResponse = await PostelGetRequestsByStateAsyncWithHttpInfo(state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the non deleted requests in a given state 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutDTO>>> PostelGetRequestsByStateAsyncWithHttpInfo (int? state)
        {
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling PostelApi->PostelGetRequestsByState");

            var localVarPath = "./api/Postel/ByState/{state}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarPathParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetRequestsByState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutDTO>)));
        }

        /// <summary>
        /// This call gets the list of requests in a grouped state 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupedState">Possible values:  0: ToSend  1: Processing  2: ToBeConfirmed  3: Sent  4: InDelivery  5: Delivered  6: ProcessingError  7: SendError  8: DeliveryError  9: Aborted  10: Deleted </param>
        /// <returns>List&lt;NpceOutDTO&gt;</returns>
        public List<NpceOutDTO> PostelGetRequestsStates (int? groupedState)
        {
             ApiResponse<List<NpceOutDTO>> localVarResponse = PostelGetRequestsStatesWithHttpInfo(groupedState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the list of requests in a grouped state 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupedState">Possible values:  0: ToSend  1: Processing  2: ToBeConfirmed  3: Sent  4: InDelivery  5: Delivered  6: ProcessingError  7: SendError  8: DeliveryError  9: Aborted  10: Deleted </param>
        /// <returns>ApiResponse of List&lt;NpceOutDTO&gt;</returns>
        public ApiResponse< List<NpceOutDTO> > PostelGetRequestsStatesWithHttpInfo (int? groupedState)
        {
            // verify the required parameter 'groupedState' is set
            if (groupedState == null)
                throw new ApiException(400, "Missing required parameter 'groupedState' when calling PostelApi->PostelGetRequestsStates");

            var localVarPath = "./api/Postel/ByGroupedState/{groupedState}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupedState != null) localVarPathParams.Add("groupedState", this.Configuration.ApiClient.ParameterToString(groupedState)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetRequestsStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutDTO>)));
        }

        /// <summary>
        /// This call gets the list of requests in a grouped state 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupedState">Possible values:  0: ToSend  1: Processing  2: ToBeConfirmed  3: Sent  4: InDelivery  5: Delivered  6: ProcessingError  7: SendError  8: DeliveryError  9: Aborted  10: Deleted </param>
        /// <returns>Task of List&lt;NpceOutDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutDTO>> PostelGetRequestsStatesAsync (int? groupedState)
        {
             ApiResponse<List<NpceOutDTO>> localVarResponse = await PostelGetRequestsStatesAsyncWithHttpInfo(groupedState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the list of requests in a grouped state 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupedState">Possible values:  0: ToSend  1: Processing  2: ToBeConfirmed  3: Sent  4: InDelivery  5: Delivered  6: ProcessingError  7: SendError  8: DeliveryError  9: Aborted  10: Deleted </param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutDTO>>> PostelGetRequestsStatesAsyncWithHttpInfo (int? groupedState)
        {
            // verify the required parameter 'groupedState' is set
            if (groupedState == null)
                throw new ApiException(400, "Missing required parameter 'groupedState' when calling PostelApi->PostelGetRequestsStates");

            var localVarPath = "./api/Postel/ByGroupedState/{groupedState}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupedState != null) localVarPathParams.Add("groupedState", this.Configuration.ApiClient.ParameterToString(groupedState)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetRequestsStates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutDTO>)));
        }

        /// <summary>
        /// This call gets the list of the suggested addresses for a request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>List&lt;NpceOutPartyDTO&gt;</returns>
        public List<NpceOutPartyDTO> PostelGetSuggestedAddresses (int? requestId)
        {
             ApiResponse<List<NpceOutPartyDTO>> localVarResponse = PostelGetSuggestedAddressesWithHttpInfo(requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the list of the suggested addresses for a request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>ApiResponse of List&lt;NpceOutPartyDTO&gt;</returns>
        public ApiResponse< List<NpceOutPartyDTO> > PostelGetSuggestedAddressesWithHttpInfo (int? requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelGetSuggestedAddresses");

            var localVarPath = "./api/Postel/SuggestedAddresses/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetSuggestedAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutPartyDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutPartyDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutPartyDTO>)));
        }

        /// <summary>
        /// This call gets the list of the suggested addresses for a request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of List&lt;NpceOutPartyDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutPartyDTO>> PostelGetSuggestedAddressesAsync (int? requestId)
        {
             ApiResponse<List<NpceOutPartyDTO>> localVarResponse = await PostelGetSuggestedAddressesAsyncWithHttpInfo(requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the list of the suggested addresses for a request 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutPartyDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutPartyDTO>>> PostelGetSuggestedAddressesAsyncWithHttpInfo (int? requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelGetSuggestedAddresses");

            var localVarPath = "./api/Postel/SuggestedAddresses/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetSuggestedAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutPartyDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutPartyDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutPartyDTO>)));
        }

        /// <summary>
        /// This call gets the request summary 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>NpceSummaryDTO</returns>
        public NpceSummaryDTO PostelGetSummary ()
        {
             ApiResponse<NpceSummaryDTO> localVarResponse = PostelGetSummaryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call gets the request summary 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of NpceSummaryDTO</returns>
        public ApiResponse< NpceSummaryDTO > PostelGetSummaryWithHttpInfo ()
        {

            var localVarPath = "./api/Postel/Summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceSummaryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceSummaryDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceSummaryDTO)));
        }

        /// <summary>
        /// This call gets the request summary 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NpceSummaryDTO</returns>
        public async System.Threading.Tasks.Task<NpceSummaryDTO> PostelGetSummaryAsync ()
        {
             ApiResponse<NpceSummaryDTO> localVarResponse = await PostelGetSummaryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call gets the request summary 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NpceSummaryDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NpceSummaryDTO>> PostelGetSummaryAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/Postel/Summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelGetSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceSummaryDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceSummaryDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceSummaryDTO)));
        }

        /// <summary>
        /// This call inserts a log 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="log">The log</param>
        /// <returns></returns>
        public void PostelInsertLog (NpceLogDTO log)
        {
             PostelInsertLogWithHttpInfo(log);
        }

        /// <summary>
        /// This call inserts a log 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="log">The log</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostelInsertLogWithHttpInfo (NpceLogDTO log)
        {
            // verify the required parameter 'log' is set
            if (log == null)
                throw new ApiException(400, "Missing required parameter 'log' when calling PostelApi->PostelInsertLog");

            var localVarPath = "./api/Postel/InsertLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (log != null && log.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(log); // http body (model) parameter
            }
            else
            {
                localVarPostBody = log; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelInsertLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts a log 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="log">The log</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostelInsertLogAsync (NpceLogDTO log)
        {
             await PostelInsertLogAsyncWithHttpInfo(log);

        }

        /// <summary>
        /// This call inserts a log 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="log">The log</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostelInsertLogAsyncWithHttpInfo (NpceLogDTO log)
        {
            // verify the required parameter 'log' is set
            if (log == null)
                throw new ApiException(400, "Missing required parameter 'log' when calling PostelApi->PostelInsertLog");

            var localVarPath = "./api/Postel/InsertLog";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (log != null && log.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(log); // http body (model) parameter
            }
            else
            {
                localVarPostBody = log; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelInsertLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call inserts a list of requests 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutInsert"></param>
        /// <returns>List&lt;NpceOutInsertResultDTO&gt;</returns>
        public List<NpceOutInsertResultDTO> PostelInsertRequests (NpceOutInsertDTO npceOutInsert)
        {
             ApiResponse<List<NpceOutInsertResultDTO>> localVarResponse = PostelInsertRequestsWithHttpInfo(npceOutInsert);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts a list of requests 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutInsert"></param>
        /// <returns>ApiResponse of List&lt;NpceOutInsertResultDTO&gt;</returns>
        public ApiResponse< List<NpceOutInsertResultDTO> > PostelInsertRequestsWithHttpInfo (NpceOutInsertDTO npceOutInsert)
        {
            // verify the required parameter 'npceOutInsert' is set
            if (npceOutInsert == null)
                throw new ApiException(400, "Missing required parameter 'npceOutInsert' when calling PostelApi->PostelInsertRequests");

            var localVarPath = "./api/Postel/InsertRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (npceOutInsert != null && npceOutInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(npceOutInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = npceOutInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelInsertRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutInsertResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutInsertResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutInsertResultDTO>)));
        }

        /// <summary>
        /// This call inserts a list of requests 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutInsert"></param>
        /// <returns>Task of List&lt;NpceOutInsertResultDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutInsertResultDTO>> PostelInsertRequestsAsync (NpceOutInsertDTO npceOutInsert)
        {
             ApiResponse<List<NpceOutInsertResultDTO>> localVarResponse = await PostelInsertRequestsAsyncWithHttpInfo(npceOutInsert);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts a list of requests 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="npceOutInsert"></param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutInsertResultDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutInsertResultDTO>>> PostelInsertRequestsAsyncWithHttpInfo (NpceOutInsertDTO npceOutInsert)
        {
            // verify the required parameter 'npceOutInsert' is set
            if (npceOutInsert == null)
                throw new ApiException(400, "Missing required parameter 'npceOutInsert' when calling PostelApi->PostelInsertRequests");

            var localVarPath = "./api/Postel/InsertRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (npceOutInsert != null && npceOutInsert.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(npceOutInsert); // http body (model) parameter
            }
            else
            {
                localVarPostBody = npceOutInsert; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelInsertRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutInsertResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutInsertResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutInsertResultDTO>)));
        }

        /// <summary>
        /// This call moves one or more requests to the trash bin 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        public List<NpceOutOperationResultDTO> PostelMoveToTrashRequests (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = PostelMoveToTrashRequestsWithHttpInfo(requestIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call moves one or more requests to the trash bin 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public ApiResponse< List<NpceOutOperationResultDTO> > PostelMoveToTrashRequestsWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelMoveToTrashRequests");

            var localVarPath = "./api/Postel/MoveToTrashRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelMoveToTrashRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call moves one or more requests to the trash bin 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelMoveToTrashRequestsAsync (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = await PostelMoveToTrashRequestsAsyncWithHttpInfo(requestIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call moves one or more requests to the trash bin 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelMoveToTrashRequestsAsyncWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelMoveToTrashRequests");

            var localVarPath = "./api/Postel/MoveToTrashRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelMoveToTrashRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call restores one or more requests from the trash bin 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>List&lt;NpceOutOperationResultDTO&gt;</returns>
        public List<NpceOutOperationResultDTO> PostelRestoreFromTrashRequests (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = PostelRestoreFromTrashRequestsWithHttpInfo(requestIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call restores one or more requests from the trash bin 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>ApiResponse of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public ApiResponse< List<NpceOutOperationResultDTO> > PostelRestoreFromTrashRequestsWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelRestoreFromTrashRequests");

            var localVarPath = "./api/Postel/RestoreFromTrashRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelRestoreFromTrashRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call restores one or more requests from the trash bin 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of List&lt;NpceOutOperationResultDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NpceOutOperationResultDTO>> PostelRestoreFromTrashRequestsAsync (List<int?> requestIds)
        {
             ApiResponse<List<NpceOutOperationResultDTO>> localVarResponse = await PostelRestoreFromTrashRequestsAsyncWithHttpInfo(requestIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call restores one or more requests from the trash bin 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestIds">The request ids</param>
        /// <returns>Task of ApiResponse (List&lt;NpceOutOperationResultDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NpceOutOperationResultDTO>>> PostelRestoreFromTrashRequestsAsyncWithHttpInfo (List<int?> requestIds)
        {
            // verify the required parameter 'requestIds' is set
            if (requestIds == null)
                throw new ApiException(400, "Missing required parameter 'requestIds' when calling PostelApi->PostelRestoreFromTrashRequests");

            var localVarPath = "./api/Postel/RestoreFromTrashRequests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestIds != null && requestIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestIds; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelRestoreFromTrashRequests", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NpceOutOperationResultDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<NpceOutOperationResultDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NpceOutOperationResultDTO>)));
        }

        /// <summary>
        /// This call updates the tracking data 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>NpceOutDTO</returns>
        public NpceOutDTO PostelUpdateRegisteredTracking (int? id, int? state, NpceRegisteredTrackingDTO trackingDTO)
        {
             ApiResponse<NpceOutDTO> localVarResponse = PostelUpdateRegisteredTrackingWithHttpInfo(id, state, trackingDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates the tracking data 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        public ApiResponse< NpceOutDTO > PostelUpdateRegisteredTrackingWithHttpInfo (int? id, int? state, NpceRegisteredTrackingDTO trackingDTO)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PostelApi->PostelUpdateRegisteredTracking");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling PostelApi->PostelUpdateRegisteredTracking");
            // verify the required parameter 'trackingDTO' is set
            if (trackingDTO == null)
                throw new ApiException(400, "Missing required parameter 'trackingDTO' when calling PostelApi->PostelUpdateRegisteredTracking");

            var localVarPath = "./api/Postel/UpdateRegisteredTracking/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (trackingDTO != null && trackingDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trackingDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trackingDTO; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelUpdateRegisteredTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call updates the tracking data 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>Task of NpceOutDTO</returns>
        public async System.Threading.Tasks.Task<NpceOutDTO> PostelUpdateRegisteredTrackingAsync (int? id, int? state, NpceRegisteredTrackingDTO trackingDTO)
        {
             ApiResponse<NpceOutDTO> localVarResponse = await PostelUpdateRegisteredTrackingAsyncWithHttpInfo(id, state, trackingDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates the tracking data 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelUpdateRegisteredTrackingAsyncWithHttpInfo (int? id, int? state, NpceRegisteredTrackingDTO trackingDTO)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PostelApi->PostelUpdateRegisteredTracking");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling PostelApi->PostelUpdateRegisteredTracking");
            // verify the required parameter 'trackingDTO' is set
            if (trackingDTO == null)
                throw new ApiException(400, "Missing required parameter 'trackingDTO' when calling PostelApi->PostelUpdateRegisteredTracking");

            var localVarPath = "./api/Postel/UpdateRegisteredTracking/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (trackingDTO != null && trackingDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trackingDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trackingDTO; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelUpdateRegisteredTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call updates the request fields 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>NpceOutDTO</returns>
        public NpceOutDTO PostelUpdateRequestFields (int? requestId, NpceOutUpdateDTO requestFields)
        {
             ApiResponse<NpceOutDTO> localVarResponse = PostelUpdateRequestFieldsWithHttpInfo(requestId, requestFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates the request fields 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        public ApiResponse< NpceOutDTO > PostelUpdateRequestFieldsWithHttpInfo (int? requestId, NpceOutUpdateDTO requestFields)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelUpdateRequestFields");
            // verify the required parameter 'requestFields' is set
            if (requestFields == null)
                throw new ApiException(400, "Missing required parameter 'requestFields' when calling PostelApi->PostelUpdateRequestFields");

            var localVarPath = "./api/Postel/UpdateFields/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (requestFields != null && requestFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestFields; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelUpdateRequestFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call updates the request fields 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>Task of NpceOutDTO</returns>
        public async System.Threading.Tasks.Task<NpceOutDTO> PostelUpdateRequestFieldsAsync (int? requestId, NpceOutUpdateDTO requestFields)
        {
             ApiResponse<NpceOutDTO> localVarResponse = await PostelUpdateRequestFieldsAsyncWithHttpInfo(requestId, requestFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates the request fields 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelUpdateRequestFieldsAsyncWithHttpInfo (int? requestId, NpceOutUpdateDTO requestFields)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelUpdateRequestFields");
            // verify the required parameter 'requestFields' is set
            if (requestFields == null)
                throw new ApiException(400, "Missing required parameter 'requestFields' when calling PostelApi->PostelUpdateRequestFields");

            var localVarPath = "./api/Postel/UpdateFields/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (requestFields != null && requestFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestFields; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelUpdateRequestFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call updates the request fields 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>NpceOutDTO</returns>
        public NpceOutDTO PostelUpdateShipping (int? requestId, NpceOutUpdateShippingDTO requestFields)
        {
             ApiResponse<NpceOutDTO> localVarResponse = PostelUpdateShippingWithHttpInfo(requestId, requestFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates the request fields 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        public ApiResponse< NpceOutDTO > PostelUpdateShippingWithHttpInfo (int? requestId, NpceOutUpdateShippingDTO requestFields)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelUpdateShipping");
            // verify the required parameter 'requestFields' is set
            if (requestFields == null)
                throw new ApiException(400, "Missing required parameter 'requestFields' when calling PostelApi->PostelUpdateShipping");

            var localVarPath = "./api/Postel/UpdateShipping/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (requestFields != null && requestFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestFields; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelUpdateShipping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call updates the request fields 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>Task of NpceOutDTO</returns>
        public async System.Threading.Tasks.Task<NpceOutDTO> PostelUpdateShippingAsync (int? requestId, NpceOutUpdateShippingDTO requestFields)
        {
             ApiResponse<NpceOutDTO> localVarResponse = await PostelUpdateShippingAsyncWithHttpInfo(requestId, requestFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates the request fields 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The request id</param>
        /// <param name="requestFields">The request fields</param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelUpdateShippingAsyncWithHttpInfo (int? requestId, NpceOutUpdateShippingDTO requestFields)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling PostelApi->PostelUpdateShipping");
            // verify the required parameter 'requestFields' is set
            if (requestFields == null)
                throw new ApiException(400, "Missing required parameter 'requestFields' when calling PostelApi->PostelUpdateShipping");

            var localVarPath = "./api/Postel/UpdateShipping/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (requestFields != null && requestFields.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestFields); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestFields; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelUpdateShipping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call updates the tracking data 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>NpceOutDTO</returns>
        public NpceOutDTO PostelUpdateTracking (int? id, int? state, NpceTrackingDTO trackingDTO)
        {
             ApiResponse<NpceOutDTO> localVarResponse = PostelUpdateTrackingWithHttpInfo(id, state, trackingDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates the tracking data 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>ApiResponse of NpceOutDTO</returns>
        public ApiResponse< NpceOutDTO > PostelUpdateTrackingWithHttpInfo (int? id, int? state, NpceTrackingDTO trackingDTO)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PostelApi->PostelUpdateTracking");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling PostelApi->PostelUpdateTracking");
            // verify the required parameter 'trackingDTO' is set
            if (trackingDTO == null)
                throw new ApiException(400, "Missing required parameter 'trackingDTO' when calling PostelApi->PostelUpdateTracking");

            var localVarPath = "./api/Postel/UpdateTracking/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (trackingDTO != null && trackingDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trackingDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trackingDTO; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelUpdateTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

        /// <summary>
        /// This call updates the tracking data 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>Task of NpceOutDTO</returns>
        public async System.Threading.Tasks.Task<NpceOutDTO> PostelUpdateTrackingAsync (int? id, int? state, NpceTrackingDTO trackingDTO)
        {
             ApiResponse<NpceOutDTO> localVarResponse = await PostelUpdateTrackingAsyncWithHttpInfo(id, state, trackingDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates the tracking data 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The NpceOut id</param>
        /// <param name="state">Possible values:  0: Forwarded  1: PreCheck  2: IdRequest  3: AddressVerify  4: PreConfirm  5: ShippingToBeConfirmed  6: Confirmation  7: GenericError  8: CancellationRequest  9: RequestCancelled  10: Shipped  11: PreCheckError  12: RequestIdError  13: AddressVerifyError  14: PreConfirmationError  15: ConfirmationError  16: InDelivery  17: Delivered  18: DeliveryError </param>
        /// <param name="trackingDTO">The tracking data to update</param>
        /// <returns>Task of ApiResponse (NpceOutDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NpceOutDTO>> PostelUpdateTrackingAsyncWithHttpInfo (int? id, int? state, NpceTrackingDTO trackingDTO)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PostelApi->PostelUpdateTracking");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling PostelApi->PostelUpdateTracking");
            // verify the required parameter 'trackingDTO' is set
            if (trackingDTO == null)
                throw new ApiException(400, "Missing required parameter 'trackingDTO' when calling PostelApi->PostelUpdateTracking");

            var localVarPath = "./api/Postel/UpdateTracking/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (trackingDTO != null && trackingDTO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(trackingDTO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = trackingDTO; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostelUpdateTracking", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NpceOutDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (NpceOutDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NpceOutDTO)));
        }

    }
}
