/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ARXivarNEXT.Client.Client;
using ARXivarNEXT.Client.Model;

namespace ARXivarNEXT.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkflowEventsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call removes a workflow event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Identifier of workflow event</param>
        /// <returns></returns>
        void WorkflowEventsDeleteEvent (string eventId);

        /// <summary>
        /// This call removes a workflow event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Identifier of workflow event</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkflowEventsDeleteEventWithHttpInfo (string eventId);
        /// <summary>
        /// Use this call to get the filters in all the event context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventFiltersContextDTO&gt;</returns>
        List<EventFiltersContextDTO> WorkflowEventsGetContextFilters ();

        /// <summary>
        /// Use this call to get the filters in all the event context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventFiltersContextDTO&gt;</returns>
        ApiResponse<List<EventFiltersContextDTO>> WorkflowEventsGetContextFiltersWithHttpInfo ();
        /// <summary>
        /// Use this call to get the filters in for a specific event context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </param>
        /// <returns>EventFiltersContextDTO</returns>
        EventFiltersContextDTO WorkflowEventsGetContextFilters_0 (int? context);

        /// <summary>
        /// Use this call to get the filters in for a specific event context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </param>
        /// <returns>ApiResponse of EventFiltersContextDTO</returns>
        ApiResponse<EventFiltersContextDTO> WorkflowEventsGetContextFilters_0WithHttpInfo (int? context);
        /// <summary>
        /// This call retrieves a specific V2 event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>WorkFlowSavedEventDTO</returns>
        WorkFlowSavedEventDTO WorkflowEventsGetEventConfiguration (string eventId);

        /// <summary>
        /// This call retrieves a specific V2 event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of WorkFlowSavedEventDTO</returns>
        ApiResponse<WorkFlowSavedEventDTO> WorkflowEventsGetEventConfigurationWithHttpInfo (string eventId);
        /// <summary>
        /// Use this call to get the delete status of the event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>WorkflowSavedEventStatusDTO</returns>
        WorkflowSavedEventStatusDTO WorkflowEventsGetEventDeleteStatus (string eventId);

        /// <summary>
        /// Use this call to get the delete status of the event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of WorkflowSavedEventStatusDTO</returns>
        ApiResponse<WorkflowSavedEventStatusDTO> WorkflowEventsGetEventDeleteStatusWithHttpInfo (string eventId);
        /// <summary>
        /// Use this call to get the edit status of the event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>WorkflowSavedEventStatusDTO</returns>
        WorkflowSavedEventStatusDTO WorkflowEventsGetEventEditStatus (string eventId);

        /// <summary>
        /// Use this call to get the edit status of the event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of WorkflowSavedEventStatusDTO</returns>
        ApiResponse<WorkflowSavedEventStatusDTO> WorkflowEventsGetEventEditStatusWithHttpInfo (string eventId);
        /// <summary>
        /// This call retrieves all the V2 events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkFlowSavedEventDTO&gt;</returns>
        List<WorkFlowSavedEventDTO> WorkflowEventsGetEventList ();

        /// <summary>
        /// This call retrieves all the V2 events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkFlowSavedEventDTO&gt;</returns>
        ApiResponse<List<WorkFlowSavedEventDTO>> WorkflowEventsGetEventListWithHttpInfo ();
        /// <summary>
        /// This call saves an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>WorkFlowSavedEventDTO</returns>
        WorkFlowSavedEventDTO WorkflowEventsSaveEvent (WorkFlowSaveEventDTO eventconfiguration = null);

        /// <summary>
        /// This call saves an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>ApiResponse of WorkFlowSavedEventDTO</returns>
        ApiResponse<WorkFlowSavedEventDTO> WorkflowEventsSaveEventWithHttpInfo (WorkFlowSaveEventDTO eventconfiguration = null);
        /// <summary>
        /// This call updates an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>WorkFlowSavedEventDTO</returns>
        WorkFlowSavedEventDTO WorkflowEventsUpdateEvent (WorkFlowSavedEventDTO eventconfiguration = null);

        /// <summary>
        /// This call updates an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>ApiResponse of WorkFlowSavedEventDTO</returns>
        ApiResponse<WorkFlowSavedEventDTO> WorkflowEventsUpdateEventWithHttpInfo (WorkFlowSavedEventDTO eventconfiguration = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call removes a workflow event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Identifier of workflow event</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkflowEventsDeleteEventAsync (string eventId);

        /// <summary>
        /// This call removes a workflow event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Identifier of workflow event</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowEventsDeleteEventAsyncWithHttpInfo (string eventId);
        /// <summary>
        /// Use this call to get the filters in all the event context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventFiltersContextDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EventFiltersContextDTO>> WorkflowEventsGetContextFiltersAsync ();

        /// <summary>
        /// Use this call to get the filters in all the event context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventFiltersContextDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EventFiltersContextDTO>>> WorkflowEventsGetContextFiltersAsyncWithHttpInfo ();
        /// <summary>
        /// Use this call to get the filters in for a specific event context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </param>
        /// <returns>Task of EventFiltersContextDTO</returns>
        System.Threading.Tasks.Task<EventFiltersContextDTO> WorkflowEventsGetContextFilters_0Async (int? context);

        /// <summary>
        /// Use this call to get the filters in for a specific event context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </param>
        /// <returns>Task of ApiResponse (EventFiltersContextDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EventFiltersContextDTO>> WorkflowEventsGetContextFilters_0AsyncWithHttpInfo (int? context);
        /// <summary>
        /// This call retrieves a specific V2 event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of WorkFlowSavedEventDTO</returns>
        System.Threading.Tasks.Task<WorkFlowSavedEventDTO> WorkflowEventsGetEventConfigurationAsync (string eventId);

        /// <summary>
        /// This call retrieves a specific V2 event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse (WorkFlowSavedEventDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkFlowSavedEventDTO>> WorkflowEventsGetEventConfigurationAsyncWithHttpInfo (string eventId);
        /// <summary>
        /// Use this call to get the delete status of the event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of WorkflowSavedEventStatusDTO</returns>
        System.Threading.Tasks.Task<WorkflowSavedEventStatusDTO> WorkflowEventsGetEventDeleteStatusAsync (string eventId);

        /// <summary>
        /// Use this call to get the delete status of the event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse (WorkflowSavedEventStatusDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowSavedEventStatusDTO>> WorkflowEventsGetEventDeleteStatusAsyncWithHttpInfo (string eventId);
        /// <summary>
        /// Use this call to get the edit status of the event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of WorkflowSavedEventStatusDTO</returns>
        System.Threading.Tasks.Task<WorkflowSavedEventStatusDTO> WorkflowEventsGetEventEditStatusAsync (string eventId);

        /// <summary>
        /// Use this call to get the edit status of the event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse (WorkflowSavedEventStatusDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkflowSavedEventStatusDTO>> WorkflowEventsGetEventEditStatusAsyncWithHttpInfo (string eventId);
        /// <summary>
        /// This call retrieves all the V2 events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WorkFlowSavedEventDTO&gt;</returns>
        System.Threading.Tasks.Task<List<WorkFlowSavedEventDTO>> WorkflowEventsGetEventListAsync ();

        /// <summary>
        /// This call retrieves all the V2 events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowSavedEventDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WorkFlowSavedEventDTO>>> WorkflowEventsGetEventListAsyncWithHttpInfo ();
        /// <summary>
        /// This call saves an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>Task of WorkFlowSavedEventDTO</returns>
        System.Threading.Tasks.Task<WorkFlowSavedEventDTO> WorkflowEventsSaveEventAsync (WorkFlowSaveEventDTO eventconfiguration = null);

        /// <summary>
        /// This call saves an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkFlowSavedEventDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkFlowSavedEventDTO>> WorkflowEventsSaveEventAsyncWithHttpInfo (WorkFlowSaveEventDTO eventconfiguration = null);
        /// <summary>
        /// This call updates an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>Task of WorkFlowSavedEventDTO</returns>
        System.Threading.Tasks.Task<WorkFlowSavedEventDTO> WorkflowEventsUpdateEventAsync (WorkFlowSavedEventDTO eventconfiguration = null);

        /// <summary>
        /// This call updates an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkFlowSavedEventDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<WorkFlowSavedEventDTO>> WorkflowEventsUpdateEventAsyncWithHttpInfo (WorkFlowSavedEventDTO eventconfiguration = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkflowEventsApi : IWorkflowEventsApi
    {
        private ARXivarNEXT.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkflowEventsApi(String basePath)
        {
            this.Configuration = new ARXivarNEXT.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowEventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkflowEventsApi(ARXivarNEXT.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ARXivarNEXT.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ARXivarNEXT.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ARXivarNEXT.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call removes a workflow event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Identifier of workflow event</param>
        /// <returns></returns>
        public void WorkflowEventsDeleteEvent (string eventId)
        {
             WorkflowEventsDeleteEventWithHttpInfo(eventId);
        }

        /// <summary>
        /// This call removes a workflow event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Identifier of workflow event</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkflowEventsDeleteEventWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling WorkflowEventsApi->WorkflowEventsDeleteEvent");

            var localVarPath = "./api/WorkflowEvents/event/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsDeleteEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call removes a workflow event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Identifier of workflow event</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkflowEventsDeleteEventAsync (string eventId)
        {
             await WorkflowEventsDeleteEventAsyncWithHttpInfo(eventId);

        }

        /// <summary>
        /// This call removes a workflow event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">Identifier of workflow event</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkflowEventsDeleteEventAsyncWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling WorkflowEventsApi->WorkflowEventsDeleteEvent");

            var localVarPath = "./api/WorkflowEvents/event/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsDeleteEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Use this call to get the filters in all the event context 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;EventFiltersContextDTO&gt;</returns>
        public List<EventFiltersContextDTO> WorkflowEventsGetContextFilters ()
        {
             ApiResponse<List<EventFiltersContextDTO>> localVarResponse = WorkflowEventsGetContextFiltersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this call to get the filters in all the event context 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;EventFiltersContextDTO&gt;</returns>
        public ApiResponse< List<EventFiltersContextDTO> > WorkflowEventsGetContextFiltersWithHttpInfo ()
        {

            var localVarPath = "./api/WorkflowEvents/event/all-context-filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetContextFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventFiltersContextDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EventFiltersContextDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventFiltersContextDTO>)));
        }

        /// <summary>
        /// Use this call to get the filters in all the event context 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;EventFiltersContextDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EventFiltersContextDTO>> WorkflowEventsGetContextFiltersAsync ()
        {
             ApiResponse<List<EventFiltersContextDTO>> localVarResponse = await WorkflowEventsGetContextFiltersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this call to get the filters in all the event context 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;EventFiltersContextDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EventFiltersContextDTO>>> WorkflowEventsGetContextFiltersAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/WorkflowEvents/event/all-context-filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetContextFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EventFiltersContextDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<EventFiltersContextDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EventFiltersContextDTO>)));
        }

        /// <summary>
        /// Use this call to get the filters in for a specific event context 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </param>
        /// <returns>EventFiltersContextDTO</returns>
        public EventFiltersContextDTO WorkflowEventsGetContextFilters_0 (int? context)
        {
             ApiResponse<EventFiltersContextDTO> localVarResponse = WorkflowEventsGetContextFilters_0WithHttpInfo(context);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this call to get the filters in for a specific event context 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </param>
        /// <returns>ApiResponse of EventFiltersContextDTO</returns>
        public ApiResponse< EventFiltersContextDTO > WorkflowEventsGetContextFilters_0WithHttpInfo (int? context)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling WorkflowEventsApi->WorkflowEventsGetContextFilters_0");

            var localVarPath = "./api/WorkflowEvents/event/context-filters/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetContextFilters_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventFiltersContextDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EventFiltersContextDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventFiltersContextDTO)));
        }

        /// <summary>
        /// Use this call to get the filters in for a specific event context 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </param>
        /// <returns>Task of EventFiltersContextDTO</returns>
        public async System.Threading.Tasks.Task<EventFiltersContextDTO> WorkflowEventsGetContextFilters_0Async (int? context)
        {
             ApiResponse<EventFiltersContextDTO> localVarResponse = await WorkflowEventsGetContextFilters_0AsyncWithHttpInfo(context);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this call to get the filters in for a specific event context 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="context">Possible values:  0: Profile  1: Folders  2: Binder  3: Contacts  4: Sharing  5: ManualStart  6: ExpiredDocument </param>
        /// <returns>Task of ApiResponse (EventFiltersContextDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EventFiltersContextDTO>> WorkflowEventsGetContextFilters_0AsyncWithHttpInfo (int? context)
        {
            // verify the required parameter 'context' is set
            if (context == null)
                throw new ApiException(400, "Missing required parameter 'context' when calling WorkflowEventsApi->WorkflowEventsGetContextFilters_0");

            var localVarPath = "./api/WorkflowEvents/event/context-filters/{context}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (context != null) localVarPathParams.Add("context", this.Configuration.ApiClient.ParameterToString(context)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetContextFilters_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EventFiltersContextDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (EventFiltersContextDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EventFiltersContextDTO)));
        }

        /// <summary>
        /// This call retrieves a specific V2 event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>WorkFlowSavedEventDTO</returns>
        public WorkFlowSavedEventDTO WorkflowEventsGetEventConfiguration (string eventId)
        {
             ApiResponse<WorkFlowSavedEventDTO> localVarResponse = WorkflowEventsGetEventConfigurationWithHttpInfo(eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieves a specific V2 event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of WorkFlowSavedEventDTO</returns>
        public ApiResponse< WorkFlowSavedEventDTO > WorkflowEventsGetEventConfigurationWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling WorkflowEventsApi->WorkflowEventsGetEventConfiguration");

            var localVarPath = "./api/WorkflowEvents/event/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetEventConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowSavedEventDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowSavedEventDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowSavedEventDTO)));
        }

        /// <summary>
        /// This call retrieves a specific V2 event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of WorkFlowSavedEventDTO</returns>
        public async System.Threading.Tasks.Task<WorkFlowSavedEventDTO> WorkflowEventsGetEventConfigurationAsync (string eventId)
        {
             ApiResponse<WorkFlowSavedEventDTO> localVarResponse = await WorkflowEventsGetEventConfigurationAsyncWithHttpInfo(eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieves a specific V2 event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse (WorkFlowSavedEventDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkFlowSavedEventDTO>> WorkflowEventsGetEventConfigurationAsyncWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling WorkflowEventsApi->WorkflowEventsGetEventConfiguration");

            var localVarPath = "./api/WorkflowEvents/event/{eventId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetEventConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowSavedEventDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowSavedEventDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowSavedEventDTO)));
        }

        /// <summary>
        /// Use this call to get the delete status of the event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>WorkflowSavedEventStatusDTO</returns>
        public WorkflowSavedEventStatusDTO WorkflowEventsGetEventDeleteStatus (string eventId)
        {
             ApiResponse<WorkflowSavedEventStatusDTO> localVarResponse = WorkflowEventsGetEventDeleteStatusWithHttpInfo(eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this call to get the delete status of the event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of WorkflowSavedEventStatusDTO</returns>
        public ApiResponse< WorkflowSavedEventStatusDTO > WorkflowEventsGetEventDeleteStatusWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling WorkflowEventsApi->WorkflowEventsGetEventDeleteStatus");

            var localVarPath = "./api/WorkflowEvents/event/{eventId}/delete-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetEventDeleteStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowSavedEventStatusDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkflowSavedEventStatusDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowSavedEventStatusDTO)));
        }

        /// <summary>
        /// Use this call to get the delete status of the event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of WorkflowSavedEventStatusDTO</returns>
        public async System.Threading.Tasks.Task<WorkflowSavedEventStatusDTO> WorkflowEventsGetEventDeleteStatusAsync (string eventId)
        {
             ApiResponse<WorkflowSavedEventStatusDTO> localVarResponse = await WorkflowEventsGetEventDeleteStatusAsyncWithHttpInfo(eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this call to get the delete status of the event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse (WorkflowSavedEventStatusDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowSavedEventStatusDTO>> WorkflowEventsGetEventDeleteStatusAsyncWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling WorkflowEventsApi->WorkflowEventsGetEventDeleteStatus");

            var localVarPath = "./api/WorkflowEvents/event/{eventId}/delete-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetEventDeleteStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowSavedEventStatusDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkflowSavedEventStatusDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowSavedEventStatusDTO)));
        }

        /// <summary>
        /// Use this call to get the edit status of the event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>WorkflowSavedEventStatusDTO</returns>
        public WorkflowSavedEventStatusDTO WorkflowEventsGetEventEditStatus (string eventId)
        {
             ApiResponse<WorkflowSavedEventStatusDTO> localVarResponse = WorkflowEventsGetEventEditStatusWithHttpInfo(eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use this call to get the edit status of the event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>ApiResponse of WorkflowSavedEventStatusDTO</returns>
        public ApiResponse< WorkflowSavedEventStatusDTO > WorkflowEventsGetEventEditStatusWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling WorkflowEventsApi->WorkflowEventsGetEventEditStatus");

            var localVarPath = "./api/WorkflowEvents/event/{eventId}/edit-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetEventEditStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowSavedEventStatusDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkflowSavedEventStatusDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowSavedEventStatusDTO)));
        }

        /// <summary>
        /// Use this call to get the edit status of the event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of WorkflowSavedEventStatusDTO</returns>
        public async System.Threading.Tasks.Task<WorkflowSavedEventStatusDTO> WorkflowEventsGetEventEditStatusAsync (string eventId)
        {
             ApiResponse<WorkflowSavedEventStatusDTO> localVarResponse = await WorkflowEventsGetEventEditStatusAsyncWithHttpInfo(eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use this call to get the edit status of the event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <returns>Task of ApiResponse (WorkflowSavedEventStatusDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkflowSavedEventStatusDTO>> WorkflowEventsGetEventEditStatusAsyncWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new ApiException(400, "Missing required parameter 'eventId' when calling WorkflowEventsApi->WorkflowEventsGetEventEditStatus");

            var localVarPath = "./api/WorkflowEvents/event/{eventId}/edit-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventId != null) localVarPathParams.Add("eventId", this.Configuration.ApiClient.ParameterToString(eventId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetEventEditStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkflowSavedEventStatusDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkflowSavedEventStatusDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkflowSavedEventStatusDTO)));
        }

        /// <summary>
        /// This call retrieves all the V2 events 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WorkFlowSavedEventDTO&gt;</returns>
        public List<WorkFlowSavedEventDTO> WorkflowEventsGetEventList ()
        {
             ApiResponse<List<WorkFlowSavedEventDTO>> localVarResponse = WorkflowEventsGetEventListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call retrieves all the V2 events 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WorkFlowSavedEventDTO&gt;</returns>
        public ApiResponse< List<WorkFlowSavedEventDTO> > WorkflowEventsGetEventListWithHttpInfo ()
        {

            var localVarPath = "./api/WorkflowEvents/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetEventList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowSavedEventDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WorkFlowSavedEventDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowSavedEventDTO>)));
        }

        /// <summary>
        /// This call retrieves all the V2 events 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WorkFlowSavedEventDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<WorkFlowSavedEventDTO>> WorkflowEventsGetEventListAsync ()
        {
             ApiResponse<List<WorkFlowSavedEventDTO>> localVarResponse = await WorkflowEventsGetEventListAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call retrieves all the V2 events 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WorkFlowSavedEventDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WorkFlowSavedEventDTO>>> WorkflowEventsGetEventListAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/WorkflowEvents/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsGetEventList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WorkFlowSavedEventDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<WorkFlowSavedEventDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WorkFlowSavedEventDTO>)));
        }

        /// <summary>
        /// This call saves an event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>WorkFlowSavedEventDTO</returns>
        public WorkFlowSavedEventDTO WorkflowEventsSaveEvent (WorkFlowSaveEventDTO eventconfiguration = null)
        {
             ApiResponse<WorkFlowSavedEventDTO> localVarResponse = WorkflowEventsSaveEventWithHttpInfo(eventconfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call saves an event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>ApiResponse of WorkFlowSavedEventDTO</returns>
        public ApiResponse< WorkFlowSavedEventDTO > WorkflowEventsSaveEventWithHttpInfo (WorkFlowSaveEventDTO eventconfiguration = null)
        {

            var localVarPath = "./api/WorkflowEvents/event";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventconfiguration != null && eventconfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(eventconfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventconfiguration; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsSaveEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowSavedEventDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowSavedEventDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowSavedEventDTO)));
        }

        /// <summary>
        /// This call saves an event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>Task of WorkFlowSavedEventDTO</returns>
        public async System.Threading.Tasks.Task<WorkFlowSavedEventDTO> WorkflowEventsSaveEventAsync (WorkFlowSaveEventDTO eventconfiguration = null)
        {
             ApiResponse<WorkFlowSavedEventDTO> localVarResponse = await WorkflowEventsSaveEventAsyncWithHttpInfo(eventconfiguration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call saves an event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkFlowSavedEventDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkFlowSavedEventDTO>> WorkflowEventsSaveEventAsyncWithHttpInfo (WorkFlowSaveEventDTO eventconfiguration = null)
        {

            var localVarPath = "./api/WorkflowEvents/event";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventconfiguration != null && eventconfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(eventconfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventconfiguration; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsSaveEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowSavedEventDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowSavedEventDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowSavedEventDTO)));
        }

        /// <summary>
        /// This call updates an event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>WorkFlowSavedEventDTO</returns>
        public WorkFlowSavedEventDTO WorkflowEventsUpdateEvent (WorkFlowSavedEventDTO eventconfiguration = null)
        {
             ApiResponse<WorkFlowSavedEventDTO> localVarResponse = WorkflowEventsUpdateEventWithHttpInfo(eventconfiguration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call updates an event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>ApiResponse of WorkFlowSavedEventDTO</returns>
        public ApiResponse< WorkFlowSavedEventDTO > WorkflowEventsUpdateEventWithHttpInfo (WorkFlowSavedEventDTO eventconfiguration = null)
        {

            var localVarPath = "./api/WorkflowEvents/event";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventconfiguration != null && eventconfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(eventconfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventconfiguration; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsUpdateEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowSavedEventDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowSavedEventDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowSavedEventDTO)));
        }

        /// <summary>
        /// This call updates an event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>Task of WorkFlowSavedEventDTO</returns>
        public async System.Threading.Tasks.Task<WorkFlowSavedEventDTO> WorkflowEventsUpdateEventAsync (WorkFlowSavedEventDTO eventconfiguration = null)
        {
             ApiResponse<WorkFlowSavedEventDTO> localVarResponse = await WorkflowEventsUpdateEventAsyncWithHttpInfo(eventconfiguration);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call updates an event 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventconfiguration"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkFlowSavedEventDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WorkFlowSavedEventDTO>> WorkflowEventsUpdateEventAsyncWithHttpInfo (WorkFlowSavedEventDTO eventconfiguration = null)
        {

            var localVarPath = "./api/WorkflowEvents/event";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eventconfiguration != null && eventconfiguration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(eventconfiguration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventconfiguration; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkflowEventsUpdateEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WorkFlowSavedEventDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (WorkFlowSavedEventDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkFlowSavedEventDTO)));
        }

    }
}
