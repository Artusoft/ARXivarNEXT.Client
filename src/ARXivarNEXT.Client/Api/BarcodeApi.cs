/* 
 * WebAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: data
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using ARXivarNEXT.Client.Client;
using ARXivarNEXT.Client.Model;

namespace ARXivarNEXT.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBarcodeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This call inserts new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeInsertRequest">Barcode insert request</param>
        /// <returns>BarcodeDTO</returns>
        BarcodeDTO BarcodeBarcodeInsert (BarcodeInsertRequestDTO barcodeInsertRequest);

        /// <summary>
        /// This call inserts new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeInsertRequest">Barcode insert request</param>
        /// <returns>ApiResponse of BarcodeDTO</returns>
        ApiResponse<BarcodeDTO> BarcodeBarcodeInsertWithHttpInfo (BarcodeInsertRequestDTO barcodeInsertRequest);
        /// <summary>
        /// This call inserts new ArxBarcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Barcode insert request</param>
        /// <returns>BarcodeDTO</returns>
        BarcodeDTO BarcodeBarcodeInsertArxBarcode (BarcodeInsertArxBarcodeRequestDTO request);

        /// <summary>
        /// This call inserts new ArxBarcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Barcode insert request</param>
        /// <returns>ApiResponse of BarcodeDTO</returns>
        ApiResponse<BarcodeDTO> BarcodeBarcodeInsertArxBarcodeWithHttpInfo (BarcodeInsertArxBarcodeRequestDTO request);
        /// <summary>
        /// This method deletes a barcode by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns></returns>
        void BarcodeDeleteAll (List<int?> ids);

        /// <summary>
        /// This method deletes a barcode by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeDeleteAllWithHttpInfo (List<int?> ids);
        /// <summary>
        /// This method deletes a barcode by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <returns></returns>
        void BarcodeDeleteBarcode (int? id);

        /// <summary>
        /// This method deletes a barcode by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeDeleteBarcodeWithHttpInfo (int? id);
        /// <summary>
        /// Deletes a barcode service rule by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns></returns>
        void BarcodeDeleteBarcodeUserServiceRuleById (int? ruleId);

        /// <summary>
        /// Deletes a barcode service rule by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeDeleteBarcodeUserServiceRuleByIdWithHttpInfo (int? ruleId);
        /// <summary>
        /// This call returns the barcode grapich user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>BarcodeGraphicTemplateDto</returns>
        BarcodeGraphicTemplateDto BarcodeGetBarcodeGraphicUserTemplate (int? dmTipidocumentoId);

        /// <summary>
        /// This call returns the barcode grapich user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>ApiResponse of BarcodeGraphicTemplateDto</returns>
        ApiResponse<BarcodeGraphicTemplateDto> BarcodeGetBarcodeGraphicUserTemplateWithHttpInfo (int? dmTipidocumentoId);
        /// <summary>
        /// Gets a barcode service rule by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>BarcodeServiceRuleDTO</returns>
        BarcodeServiceRuleDTO BarcodeGetBarcodeUserServiceRuleById (int? ruleId);

        /// <summary>
        /// Gets a barcode service rule by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>ApiResponse of BarcodeServiceRuleDTO</returns>
        ApiResponse<BarcodeServiceRuleDTO> BarcodeGetBarcodeUserServiceRuleByIdWithHttpInfo (int? ruleId);
        /// <summary>
        /// Get the barcode service rule for the connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BarcodeServiceRuleDTO</returns>
        BarcodeServiceRuleDTO BarcodeGetBarcodeUserServiceRules ();

        /// <summary>
        /// Get the barcode service rule for the connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BarcodeServiceRuleDTO</returns>
        ApiResponse<BarcodeServiceRuleDTO> BarcodeGetBarcodeUserServiceRulesWithHttpInfo ();
        /// <summary>
        /// This call returns the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BarcodeUserSettingsDto</returns>
        BarcodeUserSettingsDto BarcodeGetBarcodeUserSettings ();

        /// <summary>
        /// This call returns the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BarcodeUserSettingsDto</returns>
        ApiResponse<BarcodeUserSettingsDto> BarcodeGetBarcodeUserSettingsWithHttpInfo ();
        /// <summary>
        /// This call returns the barcode user template by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>BarcodeTemplateDto</returns>
        BarcodeTemplateDto BarcodeGetBarcodeUserTemplate (int? dmTipidocumentoId);

        /// <summary>
        /// This call returns the barcode user template by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>ApiResponse of BarcodeTemplateDto</returns>
        ApiResponse<BarcodeTemplateDto> BarcodeGetBarcodeUserTemplateWithHttpInfo (int? dmTipidocumentoId);
        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>DefaultBarcodeTemplateDto</returns>
        DefaultBarcodeTemplateDto BarcodeGetDefaultTemplate (string printerFamilyValue);

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>ApiResponse of DefaultBarcodeTemplateDto</returns>
        ApiResponse<DefaultBarcodeTemplateDto> BarcodeGetDefaultTemplateWithHttpInfo (string printerFamilyValue);
        /// <summary>
        /// Saves a barcode service rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>BarcodeServiceRuleDTO</returns>
        BarcodeServiceRuleDTO BarcodeInsertBarcodeUserServiceRule (BarcodeServiceRuleDTO barcodeServiceRule);

        /// <summary>
        /// Saves a barcode service rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>ApiResponse of BarcodeServiceRuleDTO</returns>
        ApiResponse<BarcodeServiceRuleDTO> BarcodeInsertBarcodeUserServiceRuleWithHttpInfo (BarcodeServiceRuleDTO barcodeServiceRule);
        /// <summary>
        /// This method matches the barcode with the relative profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns></returns>
        void BarcodeMatchDocument (List<int?> ids);

        /// <summary>
        /// This method matches the barcode with the relative profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeMatchDocumentWithHttpInfo (List<int?> ids);
        /// <summary>
        /// This call executes the print of barcode in format Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintArxBarcode ();

        /// <summary>
        /// This call executes the print of barcode in format Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintArxBarcodeWithHttpInfo ();
        /// <summary>
        /// This call executes the print of barcode for attachment of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintAttachmentByDocnumber (int? docnumber, bool? insertRecord = null);

        /// <summary>
        /// This call executes the print of barcode for attachment of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintAttachmentByDocnumberWithHttpInfo (int? docnumber, bool? insertRecord = null);
        /// <summary>
        /// This call executes the print of barcode associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintByDocnumber (int? docnumber, bool? insertRecord = null);

        /// <summary>
        /// This call executes the print of barcode associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintByDocnumberWithHttpInfo (int? docnumber, bool? insertRecord = null);
        /// <summary>
        /// This call executes the print of barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintByIdBarcode (int? idBarcode);

        /// <summary>
        /// This call executes the print of barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintByIdBarcodeWithHttpInfo (int? idBarcode);
        /// <summary>
        /// This call executes the print of barcode for revision of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>BarcodePrintResultDto</returns>
        BarcodePrintResultDto BarcodePrintRevisionByDocnumber (int? docnumber, bool? insertRecord = null);

        /// <summary>
        /// This call executes the print of barcode for revision of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        ApiResponse<BarcodePrintResultDto> BarcodePrintRevisionByDocnumberWithHttpInfo (int? docnumber, bool? insertRecord = null);
        /// <summary>
        /// This method renames a barcode with a specified id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <param name="name">The new name</param>
        /// <returns></returns>
        void BarcodeRenameBarcode (int? id, string name);

        /// <summary>
        /// This method renames a barcode with a specified id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <param name="name">The new name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeRenameBarcodeWithHttpInfo (int? id, string name);
        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto">Barcode Graphic Template to save</param>
        /// <returns></returns>
        void BarcodeSetBarcodeGraphicUserTemplate (BarcodeGraphicTemplateSaveDto dto);

        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto">Barcode Graphic Template to save</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo (BarcodeGraphicTemplateSaveDto dto);
        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeSettings">Barcode settings for user</param>
        /// <returns></returns>
        void BarcodeSetBarcodeUserSettings (BarcodeUserSettingsDto barcodeSettings);

        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeSettings">Barcode settings for user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeUserSettingsWithHttpInfo (BarcodeUserSettingsDto barcodeSettings);
        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDto">Barcode Template</param>
        /// <returns></returns>
        void BarcodeSetBarcodeUserTemplate (BarcodeTemplateDto templateDto);

        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDto">Barcode Template</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeSetBarcodeUserTemplateWithHttpInfo (BarcodeTemplateDto templateDto);
        /// <summary>
        /// This method detaches a document from a specified barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns></returns>
        void BarcodeUnMatchDocument (List<int?> ids);

        /// <summary>
        /// This method detaches a document from a specified barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BarcodeUnMatchDocumentWithHttpInfo (List<int?> ids);
        /// <summary>
        /// Updates a barcode service rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>BarcodeServiceRuleDTO</returns>
        BarcodeServiceRuleDTO BarcodeUpdateBarcodeUserServiceRule (BarcodeServiceRuleDTO barcodeServiceRule);

        /// <summary>
        /// Updates a barcode service rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>ApiResponse of BarcodeServiceRuleDTO</returns>
        ApiResponse<BarcodeServiceRuleDTO> BarcodeUpdateBarcodeUserServiceRuleWithHttpInfo (BarcodeServiceRuleDTO barcodeServiceRule);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This call inserts new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeInsertRequest">Barcode insert request</param>
        /// <returns>Task of BarcodeDTO</returns>
        System.Threading.Tasks.Task<BarcodeDTO> BarcodeBarcodeInsertAsync (BarcodeInsertRequestDTO barcodeInsertRequest);

        /// <summary>
        /// This call inserts new barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeInsertRequest">Barcode insert request</param>
        /// <returns>Task of ApiResponse (BarcodeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeDTO>> BarcodeBarcodeInsertAsyncWithHttpInfo (BarcodeInsertRequestDTO barcodeInsertRequest);
        /// <summary>
        /// This call inserts new ArxBarcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Barcode insert request</param>
        /// <returns>Task of BarcodeDTO</returns>
        System.Threading.Tasks.Task<BarcodeDTO> BarcodeBarcodeInsertArxBarcodeAsync (BarcodeInsertArxBarcodeRequestDTO request);

        /// <summary>
        /// This call inserts new ArxBarcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Barcode insert request</param>
        /// <returns>Task of ApiResponse (BarcodeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeDTO>> BarcodeBarcodeInsertArxBarcodeAsyncWithHttpInfo (BarcodeInsertArxBarcodeRequestDTO request);
        /// <summary>
        /// This method deletes a barcode by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeDeleteAllAsync (List<int?> ids);

        /// <summary>
        /// This method deletes a barcode by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeDeleteAllAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// This method deletes a barcode by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeDeleteBarcodeAsync (int? id);

        /// <summary>
        /// This method deletes a barcode by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeDeleteBarcodeAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Deletes a barcode service rule by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeDeleteBarcodeUserServiceRuleByIdAsync (int? ruleId);

        /// <summary>
        /// Deletes a barcode service rule by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeDeleteBarcodeUserServiceRuleByIdAsyncWithHttpInfo (int? ruleId);
        /// <summary>
        /// This call returns the barcode grapich user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of BarcodeGraphicTemplateDto</returns>
        System.Threading.Tasks.Task<BarcodeGraphicTemplateDto> BarcodeGetBarcodeGraphicUserTemplateAsync (int? dmTipidocumentoId);

        /// <summary>
        /// This call returns the barcode grapich user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of ApiResponse (BarcodeGraphicTemplateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeGraphicTemplateDto>> BarcodeGetBarcodeGraphicUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId);
        /// <summary>
        /// Gets a barcode service rule by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>Task of BarcodeServiceRuleDTO</returns>
        System.Threading.Tasks.Task<BarcodeServiceRuleDTO> BarcodeGetBarcodeUserServiceRuleByIdAsync (int? ruleId);

        /// <summary>
        /// Gets a barcode service rule by its id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>Task of ApiResponse (BarcodeServiceRuleDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeServiceRuleDTO>> BarcodeGetBarcodeUserServiceRuleByIdAsyncWithHttpInfo (int? ruleId);
        /// <summary>
        /// Get the barcode service rule for the connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BarcodeServiceRuleDTO</returns>
        System.Threading.Tasks.Task<BarcodeServiceRuleDTO> BarcodeGetBarcodeUserServiceRulesAsync ();

        /// <summary>
        /// Get the barcode service rule for the connected user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BarcodeServiceRuleDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeServiceRuleDTO>> BarcodeGetBarcodeUserServiceRulesAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BarcodeUserSettingsDto</returns>
        System.Threading.Tasks.Task<BarcodeUserSettingsDto> BarcodeGetBarcodeUserSettingsAsync ();

        /// <summary>
        /// This call returns the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BarcodeUserSettingsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeUserSettingsDto>> BarcodeGetBarcodeUserSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// This call returns the barcode user template by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of BarcodeTemplateDto</returns>
        System.Threading.Tasks.Task<BarcodeTemplateDto> BarcodeGetBarcodeUserTemplateAsync (int? dmTipidocumentoId);

        /// <summary>
        /// This call returns the barcode user template by document type
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of ApiResponse (BarcodeTemplateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeTemplateDto>> BarcodeGetBarcodeUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId);
        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>Task of DefaultBarcodeTemplateDto</returns>
        System.Threading.Tasks.Task<DefaultBarcodeTemplateDto> BarcodeGetDefaultTemplateAsync (string printerFamilyValue);

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>Task of ApiResponse (DefaultBarcodeTemplateDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefaultBarcodeTemplateDto>> BarcodeGetDefaultTemplateAsyncWithHttpInfo (string printerFamilyValue);
        /// <summary>
        /// Saves a barcode service rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>Task of BarcodeServiceRuleDTO</returns>
        System.Threading.Tasks.Task<BarcodeServiceRuleDTO> BarcodeInsertBarcodeUserServiceRuleAsync (BarcodeServiceRuleDTO barcodeServiceRule);

        /// <summary>
        /// Saves a barcode service rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>Task of ApiResponse (BarcodeServiceRuleDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeServiceRuleDTO>> BarcodeInsertBarcodeUserServiceRuleAsyncWithHttpInfo (BarcodeServiceRuleDTO barcodeServiceRule);
        /// <summary>
        /// This method matches the barcode with the relative profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeMatchDocumentAsync (List<int?> ids);

        /// <summary>
        /// This method matches the barcode with the relative profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeMatchDocumentAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// This call executes the print of barcode in format Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintArxBarcodeAsync ();

        /// <summary>
        /// This call executes the print of barcode in format Arxivar
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintArxBarcodeAsyncWithHttpInfo ();
        /// <summary>
        /// This call executes the print of barcode for attachment of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintAttachmentByDocnumberAsync (int? docnumber, bool? insertRecord = null);

        /// <summary>
        /// This call executes the print of barcode for attachment of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintAttachmentByDocnumberAsyncWithHttpInfo (int? docnumber, bool? insertRecord = null);
        /// <summary>
        /// This call executes the print of barcode associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintByDocnumberAsync (int? docnumber, bool? insertRecord = null);

        /// <summary>
        /// This call executes the print of barcode associated with a document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintByDocnumberAsyncWithHttpInfo (int? docnumber, bool? insertRecord = null);
        /// <summary>
        /// This call executes the print of barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintByIdBarcodeAsync (int? idBarcode);

        /// <summary>
        /// This call executes the print of barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintByIdBarcodeAsyncWithHttpInfo (int? idBarcode);
        /// <summary>
        /// This call executes the print of barcode for revision of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintRevisionByDocnumberAsync (int? docnumber, bool? insertRecord = null);

        /// <summary>
        /// This call executes the print of barcode for revision of document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintRevisionByDocnumberAsyncWithHttpInfo (int? docnumber, bool? insertRecord = null);
        /// <summary>
        /// This method renames a barcode with a specified id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <param name="name">The new name</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeRenameBarcodeAsync (int? id, string name);

        /// <summary>
        /// This method renames a barcode with a specified id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <param name="name">The new name</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeRenameBarcodeAsyncWithHttpInfo (int? id, string name);
        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto">Barcode Graphic Template to save</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeGraphicUserTemplateAsync (BarcodeGraphicTemplateSaveDto dto);

        /// <summary>
        /// This call sets the barcode graphic user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto">Barcode Graphic Template to save</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo (BarcodeGraphicTemplateSaveDto dto);
        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeSettings">Barcode settings for user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeUserSettingsAsync (BarcodeUserSettingsDto barcodeSettings);

        /// <summary>
        /// This call sets the barcode user default settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeSettings">Barcode settings for user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo (BarcodeUserSettingsDto barcodeSettings);
        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDto">Barcode Template</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeSetBarcodeUserTemplateAsync (BarcodeTemplateDto templateDto);

        /// <summary>
        /// This call sets the barcode user template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDto">Barcode Template</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo (BarcodeTemplateDto templateDto);
        /// <summary>
        /// This method detaches a document from a specified barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BarcodeUnMatchDocumentAsync (List<int?> ids);

        /// <summary>
        /// This method detaches a document from a specified barcode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeUnMatchDocumentAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// Updates a barcode service rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>Task of BarcodeServiceRuleDTO</returns>
        System.Threading.Tasks.Task<BarcodeServiceRuleDTO> BarcodeUpdateBarcodeUserServiceRuleAsync (BarcodeServiceRuleDTO barcodeServiceRule);

        /// <summary>
        /// Updates a barcode service rule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>Task of ApiResponse (BarcodeServiceRuleDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeServiceRuleDTO>> BarcodeUpdateBarcodeUserServiceRuleAsyncWithHttpInfo (BarcodeServiceRuleDTO barcodeServiceRule);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BarcodeApi : IBarcodeApi
    {
        private ARXivarNEXT.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BarcodeApi(String basePath)
        {
            this.Configuration = new ARXivarNEXT.Client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BarcodeApi(ARXivarNEXT.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ARXivarNEXT.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ARXivarNEXT.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ARXivarNEXT.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ARXivarNEXT.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This call inserts new barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeInsertRequest">Barcode insert request</param>
        /// <returns>BarcodeDTO</returns>
        public BarcodeDTO BarcodeBarcodeInsert (BarcodeInsertRequestDTO barcodeInsertRequest)
        {
             ApiResponse<BarcodeDTO> localVarResponse = BarcodeBarcodeInsertWithHttpInfo(barcodeInsertRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeInsertRequest">Barcode insert request</param>
        /// <returns>ApiResponse of BarcodeDTO</returns>
        public ApiResponse< BarcodeDTO > BarcodeBarcodeInsertWithHttpInfo (BarcodeInsertRequestDTO barcodeInsertRequest)
        {
            // verify the required parameter 'barcodeInsertRequest' is set
            if (barcodeInsertRequest == null)
                throw new ApiException(400, "Missing required parameter 'barcodeInsertRequest' when calling BarcodeApi->BarcodeBarcodeInsert");

            var localVarPath = "./api/Barcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeInsertRequest != null && barcodeInsertRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(barcodeInsertRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = barcodeInsertRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeBarcodeInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeDTO)));
        }

        /// <summary>
        /// This call inserts new barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeInsertRequest">Barcode insert request</param>
        /// <returns>Task of BarcodeDTO</returns>
        public async System.Threading.Tasks.Task<BarcodeDTO> BarcodeBarcodeInsertAsync (BarcodeInsertRequestDTO barcodeInsertRequest)
        {
             ApiResponse<BarcodeDTO> localVarResponse = await BarcodeBarcodeInsertAsyncWithHttpInfo(barcodeInsertRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeInsertRequest">Barcode insert request</param>
        /// <returns>Task of ApiResponse (BarcodeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeDTO>> BarcodeBarcodeInsertAsyncWithHttpInfo (BarcodeInsertRequestDTO barcodeInsertRequest)
        {
            // verify the required parameter 'barcodeInsertRequest' is set
            if (barcodeInsertRequest == null)
                throw new ApiException(400, "Missing required parameter 'barcodeInsertRequest' when calling BarcodeApi->BarcodeBarcodeInsert");

            var localVarPath = "./api/Barcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeInsertRequest != null && barcodeInsertRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(barcodeInsertRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = barcodeInsertRequest; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeBarcodeInsert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeDTO)));
        }

        /// <summary>
        /// This call inserts new ArxBarcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Barcode insert request</param>
        /// <returns>BarcodeDTO</returns>
        public BarcodeDTO BarcodeBarcodeInsertArxBarcode (BarcodeInsertArxBarcodeRequestDTO request)
        {
             ApiResponse<BarcodeDTO> localVarResponse = BarcodeBarcodeInsertArxBarcodeWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call inserts new ArxBarcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Barcode insert request</param>
        /// <returns>ApiResponse of BarcodeDTO</returns>
        public ApiResponse< BarcodeDTO > BarcodeBarcodeInsertArxBarcodeWithHttpInfo (BarcodeInsertArxBarcodeRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BarcodeApi->BarcodeBarcodeInsertArxBarcode");

            var localVarPath = "./api/Barcode/arxBarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeBarcodeInsertArxBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeDTO)));
        }

        /// <summary>
        /// This call inserts new ArxBarcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Barcode insert request</param>
        /// <returns>Task of BarcodeDTO</returns>
        public async System.Threading.Tasks.Task<BarcodeDTO> BarcodeBarcodeInsertArxBarcodeAsync (BarcodeInsertArxBarcodeRequestDTO request)
        {
             ApiResponse<BarcodeDTO> localVarResponse = await BarcodeBarcodeInsertArxBarcodeAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call inserts new ArxBarcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Barcode insert request</param>
        /// <returns>Task of ApiResponse (BarcodeDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeDTO>> BarcodeBarcodeInsertArxBarcodeAsyncWithHttpInfo (BarcodeInsertArxBarcodeRequestDTO request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BarcodeApi->BarcodeBarcodeInsertArxBarcode");

            var localVarPath = "./api/Barcode/arxBarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeBarcodeInsertArxBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeDTO)));
        }

        /// <summary>
        /// This method deletes a barcode by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns></returns>
        public void BarcodeDeleteAll (List<int?> ids)
        {
             BarcodeDeleteAllWithHttpInfo(ids);
        }

        /// <summary>
        /// This method deletes a barcode by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeDeleteAllWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling BarcodeApi->BarcodeDeleteAll");

            var localVarPath = "./api/Barcode/DeleteAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeDeleteAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method deletes a barcode by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeDeleteAllAsync (List<int?> ids)
        {
             await BarcodeDeleteAllAsyncWithHttpInfo(ids);

        }

        /// <summary>
        /// This method deletes a barcode by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeDeleteAllAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling BarcodeApi->BarcodeDeleteAll");

            var localVarPath = "./api/Barcode/DeleteAll";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeDeleteAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method deletes a barcode by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <returns></returns>
        public void BarcodeDeleteBarcode (int? id)
        {
             BarcodeDeleteBarcodeWithHttpInfo(id);
        }

        /// <summary>
        /// This method deletes a barcode by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeDeleteBarcodeWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BarcodeApi->BarcodeDeleteBarcode");

            var localVarPath = "./api/Barcode/Delete/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeDeleteBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method deletes a barcode by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeDeleteBarcodeAsync (int? id)
        {
             await BarcodeDeleteBarcodeAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// This method deletes a barcode by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeDeleteBarcodeAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BarcodeApi->BarcodeDeleteBarcode");

            var localVarPath = "./api/Barcode/Delete/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeDeleteBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a barcode service rule by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns></returns>
        public void BarcodeDeleteBarcodeUserServiceRuleById (int? ruleId)
        {
             BarcodeDeleteBarcodeUserServiceRuleByIdWithHttpInfo(ruleId);
        }

        /// <summary>
        /// Deletes a barcode service rule by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeDeleteBarcodeUserServiceRuleByIdWithHttpInfo (int? ruleId)
        {
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling BarcodeApi->BarcodeDeleteBarcodeUserServiceRuleById");

            var localVarPath = "./api/Barcode/UserServiceRule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeDeleteBarcodeUserServiceRuleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a barcode service rule by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeDeleteBarcodeUserServiceRuleByIdAsync (int? ruleId)
        {
             await BarcodeDeleteBarcodeUserServiceRuleByIdAsyncWithHttpInfo(ruleId);

        }

        /// <summary>
        /// Deletes a barcode service rule by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeDeleteBarcodeUserServiceRuleByIdAsyncWithHttpInfo (int? ruleId)
        {
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling BarcodeApi->BarcodeDeleteBarcodeUserServiceRuleById");

            var localVarPath = "./api/Barcode/UserServiceRule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeDeleteBarcodeUserServiceRuleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call returns the barcode grapich user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>BarcodeGraphicTemplateDto</returns>
        public BarcodeGraphicTemplateDto BarcodeGetBarcodeGraphicUserTemplate (int? dmTipidocumentoId)
        {
             ApiResponse<BarcodeGraphicTemplateDto> localVarResponse = BarcodeGetBarcodeGraphicUserTemplateWithHttpInfo(dmTipidocumentoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the barcode grapich user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>ApiResponse of BarcodeGraphicTemplateDto</returns>
        public ApiResponse< BarcodeGraphicTemplateDto > BarcodeGetBarcodeGraphicUserTemplateWithHttpInfo (int? dmTipidocumentoId)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeGetBarcodeGraphicUserTemplate");

            var localVarPath = "./api/Barcode/userGraphicTemplate/documentType/{dmTipidocumentoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarPathParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeGraphicTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeGraphicTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeGraphicTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode grapich user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of BarcodeGraphicTemplateDto</returns>
        public async System.Threading.Tasks.Task<BarcodeGraphicTemplateDto> BarcodeGetBarcodeGraphicUserTemplateAsync (int? dmTipidocumentoId)
        {
             ApiResponse<BarcodeGraphicTemplateDto> localVarResponse = await BarcodeGetBarcodeGraphicUserTemplateAsyncWithHttpInfo(dmTipidocumentoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the barcode grapich user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of ApiResponse (BarcodeGraphicTemplateDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeGraphicTemplateDto>> BarcodeGetBarcodeGraphicUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeGetBarcodeGraphicUserTemplate");

            var localVarPath = "./api/Barcode/userGraphicTemplate/documentType/{dmTipidocumentoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarPathParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeGraphicTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeGraphicTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeGraphicTemplateDto)));
        }

        /// <summary>
        /// Gets a barcode service rule by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>BarcodeServiceRuleDTO</returns>
        public BarcodeServiceRuleDTO BarcodeGetBarcodeUserServiceRuleById (int? ruleId)
        {
             ApiResponse<BarcodeServiceRuleDTO> localVarResponse = BarcodeGetBarcodeUserServiceRuleByIdWithHttpInfo(ruleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a barcode service rule by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>ApiResponse of BarcodeServiceRuleDTO</returns>
        public ApiResponse< BarcodeServiceRuleDTO > BarcodeGetBarcodeUserServiceRuleByIdWithHttpInfo (int? ruleId)
        {
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling BarcodeApi->BarcodeGetBarcodeUserServiceRuleById");

            var localVarPath = "./api/Barcode/UserServiceRule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserServiceRuleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeServiceRuleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeServiceRuleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeServiceRuleDTO)));
        }

        /// <summary>
        /// Gets a barcode service rule by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>Task of BarcodeServiceRuleDTO</returns>
        public async System.Threading.Tasks.Task<BarcodeServiceRuleDTO> BarcodeGetBarcodeUserServiceRuleByIdAsync (int? ruleId)
        {
             ApiResponse<BarcodeServiceRuleDTO> localVarResponse = await BarcodeGetBarcodeUserServiceRuleByIdAsyncWithHttpInfo(ruleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a barcode service rule by its id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ruleId">The rule Id</param>
        /// <returns>Task of ApiResponse (BarcodeServiceRuleDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeServiceRuleDTO>> BarcodeGetBarcodeUserServiceRuleByIdAsyncWithHttpInfo (int? ruleId)
        {
            // verify the required parameter 'ruleId' is set
            if (ruleId == null)
                throw new ApiException(400, "Missing required parameter 'ruleId' when calling BarcodeApi->BarcodeGetBarcodeUserServiceRuleById");

            var localVarPath = "./api/Barcode/UserServiceRule/{ruleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ruleId != null) localVarPathParams.Add("ruleId", this.Configuration.ApiClient.ParameterToString(ruleId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserServiceRuleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeServiceRuleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeServiceRuleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeServiceRuleDTO)));
        }

        /// <summary>
        /// Get the barcode service rule for the connected user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BarcodeServiceRuleDTO</returns>
        public BarcodeServiceRuleDTO BarcodeGetBarcodeUserServiceRules ()
        {
             ApiResponse<BarcodeServiceRuleDTO> localVarResponse = BarcodeGetBarcodeUserServiceRulesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the barcode service rule for the connected user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BarcodeServiceRuleDTO</returns>
        public ApiResponse< BarcodeServiceRuleDTO > BarcodeGetBarcodeUserServiceRulesWithHttpInfo ()
        {

            var localVarPath = "./api/Barcode/UserServiceRule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserServiceRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeServiceRuleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeServiceRuleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeServiceRuleDTO)));
        }

        /// <summary>
        /// Get the barcode service rule for the connected user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BarcodeServiceRuleDTO</returns>
        public async System.Threading.Tasks.Task<BarcodeServiceRuleDTO> BarcodeGetBarcodeUserServiceRulesAsync ()
        {
             ApiResponse<BarcodeServiceRuleDTO> localVarResponse = await BarcodeGetBarcodeUserServiceRulesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the barcode service rule for the connected user 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BarcodeServiceRuleDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeServiceRuleDTO>> BarcodeGetBarcodeUserServiceRulesAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/Barcode/UserServiceRule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserServiceRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeServiceRuleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeServiceRuleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeServiceRuleDTO)));
        }

        /// <summary>
        /// This call returns the barcode user default settings 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BarcodeUserSettingsDto</returns>
        public BarcodeUserSettingsDto BarcodeGetBarcodeUserSettings ()
        {
             ApiResponse<BarcodeUserSettingsDto> localVarResponse = BarcodeGetBarcodeUserSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the barcode user default settings 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BarcodeUserSettingsDto</returns>
        public ApiResponse< BarcodeUserSettingsDto > BarcodeGetBarcodeUserSettingsWithHttpInfo ()
        {

            var localVarPath = "./api/Barcode/userSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeUserSettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeUserSettingsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeUserSettingsDto)));
        }

        /// <summary>
        /// This call returns the barcode user default settings 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BarcodeUserSettingsDto</returns>
        public async System.Threading.Tasks.Task<BarcodeUserSettingsDto> BarcodeGetBarcodeUserSettingsAsync ()
        {
             ApiResponse<BarcodeUserSettingsDto> localVarResponse = await BarcodeGetBarcodeUserSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the barcode user default settings 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BarcodeUserSettingsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeUserSettingsDto>> BarcodeGetBarcodeUserSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/Barcode/userSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeUserSettingsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeUserSettingsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeUserSettingsDto)));
        }

        /// <summary>
        /// This call returns the barcode user template by document type 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>BarcodeTemplateDto</returns>
        public BarcodeTemplateDto BarcodeGetBarcodeUserTemplate (int? dmTipidocumentoId)
        {
             ApiResponse<BarcodeTemplateDto> localVarResponse = BarcodeGetBarcodeUserTemplateWithHttpInfo(dmTipidocumentoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the barcode user template by document type 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>ApiResponse of BarcodeTemplateDto</returns>
        public ApiResponse< BarcodeTemplateDto > BarcodeGetBarcodeUserTemplateWithHttpInfo (int? dmTipidocumentoId)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeGetBarcodeUserTemplate");

            var localVarPath = "./api/Barcode/userTemplate/documentType/{dmTipidocumentoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarPathParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode user template by document type 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of BarcodeTemplateDto</returns>
        public async System.Threading.Tasks.Task<BarcodeTemplateDto> BarcodeGetBarcodeUserTemplateAsync (int? dmTipidocumentoId)
        {
             ApiResponse<BarcodeTemplateDto> localVarResponse = await BarcodeGetBarcodeUserTemplateAsyncWithHttpInfo(dmTipidocumentoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the barcode user template by document type 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dmTipidocumentoId">Document type identifier</param>
        /// <returns>Task of ApiResponse (BarcodeTemplateDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeTemplateDto>> BarcodeGetBarcodeUserTemplateAsyncWithHttpInfo (int? dmTipidocumentoId)
        {
            // verify the required parameter 'dmTipidocumentoId' is set
            if (dmTipidocumentoId == null)
                throw new ApiException(400, "Missing required parameter 'dmTipidocumentoId' when calling BarcodeApi->BarcodeGetBarcodeUserTemplate");

            var localVarPath = "./api/Barcode/userTemplate/documentType/{dmTipidocumentoId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dmTipidocumentoId != null) localVarPathParams.Add("dmTipidocumentoId", this.Configuration.ApiClient.ParameterToString(dmTipidocumentoId)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>DefaultBarcodeTemplateDto</returns>
        public DefaultBarcodeTemplateDto BarcodeGetDefaultTemplate (string printerFamilyValue)
        {
             ApiResponse<DefaultBarcodeTemplateDto> localVarResponse = BarcodeGetDefaultTemplateWithHttpInfo(printerFamilyValue);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>ApiResponse of DefaultBarcodeTemplateDto</returns>
        public ApiResponse< DefaultBarcodeTemplateDto > BarcodeGetDefaultTemplateWithHttpInfo (string printerFamilyValue)
        {
            // verify the required parameter 'printerFamilyValue' is set
            if (printerFamilyValue == null)
                throw new ApiException(400, "Missing required parameter 'printerFamilyValue' when calling BarcodeApi->BarcodeGetDefaultTemplate");

            var localVarPath = "./api/Barcode/defaultTemplate/printerFamily/{printerFamilyValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printerFamilyValue != null) localVarPathParams.Add("printerFamilyValue", this.Configuration.ApiClient.ParameterToString(printerFamilyValue)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultBarcodeTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DefaultBarcodeTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultBarcodeTemplateDto)));
        }

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>Task of DefaultBarcodeTemplateDto</returns>
        public async System.Threading.Tasks.Task<DefaultBarcodeTemplateDto> BarcodeGetDefaultTemplateAsync (string printerFamilyValue)
        {
             ApiResponse<DefaultBarcodeTemplateDto> localVarResponse = await BarcodeGetDefaultTemplateAsyncWithHttpInfo(printerFamilyValue);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call returns the barcode default template by a printer family   - ZEBRA_EPL2,   - ZEBRA_ZPL2,   - TOSHIBA_BSV4,   - EPSON_ESC_POS 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="printerFamilyValue">The printer family (see Dm_Barcode_PrinterFamily)</param>
        /// <returns>Task of ApiResponse (DefaultBarcodeTemplateDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DefaultBarcodeTemplateDto>> BarcodeGetDefaultTemplateAsyncWithHttpInfo (string printerFamilyValue)
        {
            // verify the required parameter 'printerFamilyValue' is set
            if (printerFamilyValue == null)
                throw new ApiException(400, "Missing required parameter 'printerFamilyValue' when calling BarcodeApi->BarcodeGetDefaultTemplate");

            var localVarPath = "./api/Barcode/defaultTemplate/printerFamily/{printerFamilyValue}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (printerFamilyValue != null) localVarPathParams.Add("printerFamilyValue", this.Configuration.ApiClient.ParameterToString(printerFamilyValue)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeGetDefaultTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultBarcodeTemplateDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (DefaultBarcodeTemplateDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultBarcodeTemplateDto)));
        }

        /// <summary>
        /// Saves a barcode service rule 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>BarcodeServiceRuleDTO</returns>
        public BarcodeServiceRuleDTO BarcodeInsertBarcodeUserServiceRule (BarcodeServiceRuleDTO barcodeServiceRule)
        {
             ApiResponse<BarcodeServiceRuleDTO> localVarResponse = BarcodeInsertBarcodeUserServiceRuleWithHttpInfo(barcodeServiceRule);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves a barcode service rule 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>ApiResponse of BarcodeServiceRuleDTO</returns>
        public ApiResponse< BarcodeServiceRuleDTO > BarcodeInsertBarcodeUserServiceRuleWithHttpInfo (BarcodeServiceRuleDTO barcodeServiceRule)
        {
            // verify the required parameter 'barcodeServiceRule' is set
            if (barcodeServiceRule == null)
                throw new ApiException(400, "Missing required parameter 'barcodeServiceRule' when calling BarcodeApi->BarcodeInsertBarcodeUserServiceRule");

            var localVarPath = "./api/Barcode/UserServiceRule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeServiceRule != null && barcodeServiceRule.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(barcodeServiceRule); // http body (model) parameter
            }
            else
            {
                localVarPostBody = barcodeServiceRule; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeInsertBarcodeUserServiceRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeServiceRuleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeServiceRuleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeServiceRuleDTO)));
        }

        /// <summary>
        /// Saves a barcode service rule 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>Task of BarcodeServiceRuleDTO</returns>
        public async System.Threading.Tasks.Task<BarcodeServiceRuleDTO> BarcodeInsertBarcodeUserServiceRuleAsync (BarcodeServiceRuleDTO barcodeServiceRule)
        {
             ApiResponse<BarcodeServiceRuleDTO> localVarResponse = await BarcodeInsertBarcodeUserServiceRuleAsyncWithHttpInfo(barcodeServiceRule);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves a barcode service rule 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>Task of ApiResponse (BarcodeServiceRuleDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeServiceRuleDTO>> BarcodeInsertBarcodeUserServiceRuleAsyncWithHttpInfo (BarcodeServiceRuleDTO barcodeServiceRule)
        {
            // verify the required parameter 'barcodeServiceRule' is set
            if (barcodeServiceRule == null)
                throw new ApiException(400, "Missing required parameter 'barcodeServiceRule' when calling BarcodeApi->BarcodeInsertBarcodeUserServiceRule");

            var localVarPath = "./api/Barcode/UserServiceRule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeServiceRule != null && barcodeServiceRule.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(barcodeServiceRule); // http body (model) parameter
            }
            else
            {
                localVarPostBody = barcodeServiceRule; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeInsertBarcodeUserServiceRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeServiceRuleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeServiceRuleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeServiceRuleDTO)));
        }

        /// <summary>
        /// This method matches the barcode with the relative profiles 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns></returns>
        public void BarcodeMatchDocument (List<int?> ids)
        {
             BarcodeMatchDocumentWithHttpInfo(ids);
        }

        /// <summary>
        /// This method matches the barcode with the relative profiles 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeMatchDocumentWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling BarcodeApi->BarcodeMatchDocument");

            var localVarPath = "./api/Barcode/Match";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeMatchDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method matches the barcode with the relative profiles 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeMatchDocumentAsync (List<int?> ids)
        {
             await BarcodeMatchDocumentAsyncWithHttpInfo(ids);

        }

        /// <summary>
        /// This method matches the barcode with the relative profiles 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeMatchDocumentAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling BarcodeApi->BarcodeMatchDocument");

            var localVarPath = "./api/Barcode/Match";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeMatchDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call executes the print of barcode in format Arxivar 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintArxBarcode ()
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintArxBarcodeWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode in format Arxivar 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintArxBarcodeWithHttpInfo ()
        {

            var localVarPath = "./api/Barcode/printArxBarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintArxBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode in format Arxivar 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintArxBarcodeAsync ()
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintArxBarcodeAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode in format Arxivar 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintArxBarcodeAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/Barcode/printArxBarcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintArxBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode for attachment of document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintAttachmentByDocnumber (int? docnumber, bool? insertRecord = null)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintAttachmentByDocnumberWithHttpInfo(docnumber, insertRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode for attachment of document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintAttachmentByDocnumberWithHttpInfo (int? docnumber, bool? insertRecord = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintAttachmentByDocnumber");

            var localVarPath = "./api/Barcode/printAttachment/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (insertRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "insertRecord", insertRecord)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintAttachmentByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode for attachment of document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintAttachmentByDocnumberAsync (int? docnumber, bool? insertRecord = null)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintAttachmentByDocnumberAsyncWithHttpInfo(docnumber, insertRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode for attachment of document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintAttachmentByDocnumberAsyncWithHttpInfo (int? docnumber, bool? insertRecord = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintAttachmentByDocnumber");

            var localVarPath = "./api/Barcode/printAttachment/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (insertRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "insertRecord", insertRecord)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintAttachmentByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode associated with a document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintByDocnumber (int? docnumber, bool? insertRecord = null)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintByDocnumberWithHttpInfo(docnumber, insertRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode associated with a document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintByDocnumberWithHttpInfo (int? docnumber, bool? insertRecord = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintByDocnumber");

            var localVarPath = "./api/Barcode/print/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (insertRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "insertRecord", insertRecord)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode associated with a document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintByDocnumberAsync (int? docnumber, bool? insertRecord = null)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintByDocnumberAsyncWithHttpInfo(docnumber, insertRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode associated with a document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintByDocnumberAsyncWithHttpInfo (int? docnumber, bool? insertRecord = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintByDocnumber");

            var localVarPath = "./api/Barcode/print/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (insertRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "insertRecord", insertRecord)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintByIdBarcode (int? idBarcode)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintByIdBarcodeWithHttpInfo(idBarcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintByIdBarcodeWithHttpInfo (int? idBarcode)
        {
            // verify the required parameter 'idBarcode' is set
            if (idBarcode == null)
                throw new ApiException(400, "Missing required parameter 'idBarcode' when calling BarcodeApi->BarcodePrintByIdBarcode");

            var localVarPath = "./api/Barcode/print/{idBarcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idBarcode != null) localVarPathParams.Add("idBarcode", this.Configuration.ApiClient.ParameterToString(idBarcode)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintByIdBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintByIdBarcodeAsync (int? idBarcode)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintByIdBarcodeAsyncWithHttpInfo(idBarcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idBarcode">Barcode identifier</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintByIdBarcodeAsyncWithHttpInfo (int? idBarcode)
        {
            // verify the required parameter 'idBarcode' is set
            if (idBarcode == null)
                throw new ApiException(400, "Missing required parameter 'idBarcode' when calling BarcodeApi->BarcodePrintByIdBarcode");

            var localVarPath = "./api/Barcode/print/{idBarcode}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idBarcode != null) localVarPathParams.Add("idBarcode", this.Configuration.ApiClient.ParameterToString(idBarcode)); // path parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintByIdBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode for revision of document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>BarcodePrintResultDto</returns>
        public BarcodePrintResultDto BarcodePrintRevisionByDocnumber (int? docnumber, bool? insertRecord = null)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = BarcodePrintRevisionByDocnumberWithHttpInfo(docnumber, insertRecord);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This call executes the print of barcode for revision of document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>ApiResponse of BarcodePrintResultDto</returns>
        public ApiResponse< BarcodePrintResultDto > BarcodePrintRevisionByDocnumberWithHttpInfo (int? docnumber, bool? insertRecord = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintRevisionByDocnumber");

            var localVarPath = "./api/Barcode/printRevision/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (insertRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "insertRecord", insertRecord)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintRevisionByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This call executes the print of barcode for revision of document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of BarcodePrintResultDto</returns>
        public async System.Threading.Tasks.Task<BarcodePrintResultDto> BarcodePrintRevisionByDocnumberAsync (int? docnumber, bool? insertRecord = null)
        {
             ApiResponse<BarcodePrintResultDto> localVarResponse = await BarcodePrintRevisionByDocnumberAsyncWithHttpInfo(docnumber, insertRecord);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This call executes the print of barcode for revision of document 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docnumber">Document identifier</param>
        /// <param name="insertRecord">Create the barcode record (optional)</param>
        /// <returns>Task of ApiResponse (BarcodePrintResultDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodePrintResultDto>> BarcodePrintRevisionByDocnumberAsyncWithHttpInfo (int? docnumber, bool? insertRecord = null)
        {
            // verify the required parameter 'docnumber' is set
            if (docnumber == null)
                throw new ApiException(400, "Missing required parameter 'docnumber' when calling BarcodeApi->BarcodePrintRevisionByDocnumber");

            var localVarPath = "./api/Barcode/printRevision/byDocnumber/{docnumber}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docnumber != null) localVarPathParams.Add("docnumber", this.Configuration.ApiClient.ParameterToString(docnumber)); // path parameter
            if (insertRecord != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "insertRecord", insertRecord)); // query parameter

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodePrintRevisionByDocnumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodePrintResultDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodePrintResultDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodePrintResultDto)));
        }

        /// <summary>
        /// This method renames a barcode with a specified id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <param name="name">The new name</param>
        /// <returns></returns>
        public void BarcodeRenameBarcode (int? id, string name)
        {
             BarcodeRenameBarcodeWithHttpInfo(id, name);
        }

        /// <summary>
        /// This method renames a barcode with a specified id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <param name="name">The new name</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeRenameBarcodeWithHttpInfo (int? id, string name)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BarcodeApi->BarcodeRenameBarcode");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BarcodeApi->BarcodeRenameBarcode");

            var localVarPath = "./api/Barcode/Rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeRenameBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method renames a barcode with a specified id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <param name="name">The new name</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeRenameBarcodeAsync (int? id, string name)
        {
             await BarcodeRenameBarcodeAsyncWithHttpInfo(id, name);

        }

        /// <summary>
        /// This method renames a barcode with a specified id 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The barcode id</param>
        /// <param name="name">The new name</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeRenameBarcodeAsyncWithHttpInfo (int? id, string name)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BarcodeApi->BarcodeRenameBarcode");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BarcodeApi->BarcodeRenameBarcode");

            var localVarPath = "./api/Barcode/Rename/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null && name.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(name); // http body (model) parameter
            }
            else
            {
                localVarPostBody = name; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeRenameBarcode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto">Barcode Graphic Template to save</param>
        /// <returns></returns>
        public void BarcodeSetBarcodeGraphicUserTemplate (BarcodeGraphicTemplateSaveDto dto)
        {
             BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo(dto);
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto">Barcode Graphic Template to save</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeGraphicUserTemplateWithHttpInfo (BarcodeGraphicTemplateSaveDto dto)
        {
            // verify the required parameter 'dto' is set
            if (dto == null)
                throw new ApiException(400, "Missing required parameter 'dto' when calling BarcodeApi->BarcodeSetBarcodeGraphicUserTemplate");

            var localVarPath = "./api/Barcode/setUserGraphicTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dto != null && dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto">Barcode Graphic Template to save</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeGraphicUserTemplateAsync (BarcodeGraphicTemplateSaveDto dto)
        {
             await BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo(dto);

        }

        /// <summary>
        /// This call sets the barcode graphic user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dto">Barcode Graphic Template to save</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeGraphicUserTemplateAsyncWithHttpInfo (BarcodeGraphicTemplateSaveDto dto)
        {
            // verify the required parameter 'dto' is set
            if (dto == null)
                throw new ApiException(400, "Missing required parameter 'dto' when calling BarcodeApi->BarcodeSetBarcodeGraphicUserTemplate");

            var localVarPath = "./api/Barcode/setUserGraphicTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dto != null && dto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeGraphicUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeSettings">Barcode settings for user</param>
        /// <returns></returns>
        public void BarcodeSetBarcodeUserSettings (BarcodeUserSettingsDto barcodeSettings)
        {
             BarcodeSetBarcodeUserSettingsWithHttpInfo(barcodeSettings);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeSettings">Barcode settings for user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeUserSettingsWithHttpInfo (BarcodeUserSettingsDto barcodeSettings)
        {
            // verify the required parameter 'barcodeSettings' is set
            if (barcodeSettings == null)
                throw new ApiException(400, "Missing required parameter 'barcodeSettings' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");

            var localVarPath = "./api/Barcode/setUserSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeSettings != null && barcodeSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(barcodeSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = barcodeSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeSettings">Barcode settings for user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeUserSettingsAsync (BarcodeUserSettingsDto barcodeSettings)
        {
             await BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo(barcodeSettings);

        }

        /// <summary>
        /// This call sets the barcode user default settings 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeSettings">Barcode settings for user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserSettingsAsyncWithHttpInfo (BarcodeUserSettingsDto barcodeSettings)
        {
            // verify the required parameter 'barcodeSettings' is set
            if (barcodeSettings == null)
                throw new ApiException(400, "Missing required parameter 'barcodeSettings' when calling BarcodeApi->BarcodeSetBarcodeUserSettings");

            var localVarPath = "./api/Barcode/setUserSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeSettings != null && barcodeSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(barcodeSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = barcodeSettings; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDto">Barcode Template</param>
        /// <returns></returns>
        public void BarcodeSetBarcodeUserTemplate (BarcodeTemplateDto templateDto)
        {
             BarcodeSetBarcodeUserTemplateWithHttpInfo(templateDto);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDto">Barcode Template</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeSetBarcodeUserTemplateWithHttpInfo (BarcodeTemplateDto templateDto)
        {
            // verify the required parameter 'templateDto' is set
            if (templateDto == null)
                throw new ApiException(400, "Missing required parameter 'templateDto' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");

            var localVarPath = "./api/Barcode/setUserTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateDto != null && templateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(templateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDto">Barcode Template</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeSetBarcodeUserTemplateAsync (BarcodeTemplateDto templateDto)
        {
             await BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo(templateDto);

        }

        /// <summary>
        /// This call sets the barcode user template 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateDto">Barcode Template</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeSetBarcodeUserTemplateAsyncWithHttpInfo (BarcodeTemplateDto templateDto)
        {
            // verify the required parameter 'templateDto' is set
            if (templateDto == null)
                throw new ApiException(400, "Missing required parameter 'templateDto' when calling BarcodeApi->BarcodeSetBarcodeUserTemplate");

            var localVarPath = "./api/Barcode/setUserTemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateDto != null && templateDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(templateDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templateDto; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeSetBarcodeUserTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method detaches a document from a specified barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns></returns>
        public void BarcodeUnMatchDocument (List<int?> ids)
        {
             BarcodeUnMatchDocumentWithHttpInfo(ids);
        }

        /// <summary>
        /// This method detaches a document from a specified barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BarcodeUnMatchDocumentWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling BarcodeApi->BarcodeUnMatchDocument");

            var localVarPath = "./api/Barcode/UnMatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeUnMatchDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// This method detaches a document from a specified barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BarcodeUnMatchDocumentAsync (List<int?> ids)
        {
             await BarcodeUnMatchDocumentAsyncWithHttpInfo(ids);

        }

        /// <summary>
        /// This method detaches a document from a specified barcode 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">The barcode ids</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BarcodeUnMatchDocumentAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling BarcodeApi->BarcodeUnMatchDocument");

            var localVarPath = "./api/Barcode/UnMatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeUnMatchDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates a barcode service rule 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>BarcodeServiceRuleDTO</returns>
        public BarcodeServiceRuleDTO BarcodeUpdateBarcodeUserServiceRule (BarcodeServiceRuleDTO barcodeServiceRule)
        {
             ApiResponse<BarcodeServiceRuleDTO> localVarResponse = BarcodeUpdateBarcodeUserServiceRuleWithHttpInfo(barcodeServiceRule);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a barcode service rule 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>ApiResponse of BarcodeServiceRuleDTO</returns>
        public ApiResponse< BarcodeServiceRuleDTO > BarcodeUpdateBarcodeUserServiceRuleWithHttpInfo (BarcodeServiceRuleDTO barcodeServiceRule)
        {
            // verify the required parameter 'barcodeServiceRule' is set
            if (barcodeServiceRule == null)
                throw new ApiException(400, "Missing required parameter 'barcodeServiceRule' when calling BarcodeApi->BarcodeUpdateBarcodeUserServiceRule");

            var localVarPath = "./api/Barcode/UserServiceRule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeServiceRule != null && barcodeServiceRule.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(barcodeServiceRule); // http body (model) parameter
            }
            else
            {
                localVarPostBody = barcodeServiceRule; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeUpdateBarcodeUserServiceRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeServiceRuleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeServiceRuleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeServiceRuleDTO)));
        }

        /// <summary>
        /// Updates a barcode service rule 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>Task of BarcodeServiceRuleDTO</returns>
        public async System.Threading.Tasks.Task<BarcodeServiceRuleDTO> BarcodeUpdateBarcodeUserServiceRuleAsync (BarcodeServiceRuleDTO barcodeServiceRule)
        {
             ApiResponse<BarcodeServiceRuleDTO> localVarResponse = await BarcodeUpdateBarcodeUserServiceRuleAsyncWithHttpInfo(barcodeServiceRule);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a barcode service rule 
        /// </summary>
        /// <exception cref="ARXivarNEXT.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="barcodeServiceRule">The barcode service rule</param>
        /// <returns>Task of ApiResponse (BarcodeServiceRuleDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeServiceRuleDTO>> BarcodeUpdateBarcodeUserServiceRuleAsyncWithHttpInfo (BarcodeServiceRuleDTO barcodeServiceRule)
        {
            // verify the required parameter 'barcodeServiceRule' is set
            if (barcodeServiceRule == null)
                throw new ApiException(400, "Missing required parameter 'barcodeServiceRule' when calling BarcodeApi->BarcodeUpdateBarcodeUserServiceRule");

            var localVarPath = "./api/Barcode/UserServiceRule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (barcodeServiceRule != null && barcodeServiceRule.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(barcodeServiceRule); // http body (model) parameter
            }
            else
            {
                localVarPostBody = barcodeServiceRule; // byte array
            }

            // authentication (Authorization) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BarcodeUpdateBarcodeUserServiceRule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeServiceRuleDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (BarcodeServiceRuleDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeServiceRuleDTO)));
        }

    }
}
